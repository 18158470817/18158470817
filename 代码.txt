
def 鼠标移开():
    pyautogui.moveTo(顶点坐标X + 300, 顶点坐标Y + 100)
def 删除重复元素(列表, 最小距离=3):
    新列表 = []
    for i in range(len(列表)):
        x1, y1 = 列表[i]
        is_duplicate = False
        for j in range(i + 1, len(列表)):
            x2, y2 = 列表[j]
            # 计算两个点之间的欧氏距离
            距离 = ((x2 - x1) ** 2 + (y2 - y1) ** 2) ** 0.5
            # 如果距离小于最小距离，标记为重复元素
            if 距离 < 最小距离:
                is_duplicate = True
                break
        # 如果不是重复元素，则添加到新列表中
        if not is_duplicate:
            新列表.append(列表[i])
    return 新列表


def 验证函数():
    print('正在验证')
    移动验证 = 单个模板匹配(0, 0, 400, 280, 'yidong.png', 返回坐标=True)
    移动验证2 = 单个模板匹配(0, 0, 400, 280, 'yidong2.png', 返回坐标=True)
    成语验证 = 单个模板匹配(0, 0, 400, 210, 'chengyu.png', 返回坐标=True)
    if 移动验证 or 移动验证2:
        print('请移动验证')
        if 移动验证:
            移动验证坐标 = 移动验证
        elif 移动验证2:
            移动验证坐标 = 移动验证2
        sift = cv2.SIFT_create()
        移动验证 = True
        移动验证2 = True
        while 终止按键:
            pyautogui.press('f9')
            模板图像 = ImageGrab.grab(bbox=(
                顶点坐标X + 移动验证坐标[0] + 35, 顶点坐标Y + 移动验证坐标[1] - 25,
                顶点坐标X + 移动验证坐标[0] + 35 + 65,
                顶点坐标Y + 移动验证坐标[1] - 25 + 55))
            模板图像 = cv2.cvtColor(np.array(模板图像), cv2.COLOR_RGB2BGR)
            kp1, des1 = sift.detectAndCompute(模板图像, None)
            for i in range(3):
                识别图像 = ImageGrab.grab(bbox=(
                    顶点坐标X + 移动验证坐标[0] - 120, 顶点坐标Y + 移动验证坐标[1] - 25 + 60,
                    顶点坐标X + 移动验证坐标[0] + 35 + 220,
                    顶点坐标Y + 移动验证坐标[1] - 25 + 40 + 118))
                识别图像 = cv2.cvtColor(np.array(识别图像), cv2.COLOR_RGB2BGR)
                kp2, des2 = sift.detectAndCompute(识别图像, None)
                flann = cv2.FlannBasedMatcher()
                匹配结果 = flann.knnMatch(des1, des2, k=2)
                匹配列表 = []
                for m, n in 匹配结果:
                    if m.distance < 0.85 * n.distance:
                        匹配列表.append(m)
                坐标列表 = [kp2[m.trainIdx].pt for m in 匹配列表]
                if 坐标列表:
                    最佳坐标 = max(坐标列表, key=lambda 点: sum(1 for 其他点 in 坐标列表 if
                                                                其他点 != 点 and abs(
                                                                    点[0] - 其他点[
                                                                        0]) < 30 and abs(
                                                                    点[1] - 其他点[
                                                                        1]) < 30))
                    鼠标移动到指定距离(移动验证坐标[0] - 120 + 最佳坐标[0],
                                       移动验证坐标[1] - 25 + 60 + 最佳坐标[1], 1, 偏移距离=90)
                    鼠标移开()
                    print("范围内点数最多的坐标：", 最佳坐标)
                else:
                    print("未找到移动验证")
                time.sleep(0.7)
                移动验证 = 单个模板匹配(0, 0, 400, 280, 'yidong.png')
                移动验证2 = 单个模板匹配(0, 0, 400, 280, 'yidong2.png')
                if not 移动验证 and not 移动验证2:
                    break
            if not 移动验证 and not 移动验证2:
                break
    elif 成语验证:
        print('请成语验证')
        截图 = ImageGrab.grab(bbox=(顶点坐标X + 200, 顶点坐标Y + 150, 顶点坐标X + 640, 顶点坐标Y + 440))
        res = ocr.ocr(截图)  # 调用cnocr进行识别
        示例成语文本 = [line['text'] for line in res]  # 提取文本部分
        示例成语文本 = ' '.join(示例成语文本)
        示例成语文本 = 示例成语文本.replace(' ', '')
        print(示例成语文本)
        with open('成语大全.txt', 'r', encoding='utf-8') as f:
            成语列表 = f.read().splitlines()
        示例成语列表 = []
        for 成语 in 成语列表:
            if (成语[0:3] in 示例成语文本) or (成语[1:4] in 示例成语文本):
                示例成语列表.append(成语)
            elif 成语[0:2] in 示例成语文本 and 成语[3] in 示例成语文本 and (
                    示例成语文本.index(成语[3]) - 示例成语文本.index(成语[0:2]) == 3):
                示例成语列表.append(成语)
            elif 成语[2:4] in 示例成语文本 and 成语[0] in 示例成语文本 and (
                    示例成语文本.index(成语[2:4]) - 示例成语文本.index(成语[0]) == 2):
                示例成语列表.append(成语)
        print(示例成语列表)
        if 示例成语列表 == []:
            当前时间 = time.strftime("%Y%m%d%H%M%S", time.localtime())
            文件名 = f'{当前时间}.txt'
            示例成语列表 = ['没有识别到成语', 文件名]
        成语文件名 = ' '.join(示例成语列表)
        当前目录 = os.path.dirname(__file__)
        文件夹路径 = os.path.join(当前目录, '成语')
        print('文件夹路径', 文件夹路径)
        新文件夹路径 = os.path.join(文件夹路径, '新 '+成语文件名)
        子文件夹列表 = [子文件夹 for 子文件夹 in os.listdir(文件夹路径) if
                        os.path.isdir(os.path.join(文件夹路径, 子文件夹))]
        print('子文件夹列表', 子文件夹列表)
        匹配文件夹列表 = [子文件夹 for 子文件夹 in 子文件夹列表 if 成语文件名 in 子文件夹]
        print('匹配文件夹列表', 匹配文件夹列表)
        sift = cv2.SIFT_create()
        if 匹配文件夹列表:
            找到的文件夹路径 = os.path.join(文件夹路径, 匹配文件夹列表[0])
            print('找到的文件夹路径:', 找到的文件夹路径)
            print("找到", 成语文件名)
            for i in range(1, 5):
                文件夹 = os.path.join(找到的文件夹路径, str(i))  # 找到识别成语文件夹的路径 比如 春暖花开 的路径
                if os.path.isdir(文件夹):
                    for 根, 目录, 文件 in os.walk(文件夹):
                        print('根, 目录, 文件:', 根, 目录, 文件)
                        匹配列表 = []
                        截图 = ImageGrab.grab(bbox=(顶点坐标X + 215, 顶点坐标Y + 260, 顶点坐标X + 455, 顶点坐标Y +330))
                        识别图像 = cv2.cvtColor(np.array(截图), cv2.COLOR_RGB2BGR)
                        for 文件名 in 文件:
                            图片路径 = os.path.join(根, 文件名)
                            模板图像 = Image.open(图片路径)
                            模板图像 = cv2.cvtColor(np.array(模板图像), cv2.COLOR_RGB2BGR)
                            kp1, des1 = sift.detectAndCompute(模板图像, None)
                            kp2, des2 = sift.detectAndCompute(识别图像, None)
                            flann = cv2.FlannBasedMatcher()
                            匹配结果 = flann.knnMatch(des1, des2, k=2)
                            for m, n in 匹配结果:
                                if m.distance < 0.85 * n.distance:
                                    匹配列表.append(m)
                        改变后的像素坐标 = [kp2[match.trainIdx].pt for match in 匹配列表]
                        # 在图片上绘制匹配点
                        像素分组 = defaultdict(list)
                        for i, 像素1 in enumerate(改变后的像素坐标):
                            for j, 像素2 in enumerate(改变后的像素坐标):
                                if i != j and abs(像素1[0] - 像素2[0]) < 20 and abs(像素1[1] - 像素2[1]) < 20:
                                    像素分组[i].append(j)
                        最大相似点数 = max(像素分组, key=lambda x: len(像素分组[x]))
                        A = 改变后的像素坐标[最大相似点数]
                        鼠标移动到指定距离(215+A[0],260+A[1],1)
                        # for point in 改变后的像素坐标:
                        #     x, y = point
                        #     cv2.circle(识别图像, (int(x), int(y)), 2, (0, 255, 0), 1)  # 绘制圆形标记
                        # cv2.imwrite('C.png', 识别图像)
                        pyautogui.move(0, 150)
                        time.sleep(0.7)
            # for i in range(5):
            #     时间戳 = time.time()
            #     截图 = ImageGrab.grab(bbox=(顶点坐标X + 200, 顶点坐标Y + 150, 顶点坐标X + 640, 顶点坐标Y + 440))
            #     截图.save(os.path.join(新文件夹路径, f'{时间戳}.png'))
            #     print(f'第{i + 1}次截图已保存。')
            #     print('请按空格键进行下一次截图')
            #     keyboard.wait('space')  # 等待用户按下空格键
            # 当前时间 = time.strftime("%Y%m%d%H%M%S", time.localtime())
            # 文件名 = f'示例成语文本_{当前时间}.txt'
            # with open(os.path.join(新文件夹路径, 文件名), 'w', encoding='utf-8') as 文件:
            #     文件.write(示例成语文本)
        else:
            print("未找到", 示例成语列表, '，已创建新文件夹')
            os.mkdir(新文件夹路径)
            for i in range(1, 5):
                os.mkdir(os.path.join(新文件夹路径, str(i)))
            for i in range(9):
                时间戳 = time.time()
                截图 = ImageGrab.grab(bbox=(顶点坐标X + 200, 顶点坐标Y + 150, 顶点坐标X + 640, 顶点坐标Y + 440))
                截图.save(os.path.join(新文件夹路径, f'{时间戳}.png'))
                print(f'第{i + 1}次截图已保存。')
                print('请按j键进行下一次截图')
                keyboard.wait('j')  # 等待用户按下空格键
            当前时间 = time.strftime("%Y%m%d%H%M%S", time.localtime())
            文件名 = f'示例成语文本_{当前时间}.txt'
            with open(os.path.join(新文件夹路径, 文件名), 'w', encoding='utf-8') as 文件:
                文件.write(示例成语文本)
            print("识别的文本文件已创建。")
def 鼠标移动到指定距离(目标X, 目标Y, 点击次数, 时间=0, 偏移距离=8, 红点=False):
    偏移距离X = 0
    偏移距离Y = 0
    if 红点:
        旗帜坐标X = None
        旗帜坐标Y = None
        旗帜补充 = 单个模板匹配(100, 130, 400, 270, '7bc.png', 返回坐标=True)
        if 旗帜补充:
            time.sleep(0.3)
            鼠标移动到指定距离(旗帜补充[0] + 100, 旗帜补充[1] + 130, 1)
            鼠标移动到指定距离(288, 381, 1)
            鼠标移动到指定距离(353, 413, 1)
            time.sleep(0.5)
            旗帜补充2 = 单个模板匹配(0, 370, 500, 550, '72.png', 0.9, 返回坐标=True)
            if 旗帜补充2:
                鼠标移动到指定距离(旗帜补充2[0], 旗帜补充2[1] + 370 - 22, 1)
                time.sleep(0.3)
        for i in range(5):
            点 = 单个模板匹配(目标X - 50, 目标Y - 50, 目标X + 50, 目标Y + 50, 'hongdian.png', 0.92, 返回坐标=True)
            if 点:
                print(目标X, 目标Y)
                目标X = 目标X - 50 + 点[0]
                目标Y = 目标Y - 50 + 点[1] + 3
                旗帜坐标X = 目标X
                旗帜坐标Y = 目标Y
                break
        else:
            pyautogui.move(100,0)
            time.sleep(0.3)
    if 目标X > 812 or 目标Y > 663:
        print('点击超出窗口，请检查识别 或者代码准确性.....')
    if 目标X < 150:
        A = 33
    elif 目标X > 600:
        A = -70
    else:
        A = 0
    if 目标Y < 150:
        B = 33
    elif 目标Y > 530:
        B = -33
    else:
        B = 0
    pyautogui.moveTo(目标X + A + 顶点坐标X, 目标Y + 顶点坐标Y + B)
    time.sleep(0.07)
    for i in range(4):
        窗口截屏 = ImageGrab.grab(
            bbox=(顶点坐标X + 目标X - 100, 顶点坐标Y + 目标Y - 100, 顶点坐标X + 目标X + 100, 顶点坐标Y + 目标Y + 100))
        原始图像 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
        for index, 模板 in enumerate(鼠标模板列表):
            result = cv2.matchTemplate(原始图像, 模板, cv2.TM_CCOEFF_NORMED)
            min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
            threshold = 0.82  # 设置匹配阈值
            if max_val > threshold:
                pt = max_loc
                左上角 = (pt[0], pt[1])
                h, w = 模板.shape[:2]
                右下角 = (pt[0] + w, pt[1] + h)
                中心点X = (pt[0] + 右下角[0]) // 2
                中心点Y = (pt[1] + 右下角[1]) // 2
                中心点坐标 = (中心点X, 中心点Y)
                偏移距离X = 中心点X - 15 - 100
                偏移距离Y = 中心点Y - 15 - 100
                if 偏移距离X > 222:
                    print("偏移距离X过大：", 偏移距离X)
                    偏移距离X = 0
                if 偏移距离Y > 222:
                    print("偏移距离Y过大：", 偏移距离Y)
                    偏移距离Y = 0
                pyautogui.move(-偏移距离X * 0.9, -偏移距离Y * 0.9, 时间)
                break
        if abs(偏移距离X) < 偏移距离 and abs(偏移距离Y) < 偏移距离:
            if 点击次数 == 1:
                pyautogui.click()
            elif 点击次数 == 2:
                pyautogui.doubleClick()
            elif 点击次数 == 3:
                pyautogui.rightClick()
            elif 点击次数 == 4:
                pass
            break
    else:
        if 点击次数 == 1:
            pyautogui.click()
        elif 点击次数 == 2:
            pyautogui.doubleClick()
        elif 点击次数 == 3:
            pyautogui.rightClick()
        elif 点击次数 == 4:
            pass
    if 红点:
        return 旗帜坐标X, 旗帜坐标Y
    else:
        return False, False
# zzzz


def 神木林当地前往命令():
    global 坐标差X, 坐标差Y,右边范围,上边范围
    global 计数器
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (86, 173)
    地图左下角的位置 = [左下角坐标X + 283 * 窗口的大小比例值, 左下角坐标Y - 116 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 450 * 窗口的大小比例值, 左下角坐标Y - 455 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if abs(坐标差X) >= 10 or abs(坐标差Y) >= 10:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 40:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 40:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
    else:
        if 目标没移动:
            time.sleep(0.6)
            右边范围 = 地图范围[0] - 左右边缘距离
            上边范围 = 地图范围[1] - 上下边缘距离
            print('右边范围,上边范围:', 右边范围, 上边范围)
            隐藏人物()
            目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
def 贼王模板匹配():
    pyautogui.press('f9')
    for i in range(15):
        贼王 = False
        窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X, 顶点坐标Y, 顶点坐标X + 800, 顶点坐标Y + 600))
        原始图像 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
        for 模板 in 贼王模板列表:
            result = cv2.matchTemplate(原始图像, 模板, cv2.TM_CCOEFF_NORMED)
            loc = np.where(result >= 0.83)  # 找到匹配程度大于阈值的位置
            if len(loc[0]) > 0:  # 如果匹配成功
                pt = (loc[1][0], loc[0][0])  # 取第一个匹配位置
                左上角 = (pt[0], pt[1])
                h, w = 模板.shape[:2]
                右下角 = (pt[0] + w, pt[1] + h)
                中心点X = (pt[0] + 右下角[0]) // 2
                中心点Y = (pt[1] + 右下角[1]) // 2
                中心点坐标 = (中心点X, 中心点Y)
                print("贼王模板中心点坐标：", 中心点坐标)
                鼠标移动到指定距离(中心点X, 中心点Y, 1)
                鼠标移动到指定距离(244, 393, 4)
                贼王 = 单个模板匹配(130, 350, 424, 448, 'zeiwangpk.png')
                if 贼王:
                    pyautogui.click()
                    time.sleep(1.5)
                else:
                    if 中心点X > 450:
                        左右偏移 = -80
                    else:
                        左右偏移 = +80
                    鼠标移动到指定距离(中心点X + 左右偏移, 中心点Y, 1)
                    time.sleep(3)
                break
        else:
            print("没有发现贼王")
        if 贼王:
            break


def 贼王店铺前往命令():
    global 场景点X坐标, 场景点Y坐标, 场景文本
    室内 = True
    if "长安" in 任务文本 and "杂" in 任务文本:
        if not '长安' in 场景文本:
            打开或关闭背包()
            打开长安飞行旗()
            鼠标移动到指定距离(651, 372, 1, 红点=True)
            打开或关闭背包()
            打开或关闭地图()
            鼠标移动到指定距离(664, 366, 1)
            打开或关闭地图()
            time.sleep(3)
            场景窗口文本识别()
        if '长安' in 场景文本 and 533 < 场景点X坐标 < 539 and 130 < 场景点Y坐标 < 136:
            鼠标移动到指定距离(580, 305, 1)
            time.sleep(1)
            贼王模板匹配()
        else:
            打开或关闭地图()
            鼠标移动到指定距离(664, 366, 1)
            打开或关闭地图()
    elif "二楼" in 任务文本 and "长安" in 任务文本:
        if not '酒店' in 场景文本:
            打开或关闭背包()
            打开长安飞行旗()
            点击酒店飞行坐标()
            打开或关闭背包()
            pyautogui.hotkey('alt', 'h')
            pyautogui.move(-115, -35)
            pyautogui.click()
            time.sleep(0.7)
            鼠标移动到指定距离(540, 100, 1)
            time.sleep(5)
            pyautogui.move(120, 30)
            pyautogui.click()
            time.sleep(3)
            酒二楼 = 单个模板匹配(0, 0, 600, 300, '92lou.png')
            if 酒二楼:
                鼠标移动到指定距离(170, 610, 1)
                贼王模板匹配()
    elif "二楼" in 任务文本 and "来" in 任务文本:
        打开或关闭背包()
        打开傲来国飞行旗()
        点击东海湾路口()
        打开或关闭背包()
        打开或关闭地图()
        鼠标移动到指定距离(490, 466, 1)
        打开或关闭地图()
        time.sleep(4 + 随机小数0)
        傲来二门口 = 单个模板匹配(0, 0, 600, 400, 'aolai2.png', 返回坐标=True)
        if 傲来二门口:
            鼠标移动到指定距离(傲来二门口[0], 傲来二门口[1], 1)
            time.sleep(0.9)
            鼠标移动到指定距离(410, 100, 1)
            time.sleep(4.3)
            鼠标移动到指定距离(275, 135, 1)
            time.sleep(3)
            鼠标移动到指定距离(140, 420, 1)
            time.sleep(2)
            鼠标移动到指定距离(660, 135, 1)
            贼王模板匹配()
    elif "国子" in 任务文本 or "子监" in 任务文本:
        if not "国子监" in 场景文本:
            if not '长安' in 场景文本:
                使用快捷键打开飞行符()
                鼠标移动到指定距离(520, 358, 1)
                time.sleep(0.7)
                打开或关闭地图()
                time.sleep(0.3)
                鼠标移动到指定距离(408, 300, 1)
                打开或关闭地图()
                time.sleep(1)
                场景窗口文本识别()
            if '长安' in 场景文本 and 273 < 场景点X坐标 < 279 and 200 < 场景点Y坐标 < 206:
                鼠标移动到指定距离(375, 286, 1)
                time.sleep(1)
                鼠标移动到指定距离(126, 166, 1)
                贼王模板匹配()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(408, 300, 1)
                    打开或关闭地图()
    elif "品" in 任务文本 and "店" in 任务文本:
        if not "品店" in 场景文本:
            if not '长安' in 场景文本:
                打开或关闭背包()
                打开长安飞行旗()
                鼠标移动到指定距离(460, 480, 1, 红点=True)
                打开或关闭背包()
                打开或关闭地图()
                鼠标移动到指定距离(511, 482, 1)
                打开或关闭地图()
                time.sleep(1)
                场景窗口文本识别()
            if '长安' in 场景文本 and 387 < 场景点X坐标 < 392 and 12 < 场景点Y坐标 < 17:
                鼠标移动到指定距离(344, 304, 1)
                time.sleep(1)
                鼠标移动到指定距离(140, 300, 1)
                贼王模板匹配()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(511, 482, 1)
                    打开或关闭地图()
    elif "建" in 任务文本 and "货" in 任务文本 and "店" in 任务文本:
        if "邺" in 场景文本 or "建" in 场景文本:
            if 119 > 场景点X坐标 > 114 and 130 > 场景点Y坐标 > 125:
                鼠标移动到指定距离(350, 285, 1)
                time.sleep(0.6 + 随机小数0)
                贼王模板匹配()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(352, 253, 1)
                    打开或关闭地图()
        else:
            使用快捷键打开飞行符()
            点击建邺城飞行点()
            time.sleep(0.2 + 随机小数0)
            打开或关闭地图()
            鼠标移动到指定距离(352, 253, 1)
            打开或关闭地图()
    elif "邺" in 任务文本 and "布" in 任务文本:
        if "邺" in 场景文本 or "建" in 场景文本:
            if 172 > 场景点X坐标 > 167 and 35 > 场景点Y坐标 > 32:
                鼠标移动到指定距离(463, 265, 1)
                time.sleep(0.6 + 随机小数0)
                贼王模板匹配()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(460, 437, 1)
                    打开或关闭地图()
        else:
            使用快捷键打开飞行符()
            点击建邺城飞行点()
            time.sleep(0.2 + 随机小数0)
            打开或关闭地图()
            鼠标移动到指定距离(460, 437, 1)
            打开或关闭地图()
    elif "长寿" in 任务文本 and "酒" in 任务文本:
        if not "寿村" in 场景文本:
            打开或关闭背包()
            打开长寿村飞行旗()
            鼠标移动到指定距离(477, 356, 1, 红点=True)
            打开或关闭背包()
            time.sleep(0.7)
            打开或关闭地图()
            鼠标移动到指定距离(421, 305, 1)
            打开或关闭地图()
        elif "寿村" in 场景文本:
            if 115 > 场景点X坐标 > 110 and 150 > 场景点Y坐标 > 145:
                鼠标移动到指定距离(340, 300, 1)
                贼王模板匹配()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(421, 305, 1)
                    打开或关闭地图()
    elif "来" in 任务文本 and "药" in 任务文本:
        if not "傲" in 场景文本:
            打开或关闭背包()
            打开傲来国飞行旗()
            鼠标移动到指定距离(283, 450, 1, 红点=True)
            打开或关闭背包()
            time.sleep(0.7)
            打开或关闭地图()
            鼠标移动到指定距离(258, 443, 1)
            打开或关闭地图()
        elif "傲" in 场景文本:
            if 55 > 场景点X坐标 > 52 and 41 > 场景点Y坐标 > 37:
                鼠标移动到指定距离(333, 268, 1)
                鼠标移动到指定距离(260, 315, 1)
                贼王模板匹配()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(258, 443, 1)
                    打开或关闭地图()
    elif "长寿" in 任务文本 and "铺" in 任务文本:
        if not "寿村" in 场景文本:
            打开或关闭背包()
            打开长寿村飞行旗()
            鼠标移动到指定距离(312, 342, 1, 红点=True)
            打开或关闭背包()
            time.sleep(0.7)
            打开或关闭地图()
            鼠标移动到指定距离(261, 342, 1)
            打开或关闭地图()
        elif "寿村" in 场景文本:
            if 21 > 场景点X坐标 > 15 and 127 > 场景点Y坐标 > 124:
                鼠标移动到指定距离(266, 276, 1)
                贼王模板匹配()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(261, 342, 1)
                    打开或关闭地图()
    else:
        室内 = False
    return 室内


def 载入仓库宝图坐标及位置(载入次数):
    鼠标移动到指定距离(135, 501, 1)
    for 仓库个数 in range(载入次数):
        if 仓库个数 > 0:
            翻页(1, 1)
            time.sleep(0.7)
        中心点列表 = 仓库宝图模板匹配()
        for 中心点 in 中心点列表:
            鼠标移动到指定距离(中心点[0], 中心点[1], 4, 偏移距离=30)
            for i in range(20):
                发现类型 = 单个模板匹配(30, 250, 300, 555, 'leixing.png',返回坐标=True)
                if 发现类型:
                    print('发现类型',发现类型)
                    break
            else:
                print('宝图地点识别错误')
            if 发现类型:
                任务文本 = 取图窗口文本识别(发现类型[0]+70+30,发现类型[1]+250,200,33)
                a = False
                for 地点 in 地点库:
                    出现次数 = 0
                    for 字 in 地点:
                        if 字 in 任务文本:
                            出现次数 += 1
                        if 出现次数 >= 2:
                            with open('仓库宝图数据1.txt', 'a', encoding='utf-8') as file:
                                file.write(f"宝图地点: {地点}\n模板坐标: {中心点}\n仓库页数: {仓库个数}\n")
                            a = True
                            break
                    if a:
                        break


def 挖图开挖函数(比例X, 比例Y, 地图左下角的位置):
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    global 中心点列表1
    global 计数器
    背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
    if not 背包开:
        print('背包没有打开,已打开背包')
        打开或关闭背包()
    鼠标移动到指定距离(中心坐标[0], 中心坐标[1], 3)
    pyautogui.moveTo(450 + 顶点坐标X, 500 + 顶点坐标Y)
    中心点列表 = 背包宝图模板匹配()
    for i in range(6):
        time.sleep(0.1)
        战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
        if 战斗中:
            战斗攻击()
            break
    if not 战斗中:
        中心点列表1 = 中心点列表
        if 0 < len(中心点列表1) < len(单次挖图坐标):
            单次挖图坐标 = 单次挖图坐标[-len(中心点列表1):]
            print('已刷新挖图列表', 单次挖图坐标)
            打开或关闭背包()
            打开或关闭地图()
            起点到目标点X = 比例X * 单次挖图坐标[0][0]
            起点到目标点Y = 比例Y * 单次挖图坐标[0][1]
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
        elif 0 < len(中心点列表1) == len(单次挖图坐标):
            计数器 += 1
        elif len(中心点列表1) == 0:
            单次挖图坐标 = []
            打开或关闭背包()
            回宝象国存放战利品()
    elif 战斗中:  # 假如在战斗中的话
        背包开 = 单个模板匹配(0, 0, 750, 280, 'beibaokai.png')
        if 背包开:
            中心点列表1 = 中心点列表
            if 0 < len(中心点列表1) < len(单次挖图坐标):
                单次挖图坐标 = 单次挖图坐标[-len(中心点列表1):]
                print('已刷新挖图列表',单次挖图坐标)
            elif len(中心点列表1) == 0:
                单次挖图坐标 = []
            鼠标移动到指定距离(500 + 随机整数10, 200 + 随机整数3, 3)


def 回宝象国存放战利品(已到宝象=False):
    global 放战利品仓库页数
    if not 已到宝象:
        垃圾书铁摧毁()
        使用快捷键打开飞行符()
        点击宝象国飞行点()
        鼠标移动到指定距离(306, 253, 1)
        time.sleep(0.3 + 随机小数0)
        鼠标移动到指定距离(210, 430, 1)
        鼠标移动到指定距离(210 + 随机整数3, 200 + 随机整数3, 4)
    time.sleep(0.7)
    仓库开 = 单个模板匹配(340, 170, 730, 360, 'cangkukai.png')
    if 仓库开:
        清空背包或行囊(5, 1, 行囊不清空=True)
    elif not 仓库开:
        鼠标移动到指定距离(406 - (场景点X坐标 - 110) * 20, 310 + (场景点Y坐标 - 74) * 20, 1)
        鼠标移动到指定距离(215, 428, 1)


def 前往当地挖宝地点():
    global 任务点X坐标
    global 任务点Y坐标
    global 场景点X坐标
    global 场景点Y坐标
    global 场景文本
    global 坐标差X
    global 坐标差Y
    global 挖宝地点
    if "江南" in 挖宝地点 or "野外" in 挖宝地点 or "南野" in 挖宝地点:
        print("正在前往江南野外")
        打开或关闭背包()
        挖图坐标 = 读取并定制挖宝路线('Y', '从大到小')
        打开或关闭背包()
    elif "麒" in 挖宝地点 or "麟" in 挖宝地点 or "山" in 挖宝地点:
        print("正在前往麒麟山")
        使用快捷键打开飞行符()
        time.sleep(0.3 + 随机小数0)
        点击朱紫国飞行点()
        time.sleep(0.4 + 随机小数0)
        打开或关闭地图()
        time.sleep(0.4 + 随机小数0)
        鼠标移动到指定距离(160, 255, 1)
        time.sleep(0.4 + 随机小数0)
        打开或关闭地图()
        打开或关闭背包()
        读取并定制挖宝路线('X', '从大到小')
        打开或关闭背包()
    elif "建邺" in 挖宝地点 or "邺城" in 挖宝地点 or "城" in 挖宝地点:
        print("正在前往建邺城")
        打开或关闭背包()
        挖图坐标 = 读取并定制挖宝路线('X', '从小到大')
        打开或关闭背包()
    elif "东海" in 挖宝地点 or "海湾" in 挖宝地点:
        print("正在前往东海湾")
        打开或关闭背包()
        挖图坐标 = 读取并定制挖宝路线('X', '从大到小')
        打开或关闭背包()
    elif "北俱" in 挖宝地点 or "俱芦" in 挖宝地点 or "芦洲" in 挖宝地点:
        print("正在前往北俱芦洲")
        打开或关闭背包()
        打开傲来国飞行旗()
        time.sleep(0.2 + 随机小数0)
        点击花果山路口()
        time.sleep(0.2 + 随机小数0)
        鼠标移动到指定距离(700, 140, 4)
        pyautogui.move(40, 0)
        pyautogui.click()
        time.sleep(1 + 随机小数0)
        pyautogui.click()
        time.sleep(0.3 + 随机小数0)
        pyautogui.click()
        打开或关闭地图()
        鼠标移动到指定距离(248 + 随机整数3, 277 + 随机整数3, 1)
        time.sleep(0.2 + 随机小数0)
        打开或关闭地图()
        time.sleep(0.2 + 随机小数0)
        读取并定制挖宝路线('X', '从大到小')
        打开或关闭背包()
    elif "郊" in 挖宝地点 or "寿郊" in 挖宝地点:
        print("正在前往长寿郊外")
        使用快捷键打开飞行符()
        time.sleep(0.2 + 随机小数0)
        点击长寿村飞行点()
        time.sleep(0.2 + 随机小数0)
        打开或关闭地图()
        time.sleep(0.2 + 随机小数0)
        鼠标移动到指定距离(485, 540, 1)
        time.sleep(0.2 + 随机小数0)
        打开或关闭地图()
        time.sleep(0.2 + 随机小数0)
        打开或关闭背包()
        读取并定制挖宝路线('Y', '从大到小')
        打开或关闭背包()
    elif "普陀" in 挖宝地点:
        print("正在前往普陀山")
        打开或关闭背包()
        time.sleep(0.2 + 随机小数0)
        打开长安飞行旗()
        点击大唐国境路口()
        time.sleep(0.2 + 随机小数0)
        鼠标移动到指定距离(90 + 随机整数3, 573 + 随机整数3, 1)
        time.sleep(0.5 + 随机小数0)
        pyautogui.click()
        打开或关闭地图()
        time.sleep(0.2 + 随机小数0)
        鼠标移动到指定距离(420, 490, 1)
        time.sleep(0.2 + 随机小数0)
        出口钩子模板匹配()
        打开或关闭地图()
        读取并定制挖宝路线('Y', '从小到大')
        打开或关闭背包()
    elif "国境" in 挖宝地点:
        print("正在前往大唐国境")
        打开或关闭背包()
        挖图坐标 = 读取并定制挖宝路线('Y', '从小到大')
        打开或关闭背包()
    elif "傲" in 挖宝地点:
        print("正在前往傲来国")
        打开或关闭背包()
        挖图坐标 = 读取并定制挖宝路线('Y', '从大到小')
        打开或关闭背包()
    elif "家村" in 挖宝地点 or "墨家" in 挖宝地点:
        print("正在前往墨家村")
        使用快捷键打开飞行符()
        time.sleep(0.3 + 随机小数0)
        点击朱紫国飞行点()
        time.sleep(0.3 + 随机小数0)
        打开或关闭地图()
        鼠标移动到指定距离(162 + 随机整数3, 507 + 随机整数3, 1)
        time.sleep(0.3 + 随机小数0)
        打开或关闭地图()
        打开或关闭背包()
        读取并定制挖宝路线('Y', '从小到大')
        打开或关闭背包()
    elif "境外" in 挖宝地点:
        if not "国境" in 场景文本 and not "境外" in 场景文本:
            已到国境 = 长安驿站路口前往命令()
            if 已到国境:
                time.sleep(0.3)
                打开或关闭地图()
                鼠标移动到指定距离(187, 477, 1)
                打开或关闭地图()
            打开或关闭背包()
            读取并定制挖宝路线('X', '从大到小')
            打开或关闭背包()

    elif "五庄" in 挖宝地点 or "庄观" in 挖宝地点:
        print("正在前往五庄观")
        已到国境 = 长安驿站路口前往命令()
        if 已到国境:
            time.sleep(0.3)
            打开或关闭地图()
            鼠标移动到指定距离(187, 473, 1)
            打开或关闭地图()
        打开或关闭背包()
        读取并定制挖宝路线('X', '从小到大')
        打开或关闭背包()
    elif "朱" in 挖宝地点 or "紫" in 挖宝地点:
        print("正在前往朱紫国")
        打开或关闭背包()
        挖图坐标 = 读取并定制挖宝路线('X', '从大到小')
        打开或关闭背包()
    elif "花果" in 挖宝地点:
        print("正在前往花果山")
        打开或关闭背包()
        挖图坐标 = 读取并定制挖宝路线('X', '从小到大')
        打开或关闭背包()
    elif "女儿" in 挖宝地点:
        print("正在前往女儿村")
        打开或关闭背包()
        挖图坐标 = 读取并定制挖宝路线('Y', '从小到大')
        打开或关闭背包()
    elif "狮驼" in 挖宝地点 or "驼岭" in 挖宝地点:
        print("正在前往 狮驼岭")
        使用快捷键打开飞行符()
        点击朱紫国飞行点()
        time.sleep(0.3 + 随机小数0)
        打开或关闭地图()
        鼠标移动到指定距离(160 + 随机整数3 + 50, 507 + 随机整数3, 4)
        pyautogui.click()
        pyautogui.move(-50, 0, 0.3)
        pyautogui.click()
        time.sleep(0.3 + 随机小数0)
        打开或关闭地图()
        打开或关闭背包()
        读取并定制挖宝路线('Y', '从大到小')
        打开或关闭背包()
    else:
        print("没有识别出任何地点..")


def 读取并定制挖宝路线(坐标类型, 排序方式):
    global 挖宝地点
    global 挖宝地点1
    global 中心点列表1
    排列前的模板坐标 = []
    排列前的任务坐标 = []
    鼠标移开()
    中心点列表 = 背包宝图模板匹配()
    for 中心点 in 中心点列表:
        鼠标移动到指定距离(中心点[0], 中心点[1], 3, 0, 17)
        time.sleep(0.4)
        模板中心点的坐标 = (中心点[0]), (中心点[1])
        背包宝图文本识别()
        if 挖宝地点 and 任务点Y坐标:
            排列前的模板坐标.append(模板中心点的坐标)
            排列前的任务坐标.append((任务点X坐标, 任务点Y坐标))  # 将任务点坐标添加到列表中
        else:
            鼠标移动到指定距离(中心点[0], 中心点[1], 1)
            鼠标移动到指定距离(518, 232, 1)
            pyautogui.move(-80, 0)
            pyautogui.click()
    任务坐标 = 排列前的任务坐标
    模板坐标 = 排列前的模板坐标
    print("任务坐标,模板坐标：", 任务坐标, 模板坐标)
    if 任务坐标 and 模板坐标:
        if 坐标类型 == "X":
            坐标 = 0
        elif 坐标类型 == "Y":
            坐标 = 1
        if 排序方式 == "从大到小":
            for i in range(0, len(任务坐标)):
                最大索引 = max(range(i, len(任务坐标)), key=lambda j: 任务坐标[j][坐标])
                if i != 最大索引:
                    任务坐标[i], 任务坐标[最大索引] = 任务坐标[最大索引], 任务坐标[i]
                    print(f"第{i}次替换后：", 任务坐标)
                    print(f"替换的索引为：{i} 和 {最大索引}")
                    print(f"对应的模板坐标为：{模板坐标[i]} 和 {模板坐标[最大索引]}")
                    鼠标移动到指定距离(模板坐标[最大索引][0], 模板坐标[最大索引][1], 1, 0, 15)
                    鼠标移动到指定距离(模板坐标[i][0], 模板坐标[i][1], 1, 0, 15)
        elif 排序方式 == "从小到大":
            for i in range(0, len(任务坐标)):
                最小索引 = min(range(i, len(任务坐标)), key=lambda j: 任务坐标[j][坐标])
                if i != 最小索引:
                    任务坐标[i], 任务坐标[最小索引] = 任务坐标[最小索引], 任务坐标[i]
                    print(f"第{i}次替换后：", 任务坐标)
                    print(f"替换的索引为：{i} 和 {最小索引}")
                    print(f"对应的模板坐标为：{模板坐标[i]} 和 {模板坐标[最小索引]}")
                    鼠标移动到指定距离(模板坐标[最小索引][0], 模板坐标[最小索引][1], 1, 0, 15)
                    鼠标移动到指定距离(模板坐标[i][0], 模板坐标[i][1], 1, 0, 15)
        elif 排序方式 == "无":
            pass
        挖宝地点1 = 挖宝地点
        单次挖图坐标.extend(任务坐标)
        print("单次挖图坐标：", 单次挖图坐标)
        挖图坐标 = 单次挖图坐标
        中心点列表1 = 模板坐标
        return 挖图坐标


def 背包宝图模板匹配():
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 380, 顶点坐标Y + 240, 顶点坐标X + 685, 顶点坐标Y + 460))
    窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    模板 = cv2.imread("muban/BT.png")
    结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
    阈值 = 0.9
    位置 = np.where(结果 >= 阈值)
    中心点列表 = []
    for pt in zip(*位置[::-1]):
        中心 = (pt[0] + 模板.shape[1] // 2 + 380, pt[1] + 模板.shape[0] // 2 + 240)
        中心点列表.append(中心)
    print('背包宝图模板坐标：', 中心点列表)
    return 中心点列表


def 取图窗口文本识别(X,Y,范围X,范围Y):
    取图窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + X, 顶点坐标Y + Y, 顶点坐标X + X+范围X, 顶点坐标Y +Y +范围X))
    取图窗口截屏 = cv2.cvtColor(np.array(取图窗口截屏), cv2.COLOR_RGB2BGR)
    res = ocr.ocr(取图窗口截屏)  # 调用cnocr进行识别
    任务文本 = [line['text'] for line in res]  # 提取文本部分
    任务文本 = ' '.join(任务文本)
    任务文本 = 任务文本.replace('\n', ' ')
    替换场景文本的内容 = {
        ' ': '',
    }
    for old, new in 替换场景文本的内容.items():
        任务文本 = 任务文本.replace(old, new)
    print("任务文本:", 任务文本)
    return 任务文本


def 宝图价格识别并点击():
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 100, 顶点坐标Y + 170, 顶点坐标X + 700, 顶点坐标Y + 470))
    result = ocr.ocr(窗口截屏)  # 调用cnocr进行识别
    print('result：', result)
    count = 0
    for item in result:
        text = item['text']
        if text.isdigit() and int(text) < 26000:
            count += 1
    # 输出数字小于3000的个数
    print('数字小于30000的个数：', count)
    if count > 2:
        for _ in range(count - 2):
            鼠标移动到指定距离(446, 200, 1)
            鼠标移动到指定距离(287, 548, 1, 0, 16)
            背包满了模板匹配()
            摊位开 = 单个模板匹配(240, 100, 376, 190, 'tanweikai.png', 0.91)
            if 背包满了:
                return 背包满了
                break
            elif not 摊位开:
                break
    else:
        鼠标移动到指定距离(680, 180, 3)


def 背包满了模板匹配():
    global 背包满了
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X, 顶点坐标Y, 顶点坐标X + 333, 顶点坐标Y + 222))
    窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    模板 = cv2.imread("muban/beibaoman.png")
    结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
    阈值 = 0.7
    坐标 = np.where(结果 >= 阈值)
    if len(坐标[0]) > 0:
        print("背包满了前往仓库")
        背包满了 = True


def 仓库背包宝图模板匹配():
    仓库截屏 = ImageGrab.grab(bbox=(顶点坐标X + 423, 顶点坐标Y + 267, 顶点坐标X + 690, 顶点坐标Y + 485))
    仓库截屏图片 = cv2.cvtColor(np.array(仓库截屏), cv2.COLOR_RGB2BGR)
    模板 = cv2.imread("muban/BT.png")
    结果 = cv2.matchTemplate(仓库截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
    阈值 = 0.9
    位置 = np.where(结果 >= 阈值)
    中心点列表 = []
    for pt in zip(*位置[::-1]):
        中心 = (pt[0] + 模板.shape[1] // 2, pt[1] + 模板.shape[0] // 2)
        中心点列表.append(中心)
    print('中心点列表:', 中心点列表)
    return 中心点列表


def 仓库宝图模板匹配():
    仓库截屏 = ImageGrab.grab(bbox=(顶点坐标X, 顶点坐标Y, 顶点坐标X + 400, 顶点坐标Y + 500))
    仓库截屏图片 = cv2.cvtColor(np.array(仓库截屏), cv2.COLOR_RGB2BGR)
    模板 = cv2.imread("muban/BT.png")
    结果 = cv2.matchTemplate(仓库截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
    阈值 = 0.95
    位置 = np.where(结果 >= 阈值)
    中心点列表 = []
    for pt in zip(*位置[::-1]):
        中心 = (pt[0] + 模板.shape[1] // 2, pt[1] + 模板.shape[0] // 2)
        中心点列表.append(中心)
    print('中心点列表:', 中心点列表)
    return 中心点列表


def 开图():
    打开或关闭背包()
    for k in range(3):  # 4行
        随机数载入()
        for j in range(5):  # 5列
            x = 417 - 50 / 2 + j * 50 + 50 // 2  # 计算格子中心横坐标
            y = 270 - 50 / 2 + k * 50 + 50 // 2  # 计算格子中心纵坐标
            鼠标移动到指定距离(x, y, 3, 偏移距离=25)
    打开或关闭背包()


def 格子检测函数(格子顶点坐标X, 格子顶点坐标Y, 检测类别, 最后几个格子不检测, 层数=0):
    坐标列表 = []
    数量 = 0
    窗口截图 = ImageGrab.grab(bbox=(
    顶点坐标X + 格子顶点坐标X, 顶点坐标Y + 格子顶点坐标Y, 顶点坐标X + 格子顶点坐标X + 260,
    顶点坐标Y + 格子顶点坐标Y + 210))
    # 窗口截图.save("win4.png")
    # 窗口截图  = Image.open('win4.png')
    宽度, 高度 = 窗口截图.size
    颜色范围列表 = [((185, 177, 218), 3), ((172, 165, 211), 20)]
    for i in range(4 - 层数):
        for j in range(5):
            if i == 3 and j > (4 - 最后几个格子不检测):
                break
            x = 10 + j * 50
            y = 10 + i * 50
            子区域 = 窗口截图.crop((x, y, x + 30, y + 30))
            中心点_x = x + 30 // 2
            中心点_y = y + 30 // 2
            for 颜色, 阈值 in 颜色范围列表:
                像素计数 = 0
                for y_sub in range(30):
                    for x_sub in range(30):
                        r, g, b = 子区域.getpixel((x_sub, y_sub))
                        if (abs(r - 颜色[0]) <= 阈值) and (abs(g - 颜色[1]) <= 阈值) and (abs(b - 颜色[2]) <= 阈值):
                            像素计数 += 1
            比例 = 像素计数 / (30 * 30)
            if 检测类别 == '空':
                if 比例 > 0.95:
                    坐标列表.append((中心点_x + 格子顶点坐标X, 中心点_y + 格子顶点坐标Y))
                    数量 += 1
            elif 检测类别 == '有':
                if 比例 < 0.95:
                    坐标列表.append((中心点_x + 格子顶点坐标X, 中心点_y + 格子顶点坐标Y))
                    数量 += 1
    print('数量,坐标列表:', 数量, len(坐标列表))
    return 数量, 坐标列表


def 判断今天是否节日并领取():
    global 任务点X坐标
    global 任务点Y坐标
    global 目标没移动
    今天是节日 = False
    公历节日列表 = [(1, 1), (2, 14), (3, 8), (3, 12), (4, 1), (4, 5), (5, 1),(5, 4), (6, 1), (7, 1), (7, 7), (8, 1), (9, 10),
                    (9, 18), (10, 1), (10, 31),
                    (11, 11), (12, 24), (12, 25)]
    农历节日列表 = [(1, 1), (1, 15), (2, 2), (5, 5), (6, 24), (7, 7), (7, 15), (8, 15), (9, 9), (12, 8), (12, 23),
                    (12, 30)]
    今天日期 = datetime.date.today()
    农历日期 = Converter.Solar2Lunar(今天日期)
    if (今天日期.month, 今天日期.day) in 公历节日列表 or (农历日期.month, 农历日期.day) in 农历节日列表:
        print("今天是节日！")
        今天是节日 = True
    print("农历日期", 农历日期.month, "月", "初", 农历日期.day)
    print("阳历日期", 今天日期)
    if 今天是节日:
        随机数载入()
        场景窗口文本识别()
        if not '长安' in 场景文本:
            打开或关闭背包()
            打开长安飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(320, 320, 1, 红点=True)
            打开或关闭背包()
            time.sleep(1)
            打开或关闭地图()
            鼠标移动到指定距离(342, 378, 1)
            打开或关闭地图()
        节日领取 = False
        while not 节日领取 and 终止按键:
            time.sleep(0.5)
            场景窗口文本识别()
            if 210 < 场景点X坐标 < 220 and '长安' in 场景文本 and 目标没移动:
                time.sleep(2)
                隐藏人物()
                pyautogui.hotkey('alt', 'h')
                节日领取 = 单个模板匹配(0, 0, 700, 500, 'jieri.png', 返回坐标=True)
                if 节日领取:
                    鼠标移动到指定距离(节日领取[0], 节日领取[1], 1)
                    time.sleep(0.5)
                    节日领取2 = 单个模板匹配(0, 430, 700, 500, 'jier2i.png', 返回坐标=True)
                    if 节日领取2:
                        鼠标移动到指定距离(节日领取2[0], 节日领取2[1]+430, 1)
                    time.sleep(0.5)
                    鼠标移动到指定距离(626, 540, 1)
                    time.sleep(0.7)
                    pyautogui.click()
                    time.sleep(1)
                    pyautogui.move(0, -100)
                    pyautogui.rightClick()
                    鼠标移动到指定距离(732, 183, 1)
                    pyautogui.press('f2')
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(342, 378, 1)
                    打开或关闭地图()


def 清空背包或行囊(背包最后几个不清空, 清空到第几个仓库, 行囊不清空=False):
    鼠标移动到指定距离(135, 501, 1, 0.1)
    翻页(1, 清空到第几个仓库 - 1)
    for i in range(10):
        time.sleep(0.5)
        仓库空位数量, _ = 格子检测函数(127, 280, '空', 0)
        背包物品数量, 背包物品坐标 = 格子检测函数(435, 280, '有', 背包最后几个不清空)
        for 坐标 in 背包物品坐标:
            if 仓库空位数量 <= 0:
                翻页(1, 1)
                time.sleep(0.5)
                break
            鼠标移动到指定距离(坐标[0], 坐标[1], 3)
            仓库空位数量 -= 1
            if 仓库空位数量 <= 0:
                翻页(1, 1)
                time.sleep(0.5)
                break
        背包物品数量, 背包物品坐标 = 格子检测函数(435, 280, '有', 背包最后几个不清空)
        if 背包物品数量 <= 背包最后几个不清空:
            break
    if not 行囊不清空:
        鼠标移动到指定距离(516, 499, 1)
        for i in range(10):
            time.sleep(0.5)
            仓库空位数量, _ = 格子检测函数(127, 280, '空', 0)
            行囊物品数量, 行囊物品坐标 = 格子检测函数(435, 280, '有', 0)
            for 坐标 in 行囊物品坐标:
                if 仓库空位数量 <= 0:
                    翻页(1, 1)
                    break
                鼠标移动到指定距离(坐标[0], 坐标[1], 3)
                仓库空位数量 -= 1
                if 仓库空位数量 == 0:
                    翻页(1, 1)
                    break
            行囊物品数量, 行囊物品坐标 = 格子检测函数(435, 280, '有', 0)
            if 行囊物品数量 <= 0:
                break


def 仓库物品取出(取出类型, 检查仓库个数):
    鼠标移动到指定距离(455, 500, 1)  # 点击背包
    if 取出类型 == '40级以下环':
        关键词 = ['备条', '条件', '等级10', '等级20', '等级30', '等级40']
        搜索类型 = '依次'
    elif 取出类型 == '50级环':
        关键词 = ['备条', '条件', '等级50', '等级50', '等级50', '等级50']
        搜索类型 = '依次'
    elif 取出类型 == '670级环':
        关键词 = ['备条', '条件', '等级60', '等级60', '等级70', '等级70']
        搜索类型 = '依次'
    elif 取出类型 == '书铁':
        关键词 = []
        搜索类型 = '模板'
    elif 取出类型 == '66':
        关键词 = []
        搜索类型 = '模板'
    elif 取出类型 == '魔决':
        关键词 = []
        搜索类型 = '模板'
    鼠标移动到指定距离(135, 501, 1, 0.1)
    背包空位数量, _ = 格子检测函数(435, 280, '空', 1)
    背包与行囊已满 = False
    for i in range(检查仓库个数):
        if 搜索类型 == '依次':
            仓库物品数量, 仓库坐标列表 = 格子检测函数(127, 280, '有', 0)
            for 坐标 in 仓库坐标列表:
                鼠标移动到指定距离(坐标[0], 坐标[1], 4)
                time.sleep(0.2)
                任务文本 = 取图窗口文本识别(100,126,430,340)
                if (关键词[0] in 任务文本 or 关键词[1] in 任务文本) and (
                        关键词[2] in 任务文本 or 关键词[3] in 任务文本 or 关键词[4] in 任务文本 or 关键词[
                    5] in 任务文本):
                    pyautogui.rightClick()
                    背包空位数量 -= 1
                    if 背包空位数量 == 0:
                        鼠标移动到指定距离(520, 500, 1)  # 点击行囊
                        time.sleep(0.8)
                        背包空位数量, _ = 格子检测函数(435, 280, '空', 0)
                        if 背包空位数量 == 0:
                            背包与行囊已满 = True
                            break
        elif 搜索类型 == '模板':
            if 取出类型 == '书铁':
                模板1 = 单个模板匹配(120, 270, 400, 480, 'shu.png', 0.95, 返回坐标=True, 坐标列表=True)
                模板2 = 单个模板匹配(120, 270, 400, 480, 'tie.png', 0.95, 返回坐标=True, 坐标列表=True)
            elif 取出类型 == '66':
                模板1 = 单个模板匹配(120, 270, 400, 480, '66.png', 0.95, 返回坐标=True, 坐标列表=True)
                模板2 = []
            elif 取出类型 == '魔决':
                模板1 = 单个模板匹配(120, 270, 400, 480, 'mojue.png', 0.95, 返回坐标=True, 坐标列表=True)
                模板2 = []
            模板坐标 = 模板2 + 模板1
            for 坐标 in 模板坐标:
                鼠标移动到指定距离(坐标[0] + 120, 坐标[1] + 270, 3)
                背包空位数量 -= 1
                if 背包空位数量 == 0:
                    鼠标移动到指定距离(520, 500, 1)  # 点击行囊
                    time.sleep(1)
                    背包空位数量, _ = 格子检测函数(435, 280, '空', 0)
                    if 背包空位数量 == 0:
                        背包与行囊已满 = True
                        break
        if 背包与行囊已满:
            return True
            break
        翻页(1, 1)
    return True


def 垃圾书铁摧毁():
    打开或关闭背包()
    time.sleep(0.4)
    书 = 单个模板匹配(380, 240, 685, 460, 'shu.png', 0.95, 返回坐标=True, 坐标列表=True)
    铁 = 单个模板匹配(380, 240, 685, 460, 'tie.png', 0.95, 返回坐标=True, 坐标列表=True)
    if 书 or 铁:
        铁书坐标 = 书 + 铁
        for 坐标 in 铁书坐标:
            鼠标移动到指定距离(坐标[0] + 380, 坐标[1] + 240, 4)
            任务文本 = 取图窗口文本识别(100,126,430,340)
            if '等级10' in 任务文本 or '等级20' in 任务文本 or '等级30' in 任务文本:
                pyautogui.click()
                time.sleep(0.2)
                鼠标移动到指定距离(557, 133, 1)
                鼠标移动到指定距离(358, 400, 1)
    打开或关闭背包()


def 卖低级环():
    global 任务点X坐标
    global 任务点Y坐标
    while 终止按键:
        场景窗口文本识别()
        if not '长安' in 场景文本 and not '长风' in 场景文本:
            打开或关闭背包()
            打开长安飞行旗()
            鼠标移动到指定距离(590, 330, 1, 红点=True)
            打开或关闭背包()
            打开或关闭地图()
            鼠标移动到指定距离(577, 300, 1)
            打开或关闭地图()
        elif '长安' in 场景文本:
            if 205 > 场景点Y坐标 > 198 and 453 > 场景点X坐标 > 445 and 目标没移动:
                鼠标移动到指定距离(406 - (场景点X坐标 - 457) * 20, 310 + (场景点Y坐标 - 202) * 20, 1)
                鼠标移动到指定距离(183, 393, 1)
                time.sleep(0.7)
                _, 背包物品坐标 = 格子检测函数(280, 215, '有', 1)
                for 坐标 in 背包物品坐标:
                    鼠标移动到指定距离(坐标[0], 坐标[1], 1)
                    鼠标移动到指定距离(400, 500, 1)
                    鼠标移动到指定距离(183, 393, 1)
                    time.sleep(0.4)
                    pyautogui.click()
                鼠标移动到指定距离(300, 480, 3)
                行囊回来(回来所有=True)
                鼠标移动到指定距离(406 - (场景点X坐标 - 457) * 20, 310 + (场景点Y坐标 - 202) * 20, 1)
                鼠标移动到指定距离(183, 393, 1)
                time.sleep(0.7)
                _, 背包物品坐标 = 格子检测函数(280, 215, '有', 0)
                for 坐标 in 背包物品坐标:
                    鼠标移动到指定距离(坐标[0], 坐标[1], 1)
                    鼠标移动到指定距离(400, 500, 1)
                    鼠标移动到指定距离(183, 393, 1)
                    time.sleep(0.4)
                    pyautogui.click()
                鼠标移动到指定距离(300, 480, 3)
                break
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(577, 300, 1)
                    打开或关闭地图()


def 隐藏人物():
    pyautogui.press('f9')


def 场景坐标计算点击():
    # 右下角范围
    随机数载入()
    if 右边范围 < 场景点X坐标 and 场景点Y坐标 < 上下边缘距离:
        if abs(坐标差X) == 0 and abs(坐标差Y) == 0:
            点击人物中心((-坐标差X + 场景点X坐标 - 右边范围 - 随机小数正负3) * 像素与坐标的比例,
                         (上下边缘距离 - 场景点Y坐标 + 坐标差Y + 5) * 像素与坐标的比例)
            return (-坐标差X + 场景点X坐标 - 右边范围) * 像素与坐标的比例, (
                    上下边缘距离 - 场景点Y坐标 + 坐标差Y) * 像素与坐标的比例
        else:
            点击人物中心((-坐标差X + 场景点X坐标 - 右边范围) * 像素与坐标的比例,
                         (上下边缘距离 - 场景点Y坐标 + 坐标差Y) * 像素与坐标的比例)
            return (-坐标差X + 场景点X坐标 - 右边范围) * 像素与坐标的比例, (
                        上下边缘距离 - 场景点Y坐标 + 坐标差Y) * 像素与坐标的比例
        print('右下角范围')
    # 右上角范围
    elif 右边范围 < 场景点X坐标 and 上边范围 < 场景点Y坐标:
        if abs(坐标差X) == 0 and abs(坐标差Y) == 0:
            点击人物中心((-坐标差X + 场景点X坐标 - 右边范围 - 随机小数正负3) * 像素与坐标的比例,
                         (坐标差Y - (场景点Y坐标 - 上边范围) + 5) * 像素与坐标的比例)
            return (-坐标差X + 场景点X坐标 - 右边范围) * 像素与坐标的比例, (
                    坐标差Y - (场景点Y坐标 - 上边范围)) * 像素与坐标的比例
        else:
            点击人物中心((-坐标差X + 场景点X坐标 - 右边范围) * 像素与坐标的比例,
                         (坐标差Y - (场景点Y坐标 - 上边范围)) * 像素与坐标的比例)
            return (-坐标差X + 场景点X坐标 - 右边范围) * 像素与坐标的比例, (
                        坐标差Y - (场景点Y坐标 - 上边范围)) * 像素与坐标的比例
        print('右上角范围')
    # 左上角范围
    elif 场景点X坐标 < 左右边缘距离 and 上边范围 < 场景点Y坐标:
        if abs(坐标差X) == 0 and abs(坐标差Y) == 0:
            点击人物中心((-坐标差X - (左右边缘距离 - 场景点X坐标 - 随机小数正负3)) * 像素与坐标的比例,
                         (坐标差Y - (场景点Y坐标 - 上边范围) + 5) * 像素与坐标的比例)
            return (-坐标差X - (左右边缘距离 - 场景点X坐标)) * 像素与坐标的比例, (
                    坐标差Y - (场景点Y坐标 - 上边范围)) * 像素与坐标的比例
        else:
            点击人物中心((-坐标差X - (左右边缘距离 - 场景点X坐标)) * 像素与坐标的比例,
                         (坐标差Y - (场景点Y坐标 - 上边范围)) * 像素与坐标的比例)
            return (-坐标差X - (左右边缘距离 - 场景点X坐标)) * 像素与坐标的比例, (
                        坐标差Y - (场景点Y坐标 - 上边范围)) * 像素与坐标的比例
        print('左上角范围')
    # 左下的范围
    elif 场景点X坐标 < 左右边缘距离 and 场景点Y坐标 < 上下边缘距离:
        if abs(坐标差X) == 0 and abs(坐标差Y) == 0:
            点击人物中心((-坐标差X - (左右边缘距离 - 场景点X坐标 - 随机小数正负3)) * 像素与坐标的比例,
                         (坐标差Y + 上下边缘距离 - 场景点Y坐标 + 5) * 像素与坐标的比例)
            return (-坐标差X - (左右边缘距离 - 场景点X坐标)) * 像素与坐标的比例, (
                    坐标差Y + 上下边缘距离 - 场景点Y坐标) * 像素与坐标的比例
        else:
            点击人物中心((-坐标差X - (左右边缘距离 - 场景点X坐标)) * 像素与坐标的比例,
                         (坐标差Y + 上下边缘距离 - 场景点Y坐标) * 像素与坐标的比例)
            return (-坐标差X - (左右边缘距离 - 场景点X坐标)) * 像素与坐标的比例, (
                        坐标差Y + 上下边缘距离 - 场景点Y坐标) * 像素与坐标的比例
        print('左下的范围')
    # 左边的范围
    elif 场景点X坐标 < 左右边缘距离:
        if abs(坐标差X) == 0 and abs(坐标差Y) == 0:
            点击人物中心((-坐标差X - (左右边缘距离 - 场景点X坐标) - 随机小数正负3) * 像素与坐标的比例,
                         (坐标差Y + 5) * 像素与坐标的比例)
            return (-坐标差X - (左右边缘距离 - 场景点X坐标)) * 像素与坐标的比例, 坐标差Y * 像素与坐标的比例
        else:
            点击人物中心((-坐标差X - (左右边缘距离 - 场景点X坐标)) * 像素与坐标的比例, 坐标差Y * 像素与坐标的比例)
            return (-坐标差X - (左右边缘距离 - 场景点X坐标)) * 像素与坐标的比例, 坐标差Y * 像素与坐标的比例
        print('左边的范围')
    # 下边范围
    elif 左右边缘距离 < 场景点X坐标 < 右边范围 and 场景点Y坐标 < 上下边缘距离:
        if abs(坐标差X) == 0 and abs(坐标差Y) == 0:
            点击人物中心((-坐标差X - 3) * 像素与坐标的比例,
                         (上下边缘距离 - 场景点Y坐标 + 坐标差Y + 5) * 像素与坐标的比例)
            return -坐标差X * 像素与坐标的比例, (上下边缘距离 - 场景点Y坐标 + 坐标差Y) * 像素与坐标的比例
        else:
            点击人物中心(-坐标差X * 像素与坐标的比例, (上下边缘距离 - 场景点Y坐标 + 坐标差Y) * 像素与坐标的比例)
            return -坐标差X * 像素与坐标的比例, (上下边缘距离 - 场景点Y坐标 + 坐标差Y) * 像素与坐标的比例
        print('下边范围')
    # 上边范围
    elif 左右边缘距离 < 场景点X坐标 < 右边范围 and 上边范围 < 场景点Y坐标:
        if abs(坐标差X) == 0 and abs(坐标差Y) == 0:
            点击人物中心((-坐标差X - 随机小数正负3) * 像素与坐标的比例,
                         (坐标差Y - (场景点Y坐标 - 上边范围) + 5) * 像素与坐标的比例)
            return -坐标差X * 像素与坐标的比例, (坐标差Y - (场景点Y坐标 - 上边范围)) * 像素与坐标的比例
        else:
            点击人物中心(-坐标差X * 像素与坐标的比例, (坐标差Y - (场景点Y坐标 - 上边范围)) * 像素与坐标的比例)
            return -坐标差X * 像素与坐标的比例, (坐标差Y - (场景点Y坐标 - 上边范围)) * 像素与坐标的比例
        print('上边范围')
    # 右边范围
    elif 右边范围 < 场景点X坐标 and 上下边缘距离 < 场景点Y坐标 < 上边范围:
        if abs(坐标差X) == 0 and abs(坐标差Y) == 0:
            点击人物中心((-坐标差X + 场景点X坐标 - 右边范围 - 随机小数正负3) * 像素与坐标的比例,
                         (坐标差Y + 5) * 像素与坐标的比例)
            return (-坐标差X + 场景点X坐标 - 右边范围) * 像素与坐标的比例, 坐标差Y * 像素与坐标的比例
        else:
            点击人物中心((-坐标差X + 场景点X坐标 - 右边范围) * 像素与坐标的比例, 坐标差Y * 像素与坐标的比例)
            return (-坐标差X + 场景点X坐标 - 右边范围) * 像素与坐标的比例, 坐标差Y * 像素与坐标的比例
        print('右边范围')
    else:
        print('中间范围')
        if abs(坐标差X) == 0 and abs(坐标差Y) == 0:
            print('重叠')
            点击人物中心((-坐标差X - 随机小数正负3) * 像素与坐标的比例, (坐标差Y + 4) * 像素与坐标的比例)
            return -坐标差X * 像素与坐标的比例, 坐标差Y * 像素与坐标的比例
        else:
            print('没重叠')
            点击人物中心(-坐标差X * 像素与坐标的比例, 坐标差Y * 像素与坐标的比例)
            return -坐标差X * 像素与坐标的比例, 坐标差Y * 像素与坐标的比例


def 点击大唐境外路口():
    global 境外X, 境外Y
    if 境外X == None and 境外Y == None or 随机整数100 > 70:
        境外X, 境外Y = 鼠标移动到指定距离(200, 482, 1, 红点=True)
    else:
        鼠标移动到指定距离(境外X, 境外Y, 1)


def 场景挂机(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index):
    global 目标点X坐标,目标点Y坐标
    战斗中 = False
    while not 战斗中 and 终止按键:
        场景窗口文本识别()
        随机数载入()
        随机1 = random.randint(235, 500)  # 随机整数
        随机2 = random.randint(235, 500)  # 随机整数
        if 队长模式:
            if 目标没移动:
                战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
                if not 战斗中:
                    打开或关闭地图()
                    time.sleep(0.4)
                    if 通用模式:
                        鼠标移动到指定距离(随机1, 随机2, 1)
                    else:
                        鼠标移动到指定距离(坐标[0], 坐标[1], 1)
                    打开或关闭地图()
                    if 通用模式:
                        time.sleep(0.4)
                        break
                else:
                    四小人 = 单个模板匹配(222, 100, 500, 333, 'sixiaoren.png', 返回坐标=True)
                    print('四小人坐标', 四小人)
                    if 四小人:
                        print("四小人验证")
                        找到四小人 = 四小人模板匹配()
                    break
        if 战斗中:
            四小人 = 单个模板匹配(222, 100, 500, 333, 'sixiaoren.png', 返回坐标=True)
            print('四小人坐标', 四小人)
            if 四小人:
                print("四小人验证")
                找到四小人 = 四小人模板匹配()
            break
        elif abs(巡逻场景坐标[index][0] - 场景点X坐标) < 6 and abs(
                巡逻场景坐标[index][1] - 场景点Y坐标) < 6 or 战斗中 or not 终止按键:
            break
        time.sleep(0.4)
        框关闭函数()
    return 战斗中


def 通用场景(起始次数):
    global 通用模式
    通用模式=True
    巡逻鼠标坐标 = [(228, 482), (522, 478), (500,300), (256, 290)]
    巡逻场景坐标 = [(15, 35), (12, 13), (73, 135), (8, 116)]
    for index, 坐标 in enumerate(巡逻鼠标坐标[起始次数:]):
        战斗中 = 场景挂机(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    return index

def 大雁塔场景(起始次数):
    巡逻鼠标坐标 = [(166, 392), (246, 529), (388, 215), (230, 260), (400, 460), (444, 408), (360, 350), (511, 273),]
    巡逻场景坐标 = [(15, 35), (12, 13), (73, 135), (8, 116), (77, 38), (94, 60), (62, 81), (122, 115)]
    for index, 坐标 in enumerate(巡逻鼠标坐标[起始次数:]):
        战斗中 = 场景挂机(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    return index


def 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index, 顶部坐标=500):
    global 目标点X坐标,目标点Y坐标
    打开或关闭地图()
    time.sleep(0.2)
    鼠标移动到指定距离(坐标[0], 坐标[1], 1)
    打开或关闭地图()
    框关闭函数()
    战斗中 = False
    计数器=0
    while not 战斗中 and 终止按键:
        场景窗口文本识别()
        随机数载入()
        if 场景点Y坐标 < 顶部坐标:
            任务悬浮块 = 单个模板匹配(0, 0, 812, 663, 'renwukuai.png', 0.89, 返回坐标=True)
            if 目标没移动:
                战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
                if not 战斗中:
                    打开或关闭地图()
                    time.sleep(0.4)
                    鼠标移动到指定距离(坐标[0], 坐标[1], 1)
                    打开或关闭地图()
                else:
                    break
            if 任务悬浮块:
                print('找到了', 任务悬浮块)
                if 任务悬浮块[0] <= 450:
                    if 任务悬浮块[1] <= 350:
                        #pyautogui.click(顶点坐标X + 任务悬浮块[0] + 90, 顶点坐标Y + 任务悬浮块[1] + 150)
                        pyautogui.click(顶点坐标X + 任务悬浮块[0] + 90, 顶点坐标Y + 340)
                    elif 600 > 任务悬浮块[1] > 350:
                        pyautogui.click(顶点坐标X + 任务悬浮块[0] + 90, 顶点坐标Y + 任务悬浮块[1] - 55)
                    elif 600 <= 任务悬浮块[1] < 660:
                        pyautogui.click(顶点坐标X + 任务悬浮块[0] + 90, 顶点坐标Y + 任务悬浮块[1] - 100)
                elif 810 > 任务悬浮块[0] > 450:
                    if 任务悬浮块[1] <= 350:
                        #pyautogui.click(顶点坐标X + 任务悬浮块[0] - 90, 顶点坐标Y + 任务悬浮块[1] + 150)
                        pyautogui.click(顶点坐标X + 任务悬浮块[0] - 90, 顶点坐标Y + 340)
                    elif 600 > 任务悬浮块[1] > 350:
                        pyautogui.click(顶点坐标X + 任务悬浮块[0] - 90, 顶点坐标Y + 任务悬浮块[1] - 55)
                    elif 600 <= 任务悬浮块[1] < 660:
                        pyautogui.click(顶点坐标X + 任务悬浮块[0] - 90, 顶点坐标Y + 任务悬浮块[1] - 100)
                time.sleep(0.2)
                pyautogui.click()
                while 终止按键:
                    场景窗口文本识别()
                    time.sleep(0.3)
                    框关闭函数()
                    if 目标没移动:
                        time.sleep(1.4)
                        break
                任务悬浮块 = 单个模板匹配(0, 0, 812, 663, 'renwukuai.png', 0.88, 返回坐标=True)
                if 任务悬浮块:
                    鼠标移动到指定距离(任务悬浮块[0], 任务悬浮块[1] + 80, 4)
                    pyautogui.press('f9')
                    攻击()
                    计数器+=1
                    for i in range(9):
                        time.sleep(0.1)
                        战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
                        if 战斗中:
                            战斗攻击()
                            break
                    else:
                        目标点X坐标 = 任务悬浮块[0]-404
                        目标点Y坐标 = 任务悬浮块[1] + 80-341
                        找到=重叠判断('怪', '妖', 点击方式=4, 类型='攻击')
                        if 找到:
                            攻击()
                        else:
                            点击人物中心(随机整数50*1.5, abs(随机整数50)*1.5)
                            time.sleep(2)
                else:
                    点击人物中心(随机整数50, abs(随机整数50))
                    time.sleep(2)
            if 战斗中:
                break
            elif abs(巡逻场景坐标[index][0] - 场景点X坐标) < 6 and abs(
                    巡逻场景坐标[index][1] - 场景点Y坐标) < 6 or 战斗中 or not 终止按键:
                break
        else:
            print('这里的范围任务悬浮块有可能被遮挡，启动文本识别法')
            窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X, 顶点坐标Y, 顶点坐标X + 812, 顶点坐标Y + 180))
            窗口截屏 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
            result = ocr.ocr(窗口截屏)  # 调用cnocr进行识别
            for item in result:
                相同字数 = 0
                for 字 in 任务文本:
                    if 字 in item['text']:
                        相同字数 += 1
                    if 相同字数 > 2:
                        x1, y1 = item['position'][0]  # 获取文本框坐标
                        x2, y2 = item['position'][2]
                        center_x = (x1 + x2) / 2  # 计算中心点坐标
                        center_y = (y1 + y2) / 2
                        pyautogui.click(顶点坐标X + center_x, 顶点坐标Y + center_y + 50)
                        time.sleep(5)
                        窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X, 顶点坐标Y, 顶点坐标X + 812, 顶点坐标Y + 180))
                        窗口截屏 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
                        result = ocr.ocr(窗口截屏)  # 调用cnocr进行识别
                        for item in result:
                            相同字数 = 0
                            for 字 in 任务文本:
                                if 字 in item['text']:
                                    相同字数 += 1
                                if 相同字数 > 2:
                                    x1, y1 = item['position'][0]  # 获取文本框坐标
                                    x2, y2 = item['position'][2]
                                    center_x = (x1 + x2) / 2  # 计算中心点坐标
                                    center_y = (y1 + y2) / 2
                                    鼠标移动到指定距离(center_x, center_y - 50, 4)
                                    攻击()
                                    time.sleep(0.5)
                                    break
                            if 相同字数 > 2:
                                break
            战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
            if 战斗中:
                break
        time.sleep(0.3)
    return 战斗中
def 神木林当地任务寻找():
    巡逻鼠标坐标 = [(315, 522), (320, 462), (400, 371), (428, 300), (327, 240), (366, 280), (360, 430)]
    巡逻场景坐标 = [(17, 13),    (17, 44),    (57, 87), (73, 128), (21, 157), (44, 136), (42, 55)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')
        # 战斗中=False
        # while not 战斗中:
        #     场景窗口文本识别()
        #     神木林当地前往命令()
        #     if abs(坐标差X) < 11 and abs(坐标差Y) < 11 and 目标没移动 and not 任务已完成:
        #         攻击()
        #         for i in range(7):
        #             time.sleep(0.1)
        #             战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
        #             if 战斗中:
        #                 战斗攻击()
        #                 break
        #     else:
        #         time.sleep(0.3)
def 盘丝岭当地任务寻找():
    巡逻鼠标坐标 = [(230, 489), (206, 305), (236, 252), (315, 276), (388, 266), (508, 255), (527, 420), (275, 426), (266, 426), (520, 455)]
    巡逻场景坐标 = [(21, 9),   (13, 111)   ,(25, 146),      (70, 130), (108, 135), (172, 145),  (185, 55),  (50, 50),   (44, 28),  (183, 34)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 狮驼岭当地任务寻找():
    巡逻鼠标坐标 = [(458, 265), (366, 268), (228, 280), (223, 417), (280, 480), (511, 450)]
    巡逻场景坐标 = [(94, 91), (63, 88), (17, 83), (14, 38), (34, 14), (115, 25)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 天宫当地任务寻找():
    巡逻鼠标坐标 = [(503, 274), (237, 257), (190, 300), (387, 370),  (530, 470), (192, 453), (180, 400), (378, 417), (284, 454)]
    巡逻场景坐标 = [(209, 144), (48, 157), (21, 128),   (138, 85), (223, 29), (22, 36), (10, 70), (130, 57), (50, 33)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 地府当地任务寻找():
    巡逻鼠标坐标 = [(339, 506), (214, 497), (205, 380), (415, 320), (417, 270), (517, 270), (456, 380), (400, 390),
                    (377, 366), (258, 321)]
    巡逻场景坐标 = [(67, 5),     (13, 10),    (4, 61),    (102, 85), (101, 109), (150, 100), (119, 60), (90, 55), (76, 67),
                    (32, 85)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 龙宫当地任务寻找():
    巡逻鼠标坐标 = [(597, 489), (600, 400), (167, 383), (167, 341), (195, 265), (572, 283), (575, 344), (258, 346),(273, 408), (453, 363)]
    巡逻场景坐标 = [(200, 10),   (200, 50),   (20, 60), (20, 74),   (33, 106),   (192, 98), (193, 70),  (58, 73),   (67, 44),   (140, 66)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 化生寺当地任务寻找():
    巡逻鼠标坐标 = [(205, 423), (365, 500), (422, 450), (530, 270), (420, 381), (373, 316), (270, 372), (308, 317)]
    巡逻场景坐标 = [(5, 31), (66, 10), (82, 22), (120, 87), (80, 46), (66, 69), (30, 49), (41, 70)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 凌波城当地任务寻找():
    巡逻鼠标坐标 = [(290, 514), (360, 500), (464, 308), (408, 258), (309, 274), (440, 448)]
    巡逻场景坐标 = [(22, 11),    (53, 20),   (100, 110), (77, 133), (29, 126), (89, 45)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 花果山当地任务寻找():
    巡逻鼠标坐标 = [(306,298) ,(222, 400), (400, 250), (500, 272), (441, 441), (513, 509), (388, 463), (214, 500)]
    巡逻场景坐标 = [(45,92 ),  (14, 53),  (78, 109), (116, 100), (96, 38), (122, 14), (75, 28), (18, 14)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 魔王寨当地任务寻找():
    巡逻鼠标坐标 = [(232, 288), (344, 280), (438, 269), (534, 325), (515, 400), (515, 480), (333, 448), (323, 318),
                    (382, 446)]
    巡逻场景坐标 = [(14, 75),   (50, 78),     (81, 81),  (114,62), (108, 39), (108, 14),   (48, 21),     (43, 66),
                    (64, 21)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 女儿村当地任务寻找():
    巡逻鼠标坐标 = [(500, 468), (246, 529), (388, 215), (230, 260), (400, 460), (444, 408), (360, 350), (511, 273),
                    (400, 284)]
    巡逻场景坐标 = [(117, 35), (12, 13), (73, 135), (8, 116), (77, 38), (94, 60), (62, 81), (122, 115), (78, 109)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 方寸山当地任务寻找():
    巡逻鼠标坐标 = [(320, 444), (355, 493), (487, 493), (495, 390), (256, 320), (390, 282), (300, 330), (482, 295), (356, 361),(470, 355)]
    巡逻场景坐标 = [(64, 44),    (85, 13), (165, 15),   (171, 79),   (26, 120), (108, 143),   (53, 113),  (166, 133), (87, 93),  (151, 99)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 女魁当地任务寻找():
    巡逻鼠标坐标 = [(435, 483), (280, 250), (365, 293), (435, 257), (451, 394), (383, 328)]
    巡逻场景坐标 = [(78, 25), (10, 125), (46, 110),   (77, 124), (85, 63), (56, 93)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 普陀山当地任务寻找():
    巡逻鼠标坐标 = [(205, 445), (496, 306), (400, 300), (272, 350), (228, 275)]
    巡逻场景坐标 = [(5, 18), (80, 55), (57, 57), (23, 44), (11, 64)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 五庄观当地任务寻找():
    巡逻鼠标坐标 = [(223, 344), (300, 243), (522, 284), (523, 504), (295, 467)]
    巡逻场景坐标 = [(10, 46), (33, 70), (90, 62), (91, 4), (32, 13)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 大唐当地任务寻找():
    巡逻鼠标坐标 = [(536, 333), (444, 307), (383, 277), (200, 300), (200, 400), (360, 328), (284, 465), (380, 390), (520, 490),
                    (407, 507)]
    巡逻场景坐标 = [(144, 69), (112, 77),  (86, 91), (20, 80), (20, 44), (80, 70), (50, 20), (88, 44), (135, 10), (95, 5)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 天机城当地任务寻找():
    巡逻鼠标坐标 = [(222, 276), (336, 233), (348, 300), (480, 500) , (470, 446)  , (500, 300), (424, 268), (515, 375)]
    巡逻场景坐标 = [(17, 128),   (70, 147), (76, 113), (135, 21)    , (130, 40)  , (136, 113), (107, 128), (158, 80)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        if 坐标[0]==424:
            鼠标移动到指定距离(490, 156, 1)
            time.sleep(2)
            鼠标移动到指定距离(340, 111, 1)
            time.sleep(2)
            pyautogui.click()
        elif 坐标[0]==515:
            鼠标移动到指定距离(670, 335, 1)
            time.sleep(2)
            鼠标移动到指定距离(686, 580, 1)
            time.sleep(3)
            pyautogui.click()
            time.sleep(3)
            pyautogui.click()
            time.sleep(3)
            鼠标移动到指定距离(475, 546, 1)
            time.sleep(2)
            鼠标移动到指定距离(100, 510, 1)
            time.sleep(2)
            pyautogui.click()
            time.sleep(2)
            pyautogui.click()
            time.sleep(2)
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 无底洞当地任务寻找():
    巡逻鼠标坐标 = [(338, 350), (420, 520), (300, 455), (419, 462), (278, 311), (304, 223), (423, 226), (358, 317)]
    巡逻场景坐标 = [(36, 97), (80, 10), (20, 45), (77, 45), (7, 120), (20, 160), (80, 164), (35, 124)]
    for index, 坐标 in enumerate(巡逻鼠标坐标):
        战斗中 = 示威当地模板查找(坐标, 巡逻鼠标坐标, 巡逻场景坐标, index)
        if not 终止按键 or 战斗中:
            break
    else:
        keyboard.wait('enter')

def 点击仓库确认():
    鼠标移动到指定距离(210, 433, 1)


def 点击西梁女国飞行点():
    鼠标移动到指定距离(303, 303, 1)


def 点击仓库管理员():
    鼠标移动到指定距离(306, 250, 1)


def 点击大唐国境路口():
    global 国境X, 国境Y
    if 国境X == None and 国境Y == None or 随机整数100 > 70:
        国境X, 国境Y = 鼠标移动到指定距离(144, 492, 1, 红点=True)
    else:
        鼠标移动到指定距离(国境X, 国境Y, 1)


def 打开或关闭地图():
    pyautogui.press('tab')


def 点击普陀山路口():
    鼠标移动到指定距离(415, 490, 1)


def 给与():
    pyautogui.hotkey('alt', 'g')
    随机小数小
    pyautogui.click()


def 攻击():
    pyautogui.hotkey('alt', 'a')
    pyautogui.click()
    随机小数小
    pyautogui.rightClick()


def 点击人物中心(随机偏移X, 随机偏移Y, 点击方式=1):
    鼠标移动到指定距离(404 + 随机偏移X, 314 + 随机偏移Y, 点击方式)


def 点击常规确认():
    鼠标移动到指定距离(207, 394, 1)


def 点击常规确认2():
    pyautogui.moveTo(810 + 顶点坐标X + 随机整数10, 180 + 顶点坐标Y + 随机整数10, duration=随机小数0)
    pyautogui.click()


def 打开或关闭背包():
    pyautogui.hotkey('alt', 'e')


def 打开长安飞行旗():
    for i in range(5):
        背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
        if 背包开:
            鼠标移动到指定距离(620, 420, 3,0.1)
            break
    else:
        打开或关闭背包()
        鼠标移动到指定距离(620, 420, 3)
    # time.sleep(0.3)
def 打开化生寺飞行旗():
    for i in range(5):
        背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
        if 背包开:
            鼠标移动到指定距离(517, 375, 3,0.1)
            break
    else:
        打开或关闭背包()
        鼠标移动到指定距离(517, 375, 3)
def 使用快捷键打开飞行符():
    pyautogui.press('f1')
    time.sleep(0.3)
    打开飞行符 = 单个模板匹配(360, 200, 477, 300, 'feixingfu.png')
    打开飞行符2 = 单个模板匹配(370, 280, 430, 345, 'feixingfu3.png')
    if 打开飞行符 or 打开飞行符2:
        pass
    else:
        time.sleep(0.2)
        pyautogui.press('f8')
        time.sleep(0.5)
        飞行符 = 单个模板匹配(280, 330, 535, 430, 'feixingfu2.png', 返回坐标=True)
        if 飞行符:
            鼠标移动到指定距离(飞行符[0] + 280, 飞行符[1] + 330, 1)
            pyautogui.press('0')
            鼠标移动到指定距离(485, 495, 1)
            pyautogui.move(0, -30)
            pyautogui.rightClick()
            pyautogui.press('f1')
        else:
            框关闭函数()
            打开或关闭背包()
            打开长安飞行旗()
            鼠标移动到指定距离(406, 450, 1, 红点=True)
            打开或关闭背包()
            time.sleep(0.8)
            打开或关闭地图()
            鼠标移动到指定距离(384, 462, 1)
            打开或关闭地图()
            框关闭函数()
            time.sleep(5)
            pyautogui.hotkey('alt', 'h')
            场景窗口文本识别()
            pyautogui.press('f9')
            鼠标移动到指定距离(406 - (场景点X坐标 - 257) * 20,
                               310 + (场景点Y坐标 - 40) * 20, 1)
            time.sleep(0.4)
            鼠标移动到指定距离(180, 394, 1)
            time.sleep(1)
            飞行符 = 单个模板匹配(320, 220, 535, 333, 'feixingfu2.png', 返回坐标=True)
            if 飞行符:
                鼠标移动到指定距离(飞行符[0] + 320, 飞行符[1] + 220, 1)
                for i in range(2):
                    time.sleep(0.2)
                    pyautogui.click()
                pyautogui.press('0')
                鼠标移动到指定距离(404, 531, 1)
                time.sleep(0.2)
                pyautogui.move(100, -20)
                pyautogui.click()
                time.sleep(0.3)
                pyautogui.rightClick()
                time.sleep(0.2)
                pyautogui.press('f1')
def 点击长寿村飞行点():
    鼠标移动到指定距离(308, 242, 1)


def 点击傲来国飞行点():
    鼠标移动到指定距离(684, 478, 1)


def 点击花果山路口():
    global 花果X, 花果Y
    if 花果X == None and 花果Y == None or 随机整数100 > 70:
        花果X, 花果Y = 鼠标移动到指定距离(590, 235, 1, 红点=True)
    else:
        鼠标移动到指定距离(花果X, 花果Y, 1)


def 点击墨家村路口():
    鼠标移动到指定距离(392, 190, 1)


def 点击墨家村传送人():
    鼠标移动到指定距离(560, 137, 1)


def 打开傲来国飞行旗():
    for i in range(5):
        背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
        if  背包开:
            鼠标移动到指定距离(570, 420, 3,0.1)
            break
    else:
        打开或关闭背包()
        鼠标移动到指定距离(570, 420, 3)

def 点击酒店飞行坐标():
    global 酒店X, 酒店Y
    if 酒店X == None and 酒店Y == None or 随机整数100 > 70:
        酒店X, 酒店Y = 鼠标移动到指定距离(588, 327, 1, 红点=True)
    else:
        鼠标移动到指定距离(酒店X, 酒店Y, 1)


def 点击女儿村路口():
    global 女儿X, 女儿Y
    if 女儿X == None and 女儿Y == None or 随机整数100 > 70:
        女儿X, 女儿Y = 鼠标移动到指定距离(217, 238, 1, 红点=True)
    else:
        鼠标移动到指定距离(女儿X, 女儿Y, 1)


def 点击北俱芦洲路口():
    鼠标移动到指定距离(460, 280, 1)


def 点击东海湾路口():
    global 东海X, 东海Y
    if 东海X == None and 东海Y == None or 随机整数100 > 70:
        东海X, 东海Y = 鼠标移动到指定距离(508, 460, 1, 红点=True)
    else:
        鼠标移动到指定距离(东海X, 东海Y, 1)


def 点击东海湾传送人():
    鼠标移动到指定距离(406 - (场景点X坐标 - 168) * 20, 310 + (场景点Y坐标 - 15) * 20, 1)


def 点击建邺城飞行点():
    鼠标移动到指定距离(536, 419, 1)


def 点击宝象国飞行点():
    鼠标移动到指定距离(295, 380, 1)


def 点击朱紫国飞行点():
    鼠标移动到指定距离(353, 445, 1)


def 点击江南野外路口():
    global 野外X, 野外Y
    if 野外X == None and 野外Y == None or 随机整数100 > 70:
        野外X, 野外Y = 鼠标移动到指定距离(667, 493, 1, 红点=True)
    else:
        鼠标移动到指定距离(野外X, 野外Y, 1)


def 关闭仓库():
    鼠标移动到指定距离(600, 200, 3)


def 点击长寿郊外路口():
    global 郊外X, 郊外Y
    if 郊外X == None and 郊外Y == None or 随机整数100 > 70:
        郊外X, 郊外Y = 鼠标移动到指定距离(510, 520, 1, 红点=True)
    else:
        鼠标移动到指定距离(郊外X, 郊外Y, 1)


def 点击方寸山路口():
    鼠标移动到指定距离(453, 197, 1, 红点=True)


def 打开朱紫国飞行旗():
    for i in range(5):
        背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
        if  背包开:
            鼠标移动到指定距离(574, 377, 3,0.1)
            break
    else:
        打开或关闭背包()
        鼠标移动到指定距离(574, 377, 3)

def 打开长寿村飞行旗():
    for i in range(5):
        背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
        if  背包开:
            鼠标移动到指定距离(625, 375, 3,0.1)
            break
    else:
        打开或关闭背包()
        鼠标移动到指定距离(625, 375, 3)
def 五庄观当地前往命令():
    地图范围 = (100, 75)
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图左下角的位置 = [左下角坐标X + 190 * 窗口的大小比例值,
                        左下角坐标Y - 149 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 554 * 窗口的大小比例值,
                        左下角坐标Y - 422 * 窗口的大小比例值]  # 该两个数字是固定量，窗口顶点与地图最右上角的坐标差
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    if abs(坐标差X) > 4 or abs(坐标差Y) > 4:
        if 目标没移动:
            打开或关闭地图()
            出口钩子模板匹配()
            起点到目标点X = 比例X * 任务点X坐标
            起点到目标点Y = 比例Y * 任务点Y坐标
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

    if abs(坐标差X) < 5 and abs(坐标差Y) < 5:
        背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
        if not 背包开:
            print('背包没有打开,已打开背包')
            打开或关闭背包()
        鼠标移动到指定距离(中心坐标[0], 中心坐标[1], 3)
        pyautogui.moveTo(450 + 顶点坐标X, 500 + 顶点坐标Y)
        time.sleep(0.7)
        战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
        中心点列表 = 背包宝图模板匹配()
        if not 战斗中:
            中心点列表1 = 中心点列表
            if 0 < len(中心点列表1) < len(单次挖图坐标):
                单次挖图坐标 = 单次挖图坐标[-len(中心点列表1):]
                打开或关闭背包()
                打开或关闭地图()
                起点到目标点X = 比例X * 单次挖图坐标[0][0]
                起点到目标点Y = 比例Y * 单次挖图坐标[0][1]
                鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
                鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
                鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
                打开或关闭地图()
            elif 0 < len(中心点列表1) == len(单次挖图坐标):
                计数器 += 1
            elif len(中心点列表1) == 0:
                单次挖图坐标 = []
                打开或关闭背包()
                回宝象国存放战利品()
        elif 战斗中:  # 假如在战斗中的话
            背包开 = 单个模板匹配(0, 0, 750, 280, 'beibaokai.png')
            点击自动 = 单个模板匹配(650, 180, 776, 555, 'zidongPC.png')
            if 背包开:
                中心点列表1 = 中心点列表
                if 0 < len(中心点列表1) < len(单次挖图坐标):
                    单次挖图坐标 = 单次挖图坐标[-len(中心点列表1):]
                elif len(中心点列表1) == 0:
                    单次挖图坐标 = []

                鼠标移动到指定距离(500 + 随机整数10, 200 + 随机整数3, 3)
            战斗攻击()


def 麒麟山当地前往命令():
    地图范围 = (190, 142)
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标

    地图左下角的位置 = [左下角坐标X + 185 * 窗口的大小比例值,
                        左下角坐标Y - 147 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 551 * 窗口的大小比例值,
                        左下角坐标Y - 422 * 窗口的大小比例值]  # 该两个数字是固定量，窗口顶点与地图最右上角的坐标差
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    if abs(坐标差X) > 4 or abs(坐标差Y) > 4:
        if 目标没移动:
            打开或关闭地图()
            起点到目标点X = 比例X * 任务点X坐标
            起点到目标点Y = 比例Y * 任务点Y坐标
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            出口钩子模板匹配()
            打开或关闭地图()
            场景窗口文本识别()

    if abs(坐标差X) < 5 and abs(坐标差Y) < 5:
        背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
        if not 背包开:
            print('背包没有打开,已打开背包')
            打开或关闭背包()
        鼠标移动到指定距离(中心坐标[0], 中心坐标[1], 3)
        pyautogui.moveTo(450 + 顶点坐标X, 500 + 顶点坐标Y)
        time.sleep(0.7)
        战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
        中心点列表 = 背包宝图模板匹配()
        if not 战斗中:
            中心点列表1 = 中心点列表
            if 0 < len(中心点列表1) < len(单次挖图坐标):
                单次挖图坐标 = 单次挖图坐标[-len(中心点列表1):]
                打开或关闭背包()
                打开或关闭地图()
                起点到目标点X = 比例X * 单次挖图坐标[0][0]
                起点到目标点Y = 比例Y * 单次挖图坐标[0][1]
                鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
                鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
                鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
                打开或关闭地图()
            elif 0 < len(中心点列表1) == len(单次挖图坐标):
                计数器 += 1
            elif len(中心点列表1) == 0:
                单次挖图坐标 = []
                打开或关闭背包()
                回宝象国存放战利品()


        elif 战斗中:  # 假如在战斗中的话
            背包开 = 单个模板匹配(0, 0, 750, 280, 'beibaokai.png')
            点击自动 = 单个模板匹配(650, 180, 776, 555, 'zidongPC.png')
            if 背包开:
                中心点列表1 = 中心点列表
                if 0 < len(中心点列表1) < len(单次挖图坐标):
                    单次挖图坐标 = 单次挖图坐标[-len(中心点列表1):]
                elif len(中心点列表1) == 0:
                    单次挖图坐标 = []
                鼠标移动到指定距离(500 + 随机整数10, 200 + 随机整数3, 3)
            战斗攻击()


def 墨家村当地前往命令():
    地图范围 = (96, 168)
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标

    地图左下角的位置 = [左下角坐标X + 273 * 窗口的大小比例值,
                        左下角坐标Y - 113 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 465 * 窗口的大小比例值,
                        左下角坐标Y - 453 * 窗口的大小比例值]  # 该两个数字是固定量，窗口顶点与地图最右上角的坐标差
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]

    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    if abs(坐标差X) > 4 or abs(坐标差Y) > 4:
        if 目标没移动:
            打开或关闭地图()
            起点到目标点X = 比例X * 任务点X坐标
            起点到目标点Y = 比例Y * 任务点Y坐标
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            出口钩子模板匹配()
            打开或关闭地图()
            场景窗口文本识别()

    if abs(坐标差X) < 5 and abs(坐标差Y) < 5:
        背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
        if not 背包开:
            print('背包没有打开,已打开背包')
            打开或关闭背包()

        鼠标移动到指定距离(中心坐标[0], 中心坐标[1], 3)
        pyautogui.moveTo(450 + 顶点坐标X, 500 + 顶点坐标Y)
        time.sleep(0.7)
        战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
        中心点列表 = 背包宝图模板匹配()
        if not 战斗中:
            中心点列表1 = 中心点列表
            if 0 < len(中心点列表1) < len(单次挖图坐标):
                单次挖图坐标 = 单次挖图坐标[-len(中心点列表1):]
                打开或关闭背包()
                打开或关闭地图()
                起点到目标点X = 比例X * 单次挖图坐标[0][0]
                起点到目标点Y = 比例Y * 单次挖图坐标[0][1]
                鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
                鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
                鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
                打开或关闭地图()
            elif 0 < len(中心点列表1) == len(单次挖图坐标):
                计数器 += 1
            elif len(中心点列表1) == 0:
                单次挖图坐标 = []
                打开或关闭背包()
                回宝象国存放战利品()


        elif 战斗中:  # 假如在战斗中的话
            背包开 = 单个模板匹配(0, 0, 750, 280, 'beibaokai.png')
            点击自动 = 单个模板匹配(650, 180, 776, 555, 'zidongPC.png')
            if 背包开:
                中心点列表1 = 中心点列表
                if 0 < len(中心点列表1) < len(单次挖图坐标):
                    单次挖图坐标 = 单次挖图坐标[-len(中心点列表1):]
                elif len(中心点列表1) == 0:
                    单次挖图坐标 = []

                鼠标移动到指定距离(500 + 随机整数10, 200 + 随机整数3, 3)
            战斗攻击()


def 朱紫国当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (191, 120)
    地图左下角的位置 = [左下角坐标X + 150 * 窗口的大小比例值, 左下角坐标Y - 147 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 588 * 窗口的大小比例值, 左下角坐标Y - 421 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 建邺城当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (287, 144)
    地图左下角的位置 = [左下角坐标X + 126 * 窗口的大小比例值, 左下角坐标Y - 162 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 683 * 窗口的大小比例值, 左下角坐标Y - 436 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                if 20 < 任务点X坐标 < 140 and 5 < 任务点Y坐标 < 80:
                    pyautogui.hotkey('alt', 'h')
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 东海湾当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (119, 120)
    地图左下角的位置 = [左下角坐标X + 233 * 窗口的大小比例值, 左下角坐标Y - 147 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 510 * 窗口的大小比例值, 左下角坐标Y - 425 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 化生寺当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (127, 96)
    地图左下角的位置 = [左下角坐标X + 187 * 窗口的大小比例值, 左下角坐标Y - 148 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 548 * 窗口的大小比例值, 左下角坐标Y - 417 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()

            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        time.sleep(0.6)
        右边范围 = 地图范围[0] - 左右边缘距离
        上边范围 = 地图范围[1] - 上下边缘距离
        print('右边范围,上边范围:', 右边范围, 上边范围)
        隐藏人物()
        目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
        计数器 += 1
        if 计数器 > 3:
            任务文本 = []


def 西梁女国当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (163, 124)
    地图左下角的位置 = [左下角坐标X + 188 * 窗口的大小比例值, 左下角坐标Y - 149 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 547 * 窗口的大小比例值, 左下角坐标Y - 419 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        time.sleep(0.6)
        右边范围 = 地图范围[0] - 左右边缘距离
        上边范围 = 地图范围[1] - 上下边缘距离
        print('右边范围,上边范围:', 右边范围, 上边范围)
        隐藏人物()
        目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
        计数器 += 1
        if 计数器 > 3:
            任务文本 = []


def 花果山当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (159, 120)
    地图左下角的位置 = [左下角坐标X + 183 * 窗口的大小比例值, 左下角坐标Y - 147 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 551 * 窗口的大小比例值, 左下角坐标Y - 420 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 大唐国境当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标, 飞行坐骑已打开
    飞行坐骑已打开 = False
    地图范围 = (351, 336)
    地图左下角的位置 = [左下角坐标X + 180 * 窗口的大小比例值, 左下角坐标Y - 105 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 555 * 窗口的大小比例值, 左下角坐标Y - 465 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            if 飞行坐骑 and not 飞行坐骑已打开:
                if 55 < 任务点X坐标 < 210 and 85 < 任务点Y坐标 < 210:
                    pyautogui.press('f3')
                    time.sleep(0.5)
                    飞行坐骑已打开 = True
                    print('飞行坐骑已打开')
            打开或关闭地图()
            if 任务点X坐标 < 90:
                起点到目标点X = 比例X * (任务点X坐标)
                起点到目标点Y = 比例Y * (任务点Y坐标)
            else:
                起点到目标点X = 比例X * (任务点X坐标)
                起点到目标点Y = 比例Y * (任务点Y坐标)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                if 飞行坐骑 and 飞行坐骑已打开:
                    if 55 < 任务点X坐标 < 210 and 85 < 任务点Y坐标 < 210:
                        pyautogui.press('f3')
                        飞行坐骑已打开 = False
                        time.sleep(1.5)
                        print('飞行坐骑已关闭')
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 大唐境外当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (639, 118)
    地图左下角的位置 = [左下角坐标X + 113 * 窗口的大小比例值, 左下角坐标Y - 246 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 695 * 窗口的大小比例值, 左下角坐标Y - 352 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务点X坐标 < 90:
                起点到目标点X = 比例X * (任务点X坐标)
            else:
                起点到目标点X = 比例X * (任务点X坐标)
            if 任务点Y坐标 < 60:
                起点到目标点Y = 比例Y * (任务点Y坐标 + 1)
            elif 任务点Y坐标 >= 60:
                起点到目标点Y = 比例Y * (任务点Y坐标 - 1)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            出口钩子模板匹配()
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 狮驼岭当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (131, 99)
    地图左下角的位置 = [左下角坐标X + 189 * 窗口的大小比例值, 左下角坐标Y - 147 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 552 * 窗口的大小比例值, 左下角坐标Y - 421 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 地府当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (159, 120)
    地图左下角的位置 = [左下角坐标X + 189 * 窗口的大小比例值, 左下角坐标Y - 147 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 552 * 窗口的大小比例值, 左下角坐标Y - 421 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        time.sleep(0.6)
        右边范围 = 地图范围[0] - 左右边缘距离
        上边范围 = 地图范围[1] - 上下边缘距离
        print('右边范围,上边范围:', 右边范围, 上边范围)
        隐藏人物()
        目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
        计数器 += 1
        if 计数器 > 3:
            任务文本 = []


def 江南野外当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (159, 120)
    地图左下角的位置 = [左下角坐标X + 185 * 窗口的大小比例值, 左下角坐标Y - 149 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 553 * 窗口的大小比例值, 左下角坐标Y - 420 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 6
    else:
        范围 = 11
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            print('任务点X坐标,任务点Y坐标,坐标差X,坐标差Y', 任务点X坐标, 任务点Y坐标, 坐标差X, 坐标差Y,场景点X坐标,场景点Y坐标)
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 女儿村当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (127, 144)
    地图左下角的位置 = [左下角坐标X + 209 * 窗口的大小比例值, 左下角坐标Y - 103 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 527 * 窗口的大小比例值, 左下角坐标Y - 464 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目  标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 北俱芦洲当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (227.5, 170)
    地图左下角的位置 = [左下角坐标X + 185 * 窗口的大小比例值, 左下角坐标Y - 147 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 553 * 窗口的大小比例值, 左下角坐标Y - 422 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 长寿郊外当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (191, 168)
    地图左下角的位置 = [左下角坐标X + 213 * 窗口的大小比例值, 左下角坐标Y - 148 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 525 * 窗口的大小比例值, 左下角坐标Y - 421 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        print('任务点X坐标,任务点Y坐标,坐标差X,坐标差Y',任务点X坐标,任务点Y坐标,坐标差X,坐标差Y)
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            出口钩子模板匹配()
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)
            print('一张图已挖完')


def 长寿村当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (159, 210)
    地图左下角的位置 = [顶点坐标X + 237, 顶点坐标Y + 550]
    地图右上角的位置 = [顶点坐标X + 498, 顶点坐标Y + 210]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2-3)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2-3)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标+随机整数2-2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标+ 随机整数2-2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()
            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        time.sleep(0.6)
        右边范围 = 地图范围[0] - 左右边缘距离
        上边范围 = 地图范围[1] - 上下边缘距离
        print('右边范围,上边范围:', 右边范围, 上边范围)
        if 62 < 任务点X坐标 < 140 and 30 < 任务点Y坐标 < 80 or 100 < 任务点X坐标 < 150 and 100 < 任务点Y坐标 < 120:
            pyautogui.hotkey('alt', 'h')
        隐藏人物()
        目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
        计数器 += 1
        if 计数器 > 3:
            任务文本 = []


def 普陀山当地前往命令():
    global 贼王坐标,坐标差X,坐标差Y,右边范围,上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (95, 71)
    地图左下角的位置 = [左下角坐标X + 192 * 窗口的大小比例值, 左下角坐标Y - 154 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 547 * 窗口的大小比例值, 左下角坐标Y - 416 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()

            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 傲来国当地前往命令():
    global 贼王坐标, 坐标差X, 坐标差Y, 右边范围, 上边范围
    global 计数器
    global 中心点列表1
    global 单次挖图坐标
    global 上一次的任务
    global 任务文本
    global 目标点X坐标, 目标点Y坐标
    地图范围 = (223, 151)
    地图左下角的位置 = [左下角坐标X + 162 * 窗口的大小比例值, 左下角坐标Y - 147 * 窗口的大小比例值]
    地图右上角的位置 = [左下角坐标X + 576 * 窗口的大小比例值, 左下角坐标Y - 421 * 窗口的大小比例值]
    地图的鼠标范围X = abs(地图左下角的位置[0] - 地图右上角的位置[0])  # 获取整张地图的分辨率，鼠标范围
    地图的鼠标范围Y = abs(地图左下角的位置[1] - 地图右上角的位置[1])
    比例X = 地图的鼠标范围X / 地图范围[0]  # 计算整张地图坐标与分辨率的比例
    比例Y = 地图的鼠标范围Y / 地图范围[1]
    if 任务类型 == '挖图':
        范围 = 4
    else:
        范围 = 10
    if 任务点X坐标 > 地图范围[0] or 任务点Y坐标 > 地图范围[1]:
        任务文本 = []
    elif abs(坐标差X) >= 范围 or abs(坐标差Y) >= 范围:
        if 目标没移动:
            打开或关闭地图()
            if 任务类型 == '挖图':
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2)
            else:
                if 任务点X坐标 < 90:
                    起点到目标点X = 比例X * (任务点X坐标 + 随机整数3 + 4)
                else:
                    起点到目标点X = 比例X * (任务点X坐标 - 6 + 随机整数2)
                if 任务点Y坐标 < 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 + 随机整数2 + 2)
                elif 任务点Y坐标 >= 110:
                    起点到目标点Y = 比例Y * (任务点Y坐标 - 4 + 随机整数2)
            鼠标移动到目标位置X = 地图左下角的位置[0] + int(起点到目标点X)  # 得出目标点在屏幕中的位置
            鼠标移动到目标位置Y = 地图左下角的位置[1] - int(起点到目标点Y)
            鼠标移动到指定距离(鼠标移动到目标位置X - 顶点坐标X, 鼠标移动到目标位置Y - 顶点坐标Y, 1)
            打开或关闭地图()
            场景窗口文本识别()
            计数器 += 1
            if 计数器 > 3:
                任务文本 = []
        血量检测系统()
    elif abs(坐标差X) < 范围 and abs(坐标差Y) < 范围:
        if 任务类型 != '挖图':
            if 目标没移动:
                time.sleep(0.6)
                右边范围 = 地图范围[0] - 左右边缘距离
                上边范围 = 地图范围[1] - 上下边缘距离
                print('右边范围,上边范围:', 右边范围, 上边范围)
                if 100 < 任务点X坐标 < 170 and 60 < 任务点Y坐标 < 120 or 20 < 任务点X坐标 < 80 and 20 < 任务点Y坐标 < 50:
                    pyautogui.hotkey('alt', 'h')
                隐藏人物()
                目标点X坐标, 目标点Y坐标 = 场景坐标计算点击()
                计数器 += 1
                if 计数器 > 3:
                    任务文本 = []
        else:
            挖图开挖函数(比例X, 比例Y, 地图左下角的位置)


def 长安到傲来国():
    if "长" in 场景文本 and "安" in 场景文本:
        野路口 = 单个模板匹配(700, 100, 830, 500, 'yewai1.png')
        if 野路口:
            鼠标移动到指定距离(735, 580, 1)
            time.sleep(1)
            pyautogui.click()
            time.sleep(0.5)
            pyautogui.click()
            time.sleep(0.5)
            pyautogui.click()
            打开或关闭地图()
            鼠标移动到指定距离(542, 391, 1)
            打开或关闭地图()
        else:
            if 目标没移动 or 首次前往:
                打开或关闭地图()
                鼠标移动到指定距离(668, 495, 1)
                打开或关闭地图()
    elif "野" in 场景文本 and "外" in 场景文本:
        野外路口 = 单个模板匹配(500, 0, 830, 450, 'yewai.png')
        野外路口2 = 单个模板匹配(500, 0, 830, 450, 'yewaii.png')
        if 野外路口 or 野外路口2:
            鼠标移动到指定距离(777, 333, 1)
            time.sleep(1)
            pyautogui.click()
            time.sleep(0.5)
            pyautogui.click()
            time.sleep(0.5)
            pyautogui.click()
            打开或关闭地图()
            鼠标移动到指定距离(660, 460, 1)
            打开或关闭地图()
        else:
            if 目标没移动:
                打开或关闭地图()
                鼠标移动到指定距离(542, 391, 1)
                打开或关闭地图()
    elif "建" in 场景文本 and "城" in 场景文本:
        建邺路口 = 单个模板匹配(500, 200, 830, 660, 'jianye.png')
        if 建邺路口:
            time.sleep(0.5)
            鼠标移动到指定距离(740, 320, 1)
            time.sleep(1.5)
            pyautogui.click()
            time.sleep(0.7)
            pyautogui.click()
            time.sleep(0.7)
            pyautogui.click()
            if not '龙' in 任务文本:
                打开或关闭地图()
                鼠标移动到指定距离(365, 455, 1)
                打开或关闭地图()
                time.sleep(7)
            elif '龙' in 任务文本:
                打开或关闭地图()
                鼠标移动到指定距离(473, 310, 1)
                打开或关闭地图()
        else:
            if 目标没移动:
                打开或关闭地图()
                鼠标移动到指定距离(660, 460, 1)
                打开或关闭地图()
                pyautogui.move(-100, 0)
    elif "东" in 场景文本 and "海" in 场景文本:
        if not '龙' in 任务文本:
            找到驿站 = 长安驿站路口前往命令(其他地方=True, 默认地点='东海')
            if 找到驿站:
                if "孙" in 任务文本 and "婆" in 任务文本:
                    打开或关闭地图()
                    鼠标移动到指定距离(183, 263, 1)
                    打开或关闭地图()
                else:
                    打开或关闭地图()
                    鼠标移动到指定距离(564, 245, 1)
                    打开或关闭地图()
            else:
                打开或关闭地图()
                鼠标移动到指定距离(365, 455, 1)
                打开或关闭地图()
                time.sleep(3)
        elif '龙' in 任务文本 and 目标没移动:
            龙宫路口 = 单个模板匹配(0, 0, 800, 500, 'lg1.png', 返回坐标=True)
            if 龙宫路口:
                鼠标移动到指定距离(龙宫路口[0] + 412, 龙宫路口[1] + 133, 1)
                time.sleep(0.5)
                点击常规确认()
                time.sleep(1)
                打开或关闭地图()
                鼠标移动到指定距离(385, 360, 1)
                打开或关闭地图()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(473, 310, 1)
                    打开或关闭地图()


def 长安到境外():
    if "长" in 场景文本 and "安" in 场景文本:
        if 270 < 场景点X坐标 < 295 and 40 < 场景点Y坐标 < 45 and 目标没移动:
            print('已到驿站正在找人')
            time.sleep(1)
            已到国境 = 长安驿站路口前往命令(其他地方=True)
            if 已到国境:
                打开或关闭地图()
                出口钩子模板匹配()
                鼠标移动到指定距离(187, 477, 1)
                打开或关闭地图()
            else:
                print('没到驿站人')
        else:
            if 目标没移动 or 首次前往:
                打开或关闭地图()
                鼠标移动到指定距离(413, 460, 1)
                打开或关闭地图()
    if "国" in 场景文本 and "境" in 场景文本:
        境外路口 = 单个模板匹配(0, 0, 300, 660, 'jw.png', 返回坐标=True)
        if 境外路口:
            time.sleep(1)
            鼠标移动到指定距离(50, 境外路口[1] - 200, 1)
            time.sleep(1.3)
            pyautogui.click()
            time.sleep(0.7)
            pyautogui.click()
            time.sleep(0.7)
            pyautogui.click()
            if "冰" in 任务文本 or "花十" in 任务文本:
                打开或关闭地图()
                出口钩子模板匹配()
                鼠标移动到指定距离(596, 316, 1)
                打开或关闭地图()
            elif "牛" in 任务文本 and "王" in 任务文本:
                打开或关闭地图()
                出口钩子模板匹配()
                鼠标移动到指定距离(165, 314, 1)
                打开或关闭地图()
            elif "王" in 任务文本 and "大" in 任务文本 and not "地" in 任务文本:
                打开或关闭地图()
                出口钩子模板匹配()
                鼠标移动到指定距离(118, 367, 1)
                打开或关闭地图()
            elif "镇" in 任务文本 and "大" in 任务文本:
                打开或关闭地图()

                鼠标移动到指定距离(685, 350, 1)
                打开或关闭地图()
        else:
            if 目标没移动:
                打开或关闭地图()
                出口钩子模板匹配()
                鼠标移动到指定距离(187, 477, 1)
                打开或关闭地图()


def 傲来到郊外():
    if "傲" in 场景文本 and "来" in 场景文本:
        print("傲前往花果")
        傲来路口 = 单个模板匹配(400, 295, 800, 536, 'aolai.png')
        if 傲来路口:
            鼠标移动到指定距离(751, 160, 1)
            time.sleep(1)
            pyautogui.click()
            time.sleep(0.5)
            pyautogui.click()
            time.sleep(0.5)
            pyautogui.click()
            打开或关闭地图()
            鼠标移动到指定距离(260, 300, 1)
            打开或关闭地图()
        else:
            if 目标没移动:
                打开或关闭地图()
                鼠标移动到指定距离(564, 245, 1)
                打开或关闭地图()
    elif "花" in 场景文本 and "果" in 场景文本 and 目标没移动:
        隐藏人物()
        time.sleep(0.2)
        北俱路口 = 单个模板匹配(0, 0, 800, 660, 'bj.png', 返回坐标=True)
        if 北俱路口:
            鼠标移动到指定距离(北俱路口[0], 北俱路口[1], 1)
            鼠标移动到指定距离(243, 394, 4)
            驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
            if 驿站:
                pyautogui.click()
                time.sleep(1)
                打开或关闭地图()
                鼠标移动到指定距离(475, 475, 1)
                出口钩子模板匹配()
                鼠标移动到指定距离(510, 490, 1)
                打开或关闭地图()
        else:
            if 目标没移动:
                打开或关闭地图()
                鼠标移动到指定距离(260, 300, 1)
                打开或关闭地图()
    elif "北" in 场景文本 and "俱" in 场景文本 and 目标没移动:
        time.sleep(2)
        隐藏人物()
        郊外路口 = 单个模板匹配(0, 0, 810, 660, 'jiaowai.png', 返回坐标=True)
        if 郊外路口:
            鼠标移动到指定距离(郊外路口[0] - 218, 郊外路口[1] - 70, 1)
            鼠标移动到指定距离(243, 394, 4)
            驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
            if 驿站:
                pyautogui.click()
                time.sleep(1)
                if ("杨" in 任务文本 and "宫" in 任务文本) or ("李" in 任务文本 and "靖" in 任务文本):
                    打开或关闭地图()
                    出口钩子模板匹配()
                    鼠标移动到指定距离(255, 420, 1)
                    打开或关闭地图()
                elif "菩" in 任务文本 and "提" in 任务文本:
                    打开或关闭地图()
                    鼠标移动到指定距离(475, 253, 1)
                    打开或关闭地图()
        else:
            if 目标没移动:
                打开或关闭地图()
                出口钩子模板匹配()
                鼠标移动到指定距离(510, 490, 1)
                打开或关闭地图()


# 6666
def 押镖前往命令():
    global 任务文本
    if "孙" in 任务文本 and "婆" in 任务文本:
        print('正在前往孙婆婆')
        长安到傲来国()
        if "傲" in 场景文本 and "国" in 场景文本:
            女儿路口 = 单个模板匹配(0, 0, 600, 300, 'nver.png')
            if 女儿路口:
                鼠标移动到指定距离(30, 250, 1)
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                打开或关闭地图()
                鼠标移动到指定距离(250 + 随机整数1, 250 + 随机整数1, 1)
                打开或关闭地图()
            else:
                if 目标没移动 or 首次前往:
                    打开或关闭地图()
                    鼠标移动到指定距离(183 + 随机整数1, 263 + 随机整数1, 1)
                    打开或关闭地图()
        elif "女" in 场景文本 and "儿" in 场景文本:
            女儿门口 = 单个模板匹配(0, 0, 600, 400, 'nvermenkou.png')
            if 女儿门口:
                鼠标移动到指定距离(250, 308, 1)
                time.sleep(2)
                孙婆婆 = 单个模板匹配(0, 0, 800, 660, 'sunpopo.png', 返回坐标=True)
                if 孙婆婆:
                    鼠标移动到指定距离(孙婆婆[0], 孙婆婆[1], 4)
                    押镖给与()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(250 + 随机整数1, 250 + 随机整数1, 1)
                    打开或关闭地图()
        else:
            孙婆婆 = 单个模板匹配(0, 0, 800, 660, 'sunpopo.png', 返回坐标=True)
            if 孙婆婆:
                鼠标移动到指定距离(孙婆婆[0], 孙婆婆[1], 4)
                押镖给与()
    elif "唐" in 任务文本 and "官" in 任务文本:
        print('正在前往大唐')
        if "长安" in 场景文本:
            if 场景点Y坐标 > 263:
                鼠标移动到指定距离(322 + 随机整数1, 97 + 随机整数1, 1)
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                打开或关闭地图()
                鼠标移动到指定距离(355 + 随机整数1, 395 + 随机整数1, 1)
                打开或关闭地图()
            else:
                if 目标没移动 or 首次前往:
                    打开或关闭地图()
                    鼠标移动到指定距离(444 + 随机整数1, 230 + 随机整数1, 1)
                    打开或关闭地图()
        elif "大唐" in 场景文本 and "唐" in 场景文本:
            大唐 = 单个模板匹配(0, 0, 600, 400, 'datang.png', 返回坐标=True)
            if 大唐:
                鼠标移动到指定距离(大唐[0], 大唐[1], 1)
                time.sleep(1)
                隐藏人物()
                鼠标移动到指定距离(280, 356, 1)
                time.sleep(2)
                大唐2 = 单个模板匹配(0, 0, 800, 660, 'datang2.png', 返回坐标=True)
                if 大唐2:
                    鼠标移动到指定距离(大唐2[0], 大唐2[1], 4)
                    押镖给与()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(355 + 随机整数1, 395 + 随机整数1, 1)
                    打开或关闭地图()
        elif "门派里面" in 场景文本:
            大唐2 = 单个模板匹配(0, 0, 800, 660, 'datang2.png', 返回坐标=True)
            if 大唐2:
                鼠标移动到指定距离(大唐2[0], 大唐2[1], 4)
                押镖给与()
    elif "禅师" in 任务文本 and "空" in 任务文本:
        print('正在前往化生寺')
        if "长安" in 场景文本:
            if 场景点Y坐标 > 265:
                鼠标移动到指定距离(522, 90, 1)
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                打开或关闭地图()
                鼠标移动到指定距离(450 + 随机整数1, 360 + 随机整数1, 1)
                打开或关闭地图()
            else:
                if 目标没移动 or 首次前往:
                    打开或关闭地图()
                    鼠标移动到指定距离(632 + 随机整数1, 224 + 随机整数1, 1)
                    打开或关闭地图()
        elif "化" in 场景文本 and "寺" in 场景文本:
            化生 = 单个模板匹配(0, 0, 600, 400, 'hs.png', 返回坐标=True)
            if 化生:
                鼠标移动到指定距离(化生[0] + 70, 化生[1] + 120, 1)
                time.sleep(2)
                禅师 = 单个模板匹配(0, 0, 800, 660, 'chanshi.png', 返回坐标=True)
                if 禅师:
                    鼠标移动到指定距离(禅师[0], 禅师[1], 4)
                    押镖给与()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(450 + 随机整数1, 360 + 随机整数1, 1)
                    打开或关闭地图()
        elif "门派里面" in 场景文本:
            禅师 = 单个模板匹配(0, 0, 800, 660, 'chanshi.png', 返回坐标=True)
            if 禅师:
                鼠标移动到指定距离(禅师[0], 禅师[1], 4)
                押镖给与()
    elif "菩" in 任务文本 and "提" in 任务文本:
        print('正在前往方寸')
        长安到傲来国()
        傲来到郊外()
        if "外" in 场景文本 and not "江" in 场景文本:
            长寿路口 = 单个模板匹配(0, 0, 600, 300, 'cs.png')
            if 长寿路口:
                鼠标移动到指定距离(440, 100, 1)
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                打开或关闭地图()
                鼠标移动到指定距离(420 + 随机整数1, 216 + 随机整数1, 1)
                打开或关闭地图()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(475 + 随机整数1, 253 + 随机整数1, 1)
                    打开或关闭地图()
        elif "长寿村" in 场景文本:
            方寸路口 = 单个模板匹配(0, 0, 600, 300, 'FC11.png')
            if 方寸路口:
                鼠标移动到指定距离(440, 80, 1)
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                打开或关闭地图()
                鼠标移动到指定距离(423 + 随机整数1, 294 + 随机整数1, 1)
                打开或关闭地图()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(420 + 随机整数1, 216 + 随机整数1, 1)
                    打开或关闭地图()
        elif "方" in 场景文本:
            菩提路口 = 单个模板匹配(0, 0, 800, 660, 'pt.png', 返回坐标=True)
            if 菩提路口:
                鼠标移动到指定距离(菩提路口[0] + 30, 菩提路口[1] + 100, 1)
                time.sleep(1)
                鼠标移动到指定距离(760, 150, 1)
                time.sleep(6.5)
                菩提 = 单个模板匹配(0, 0, 800, 600, 'FC.png', 返回坐标=True)
                if 菩提:
                    鼠标移动到指定距离(菩提[0], 菩提[1], 4)
                    押镖给与()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(423 + 随机整数1, 294 + 随机整数1, 1)
                    打开或关闭地图()
        elif "门派里面" in 场景文本:
            菩提 = 单个模板匹配(0, 0, 800, 600, 'FC.png', 返回坐标=True)
            if 菩提:
                鼠标移动到指定距离(菩提[0], 菩提[1], 4)
                押镖给与()
            else:
                鼠标移动到指定距离(760, 150, 1)
                time.sleep(6.5)
    elif "镇" in 任务文本 and "大" in 任务文本:
        print('正在前往五庄观')
        长安到境外()
        if "境外" in 场景文本 and "唐" in 场景文本:
            五庄路口 = 单个模板匹配(400, 0, 850, 550, 'wz.png', 返回坐标=True)
            if 五庄路口 and 目标没移动:
                鼠标移动到指定距离(五庄路口[0] + 40 + 400, 五庄路口[1] - 200, 1)
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                打开或关闭地图()
                鼠标移动到指定距离(397 + 随机整数1, 374 + 随机整数1, 1)
                打开或关闭地图()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(685 + 随机整数1, 350 + 随机整数1, 1)
                    打开或关闭地图()
        elif "五" in 场景文本 and "庄" in 场景文本 and 目标没移动:
            五庄门口 = 单个模板匹配(0, 0, 600, 400, 'wz2.png', 返回坐标=True)
            if 五庄门口:
                鼠标移动到指定距离(五庄门口[0] + 40, 五庄门口[1] + 60, 1)
                time.sleep(2)
                大仙 = 单个模板匹配(0, 0, 800, 600, 'wz33.png', 返回坐标=True)
                if 大仙:
                    鼠标移动到指定距离(大仙[0], 大仙[1], 4)
                    押镖给与()
            else:
                打开或关闭地图()
                鼠标移动到指定距离(397 + 随机整数1, 374 + 随机整数1, 1)
                打开或关闭地图()
        elif "门派里面" in 场景文本:
            大仙 = 单个模板匹配(0, 0, 800, 600, 'wz33.png', 返回坐标=True)
            if 大仙:
                鼠标移动到指定距离(大仙[0], 大仙[1], 4)
                押镖给与()
    elif "冰" in 任务文本 or "花十" in 任务文本:
        print('正在前往盘丝')
        长安到境外()
        if "境外" in 场景文本 and "唐" in 场景文本:
            print('正在前往盘丝1')
            盘丝路口 = 单个模板匹配(0, 0, 850, 440, 'ps.png')
            if 盘丝路口:
                鼠标移动到指定距离(350, 90, 1)
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                打开或关闭地图()
                鼠标移动到指定距离(528 + 随机整数1, 283 + 随机整数1, 1)
                打开或关闭地图()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(596 + 随机整数1, 316 + 随机整数1, 1)
                    打开或关闭地图()
        elif "盘" in 场景文本 and "丝" in 场景文本 and 目标没移动 and not "洞" in 场景文本:
            print('正在前往盘丝2')
            盘丝门口 = 单个模板匹配(0, 0, 800, 400, 'ps2.png', 返回坐标=True)
            if 盘丝门口:
                鼠标移动到指定距离(盘丝门口[0] + 150, 盘丝门口[1] + 144, 1)
                if "花十" in 任务文本:
                    time.sleep(1)
                    鼠标移动到指定距离(550, 300, 1)
                    time.sleep(4)
                    隐藏人物()
                    十三 = 单个模板匹配(0, 0, 800, 400, '13.png', 返回坐标=True)
                    if 十三:
                        鼠标移动到指定距离(十三[0], 十三[1], 4)
                        押镖给与()
                else:
                    time.sleep(1)
                    鼠标移动到指定距离(400, 100, 1)
                    time.sleep(3)
                    鼠标移动到指定距离(570, 135, 1)
                    time.sleep(4)
                    隐藏人物()
                    十4 = 单个模板匹配(0, 0, 800, 400, '14.png', 返回坐标=True)
                    if 十4:
                        鼠标移动到指定距离(十4[0], 十4[1], 4)
                        押镖给与()
            else:
                打开或关闭地图()
                鼠标移动到指定距离(528 + 随机整数1, 283 + 随机整数1, 1)
                打开或关闭地图()
        elif "门派里面" in 场景文本:
            print('正在前往盘丝3')
            if "花十" in 任务文本:
                隐藏人物()
                十三 = 单个模板匹配(0, 0, 800, 400, '13.png', 返回坐标=True)
                if 十三:
                    鼠标移动到指定距离(十三[0], 十三[1], 4)
                    押镖给与()
                else:
                    鼠标移动到指定距离(550, 300, 1)
                    time.sleep(4)
            elif "冰" in 任务文本:
                隐藏人物()
                十4 = 单个模板匹配(0, 0, 800, 400, '14.png', 返回坐标=True)
                if 十4:
                    鼠标移动到指定距离(十4[0], 十4[1], 4)
                    押镖给与()
                else:
                    鼠标移动到指定距离(400, 100, 1)
                    time.sleep(3)
                    鼠标移动到指定距离(570, 135, 1)
                    time.sleep(4)
    elif "牛" in 任务文本 and "王" in 任务文本:
        print('正在前往牛魔王')
        长安到境外()
        if "境外" in 场景文本 and "唐" in 场景文本 and 目标没移动:
            牛路口 = 单个模板匹配(0, 0, 850, 440, 'niu.png', 返回坐标=True)
            if 牛路口:
                鼠标移动到指定距离(牛路口[0] + 130, 牛路口[1] - 18, 1)
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                打开或关闭地图()
                鼠标移动到指定距离(473 + 随机整数1, 293 + 随机整数1, 1)
                打开或关闭地图()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(165 + 随机整数1, 314 + 随机整数1, 1)
                    打开或关闭地图()
        elif ("寨" in 场景文本 or "王" in 场景文本) and 目标没移动 and not "居" in 场景文本:
            牛门口 = 单个模板匹配(0, 0, 800, 400, 'niu2.png', 返回坐标=True)
            if 牛门口:
                鼠标移动到指定距离(牛门口[0], 牛门口[1], 1)
                time.sleep(1)
                牛3 = 单个模板匹配(0, 0, 800, 660, 'niu3.png', 返回坐标=True)
                if 牛3:
                    鼠标移动到指定距离(牛3[0], 牛3[1], 4)
                    押镖给与()
            else:
                打开或关闭地图()
                鼠标移动到指定距离(473 + 随机整数1, 293 + 随机整数1, 1)
                打开或关闭地图()
        elif "门派里面" in 场景文本:
            牛3 = 单个模板匹配(0, 0, 800, 660, 'niu3.png', 返回坐标=True)
            if 牛3:
                鼠标移动到指定距离(牛3[0], 牛3[1], 4)
                押镖给与()
            else:
                pass
    elif "王" in 任务文本 and "大" in 任务文本 and not "地" in 任务文本:
        print('正在前往狮驼岭')
        长安到境外()
        if "境外" in 场景文本 and "唐" in 场景文本:
            狮驼路口 = 单个模板匹配(0, 0, 300, 600, 'slt1.png', 返回坐标=True)
            if 狮驼路口:
                print(狮驼路口)
                鼠标移动到指定距离(50, 狮驼路口[1] + 150, 1)
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                if "三" in 任务文本:
                    打开或关闭地图()
                    鼠标移动到指定距离(230 + 随机整数1, 405 + 随机整数1, 1)
                    打开或关闭地图()
                elif "二" in 任务文本:
                    打开或关闭地图()
                    鼠标移动到指定距离(262 + 随机整数1, 278 + 随机整数1, 1)
                    打开或关闭地图()
                elif not "二" in 任务文本 and not "三" in 任务文本:
                    打开或关闭地图()
                    鼠标移动到指定距离(515 + 随机整数1, 432 + 随机整数1, 1)
                    打开或关闭地图()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(118 + 随机整数1, 369 + 随机整数1, 1)
                    打开或关闭地图()
        elif "狮" in 场景文本 and "岭" in 场景文本 and 目标没移动:
            if "二" in 任务文本:
                狮驼2 = 单个模板匹配(0, 0, 800, 400, '222.png', 返回坐标=True)
                if 狮驼2:
                    鼠标移动到指定距离(狮驼2[0] + 127, 狮驼2[1] + 127, 1)
                    time.sleep(1)
                    鼠标移动到指定距离(368, 300, 1)
                    time.sleep(3)
                    隐藏人物()
                    大王 = 单个模板匹配(0, 0, 800, 660, '2wang.png', 返回坐标=True)
                    if 大王:
                        鼠标移动到指定距离(大王[0], 大王[1], 4)
                        押镖给与()
                else:
                    打开或关闭地图()
                    鼠标移动到指定距离(262 + 随机整数1, 278 + 随机整数1, 1)
                    打开或关闭地图()
            elif "三" in 任务文本:
                狮驼2 = 单个模板匹配(0, 0, 800, 400, 'sandawang.png', 返回坐标=True)
                if 狮驼2:
                    鼠标移动到指定距离(狮驼2[0] + 290, 狮驼2[1], 1)
                    time.sleep(2)
                    鼠标移动到指定距离(520, 300, 1)
                    time.sleep(4)
                    隐藏人物()
                    大王 = 单个模板匹配(0, 0, 800, 660, '333.png', 返回坐标=True)
                    if 大王:
                        鼠标移动到指定距离(大王[0], 大王[1], 4)
                        押镖给与()
                else:
                    if 目标没移动:
                        打开或关闭地图()
                        鼠标移动到指定距离(230 + 随机整数1, 405 + 随机整数1, 1)
                        打开或关闭地图()
            elif "大大" in 任务文本:
                狮驼2 = 单个模板匹配(0, 0, 800, 400, 'st2.png', 返回坐标=True)
                if 狮驼2:
                    鼠标移动到指定距离(狮驼2[0], 狮驼2[1], 1)
                    time.sleep(1)
                    鼠标移动到指定距离(525, 308, 1)
                    time.sleep(3.5)
                    大王 = 单个模板匹配(0, 0, 800, 660, 'stl3.png', 返回坐标=True)
                    if 大王:
                        鼠标移动到指定距离(大王[0], 大王[1], 4)
                        押镖给与()
                else:
                    if 目标没移动:
                        打开或关闭地图()
                        鼠标移动到指定距离(515 + 随机整数1, 432 + 随机整数1, 1)
                        打开或关闭地图()
            任务文本 = []
        elif "门派里面" in 场景文本 and "大大" in 任务文本:
            大王 = 单个模板匹配(0, 0, 800, 660, 'stl3.png', 返回坐标=True)
            if 大王:
                鼠标移动到指定距离(大王[0], 大王[1], 4)
                押镖给与()
            else:
                pass
        elif "门派里面" in 场景文本 and "三" in 任务文本:
            隐藏人物()
            大王 = 单个模板匹配(0, 0, 800, 660, '333.png', 返回坐标=True)
            if 大王:
                鼠标移动到指定距离(大王[0], 大王[1], 4)
                押镖给与()
            else:
                pass
        elif "门派里面" in 场景文本 and "二" in 任务文本:
            隐藏人物()
            大王 = 单个模板匹配(0, 0, 800, 660, '2wang.png', 返回坐标=True)
            if 大王:
                鼠标移动到指定距离(大王[0], 大王[1], 4)
                押镖给与()
            else:
                pass
    elif "龙" in 任务文本 and "宫" in 任务文本:
        print('正在前往龙宫')
        长安到傲来国()
        if "龙" in 场景文本 and 目标没移动:
            龙口 = 单个模板匹配(0, 0, 800, 400, 'lg2.png', 返回坐标=True)
            if 龙口:
                鼠标移动到指定距离(龙口[0] + 40, 龙口[1] + 130, 1)
                time.sleep(1)
                鼠标移动到指定距离(688, 333, 1)
                time.sleep(3.5)
                龙王 = 单个模板匹配(0, 0, 800, 660, 'lg3.png', 返回坐标=True)
                if 龙王:
                    鼠标移动到指定距离(龙王[0], 龙王[1], 4)
                    押镖给与()
            else:
                打开或关闭地图()
                鼠标移动到指定距离(385 + 随机整数1, 360 + 随机整数1, 1)
                打开或关闭地图()
        elif "门派里面" in 场景文本:
            龙王 = 单个模板匹配(0, 0, 800, 660, 'lg4.png', 返回坐标=True)
            if 龙王:
                鼠标移动到指定距离(龙王[0], 龙王[1], 4)
                押镖给与()
            else:
                pass
    elif "秦" in 任务文本 and "琼" in 任务文本:
        print('正在前往秦琼')
        if "长安" in 场景文本:
            if 80 < 场景点X坐标 < 95 and 70 < 场景点Y坐标 < 85:
                鼠标移动到指定距离(240, 240, 1)
                time.sleep(2)
                鼠标移动到指定距离(200, 267, 1)
                time.sleep(5)
                隐藏人物()
                秦琼 = 单个模板匹配(0, 0, 800, 660, 'QQ.png', 返回坐标=True)
                if 秦琼:
                    鼠标移动到指定距离(秦琼[0], 秦琼[1], 4)
                    押镖给与()
            else:
                if 目标没移动 or 首次前往:
                    打开或关闭地图()
                    鼠标移动到指定距离(218 + 随机整数1, 425 + 随机整数1, 1)
                    打开或关闭地图()
        elif "门派里面" in 场景文本:
            秦琼 = 单个模板匹配(0, 0, 800, 660, 'QQ.png', 返回坐标=True)
            if 秦琼:
                鼠标移动到指定距离(秦琼[0], 秦琼[1], 4)
                押镖给与()
            else:
                鼠标移动到指定距离(200, 267, 1)
                time.sleep(5)
    elif "观" in 任务文本 and "音" in 任务文本:
        print('正在前往普陀山')
        if "长安" in 场景文本:
            if 场景点X坐标 < 25:
                鼠标移动到指定距离(70, 590, 1)
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                打开或关闭地图()
                鼠标移动到指定距离(423 + 随机整数1, 490 + 随机整数1, 1)
                打开或关闭地图()
            else:
                if 目标没移动 or 首次前往:
                    打开或关闭地图()
                    鼠标移动到指定距离(144 + 随机整数1, 493 + 随机整数1, 1)
                    打开或关闭地图()
        elif "大" in 场景文本 and "境" in 场景文本 and 目标没移动:
            普陀1 = 单个模板匹配(0, 0, 800, 400, 'pt1.png', 返回坐标=True)
            if 普陀1:
                隐藏人物()
                鼠标移动到指定距离(普陀1[0] + 150, 普陀1[1] + 118, 1)
                鼠标移动到指定距离(243, 394, 4)
                驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 驿站:
                    pyautogui.click()
                    time.sleep(0.7)
                    打开或关闭地图()
                    鼠标移动到指定距离(220 + 随机整数1, 283 + 随机整数1, 1)
                    打开或关闭地图()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(423 + 随机整数1, 490 + 随机整数1, 1)
                    打开或关闭地图()
        elif "普" in 场景文本 and "山" in 场景文本:
            普陀2 = 单个模板匹配(0, 0, 400, 177, 'pt2.png', 返回坐标=True)
            if 普陀2:
                鼠标移动到指定距离(普陀2[0], 普陀2[1], 1)
                time.sleep(1.5)
                鼠标移动到指定距离(135, 157, 1)
                pyautogui.click()
                time.sleep(4.5)
                pyautogui.click()
                time.sleep(4)
                鼠标移动到指定距离(260, 235, 4)
                押镖给与()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(220 + 随机整数1, 283 + 随机整数1, 1)
                    打开或关闭地图()
        elif "门派里面" in 场景文本:
            观音 = 单个模板匹配(0, 0, 800, 660, 'pt3.png', 返回坐标=True)
            if 观音:
                鼠标移动到指定距离(观音[0], 观音[1], 4)
                押镖给与()
            else:
                鼠标移动到指定距离(135, 157, 1)
                pyautogui.click()
                time.sleep(4.5)
                pyautogui.click()
                time.sleep(4)
    elif "地" in 任务文本 and "王" in 任务文本:
        print('正在前往地藏王')
        if "长" in 场景文本 and "安" in 场景文本:
            if 275 < 场景点X坐标 < 290:
                time.sleep(1)
                国境已到 = 长安驿站路口前往命令(其他地方=True)
                if 国境已到:
                    打开或关闭地图()
                    鼠标移动到指定距离(232 + 随机整数1, 203 + 随机整数1, 1)
                    打开或关闭地图()
            else:
                if 目标没移动 or 首次前往:
                    打开或关闭地图()
                    鼠标移动到指定距离(413 + 随机整数1, 460 + 随机整数1, 1)
                    打开或关闭地图()
        elif "境" in 场景文本 or "大" in 场景文本:
            地府1 = 单个模板匹配(0, 0, 600, 400, 'df1.png', 返回坐标=True)
            if 地府1:
                鼠标移动到指定距离(地府1[0], 地府1[1], 1)
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                打开或关闭地图()
                鼠标移动到指定距离(260 + 随机整数1, 364 + 随机整数1, 1)
                打开或关闭地图()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(232 + 随机整数1, 203 + 随机整数1, 1)
                    打开或关闭地图()
        elif "门派里面" in 场景文本 and 目标没移动:
            地府2 = 单个模板匹配(0, 0, 600, 400, 'df2.png', 返回坐标=True)
            if 地府2:
                鼠标移动到指定距离(地府2[0] + 250, 地府2[1] + 40, 1)
                time.sleep(1)
                鼠标移动到指定距离(311, 120, 1)
                time.sleep(2.5)
                鼠标移动到指定距离(176, 168, 1)
                time.sleep(3)
                地府3 = 单个模板匹配(0, 0, 500, 500, 'df3.png', 返回坐标=True)
                if 地府3:
                    鼠标移动到指定距离(地府3[0], 地府3[1], 4)
                    押镖给与()
            else:
                打开或关闭地图()
                鼠标移动到指定距离(260 + 随机整数1, 364 + 随机整数1, 1)
                打开或关闭地图()

        elif "门派里面" in 场景文本:
            鼠标移动到指定距离(311, 120, 1)
            time.sleep(2.5)
            鼠标移动到指定距离(176, 168, 1)
            time.sleep(3)
        elif "门派里面" in 场景文本:
            地府3 = 单个模板匹配(0, 0, 500, 500, 'df3.png', 返回坐标=True)
            if 地府3:
                鼠标移动到指定距离(地府3[0], 地府3[1], 4)
                押镖给与()
    elif ("杨" in 任务文本 and "宫" in 任务文本) or ("李" in 任务文本 and "靖" in 任务文本):
        print('正在前往天宫')
        长安到傲来国()
        傲来到郊外()
        if "外" in 场景文本 and "寿" in 场景文本 and 目标没移动:
            隐藏人物()
            time.sleep(0.3)
            天宫1 = 单个模板匹配(0, 0, 800, 400, 'tg1.png', 返回坐标=True)
            if 天宫1:
                鼠标移动到指定距离(天宫1[0] - 337, 天宫1[1] - 12, 1)
                鼠标移动到指定距离(243, 394, 4)
                驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 驿站:
                    pyautogui.click()
                    time.sleep(1.3)
                    打开或关闭地图()
                    鼠标移动到指定距离(408 + 随机整数1, 414 + 随机整数1, 1)
                    打开或关闭地图()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    出口钩子模板匹配()
                    鼠标移动到指定距离(255 + 随机整数1, 420 + 随机整数1, 1)
                    打开或关闭地图()
        elif "天" in 场景文本 and 目标没移动:
            天宫2 = 单个模板匹配(0, 0, 600, 400, 'tg2.png', 返回坐标=True)
            if 天宫2:
                鼠标移动到指定距离(天宫2[0] + 25, 天宫2[1] + 60, 1)
                time.sleep(2)
                隐藏人物()
                if "杨" in 任务文本:
                    鼠标移动到指定距离(100, 300, 1)
                    time.sleep(4.5)
                    隐藏人物()
                    杨戬 = 单个模板匹配(0, 0, 800, 600, 'yang.png', 返回坐标=True)
                    if 杨戬:
                        鼠标移动到指定距离(杨戬[0], 杨戬[1], 4)
                        押镖给与()
                elif "李" in 任务文本:
                    鼠标移动到指定距离(130, 260, 1)
                    time.sleep(2.5)
                    pyautogui.click()
                    time.sleep(2.5)
                    pyautogui.click()
                    time.sleep(4)
                    李 = 单个模板匹配(0, 0, 800, 600, 'li.png', 返回坐标=True)
                    if 李:
                        鼠标移动到指定距离(李[0], 李[1], 4)
                        押镖给与()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(408 + 随机整数1, 414 + 随机整数1, 1)
                    打开或关闭地图()
        elif "门派里面" in 场景文本:
            if "杨" in 任务文本:
                隐藏人物()
                杨戬 = 单个模板匹配(0, 0, 800, 600, 'yang.png', 返回坐标=True)
                if 杨戬:
                    鼠标移动到指定距离(杨戬[0], 杨戬[1], 4)
                    押镖给与()
                else:
                    鼠标移动到指定距离(100, 300, 1)
                    time.sleep(4.5)

            elif "李" in 任务文本:
                李 = 单个模板匹配(0, 0, 800, 600, 'li.png', 返回坐标=True)
                if 李:
                    鼠标移动到指定距离(李[0], 李[1], 4)
                    押镖给与()
                else:
                    pass
    else:
        任务文本 = []
        if 目标没移动:
            点击人物中心(随机整数50, abs(随机整数50))
            print('没有识别到押镖地点')
    # if 目标没移动:
    #     框关闭函数()


def 挖宝目标前往命令():
    global 单次挖图坐标
    global 场景文本
    global 挖宝地点
    global 场景点Y坐标
    global 场景点X坐标
    global 坐标差X
    global 坐标差Y
    global 目标没移动
    if ("傲" in 挖宝地点) and ("来国" in 场景文本):
        print("正在前往傲来国目的地")
        傲来国当地前往命令()
    elif ("普陀" in 挖宝地点 or "陀" in 挖宝地点) and (
            "普陀" in 场景文本 or "陀山" in 场景文本):
        print("正在前往普陀山目的地")
        普陀山当地前往命令()
    elif ("朱" in 挖宝地点 or "紫" in 挖宝地点) and ("朱" in 场景文本 or "紫" in 场景文本):
        print("正在前往朱紫国目的地")
        朱紫国当地前往命令()
    elif ("家村" in 挖宝地点 or "墨家" in 挖宝地点) and ("家村" in 场景文本 or "墨家" in 场景文本):
        print("正在前往墨家村目的地")
        墨家村当地前往命令()
    elif ("寿郊" in 挖宝地点 or "郊外" in 挖宝地点) and ("长寿" in 场景文本 and "外" in 场景文本):
        print("正在前往长寿郊外的地")
        长寿郊外当地前往命令()
    elif ("北俱" in 挖宝地点 or "芦洲" in 挖宝地点) and ("北俱" in 场景文本 or "芦洲" in 场景文本):
        print("正在前往北俱芦洲的地")
        北俱芦洲当地前往命令()
    elif ("女儿" in 挖宝地点 or "儿村" in 挖宝地点) and ("女儿" in 场景文本 or "儿村" in 场景文本):
        print("正在前往女儿村的地")
        女儿村当地前往命令()
    elif ("江南" in 挖宝地点 or "野外" in 挖宝地点 or "南野" in 挖宝地点) and (
            "江南" in 场景文本 or "野外" in 场景文本 or "南野" in 场景文本):
        print("正在前往江南野外目的地")
        江南野外当地前往命令()
    elif "五庄" in 挖宝地点 and "五庄" in 场景文本:
        print("正在前往五庄观目的地")
        五庄观当地前往命令()
    elif ("境外" in 挖宝地点) and ("大" in 场景文本 and "外" in 场景文本):
        print("正在前往大唐境外目的地")
        大唐境外当地前往命令()
    elif ("国境" in 挖宝地点) and ("国境" in 场景文本 or "唐国" in 场景文本):
        print("正在前往大唐国境目的地")
        大唐国境当地前往命令()
    elif ("花" in 挖宝地点 or "果" in 挖宝地点 or "果山" in 挖宝地点) and (
            "花" in 场景文本 or "果" in 场景文本 or "果山" in 场景文本):
        print("正在前往花果山目的地")
        花果山当地前往命令()
    elif ("东海" in 挖宝地点 or "海湾" in 挖宝地点) and ("东" in 场景文本 or "海" in 场景文本):
        print("正在前往东海湾目的地")
        东海湾当地前往命令()
    elif ("建邺" in 挖宝地点 or "邺城" in 挖宝地点) and ("建" in 场景文本 or "城" in 场景文本):
        print("正在前往建邺城目的地")
        建邺城当地前往命令()
    elif ("狮驼" in 挖宝地点 or "驼岭" in 挖宝地点) and ("狮" in 场景文本 or "岭" in 场景文本):
        print("正在前往狮驼岭目的地")
        狮驼岭当地前往命令()
    elif "麒麟山" in 挖宝地点 and ("麒" in 场景文本 or "麟" in 场景文本 or "山" in 场景文本):
        print("正在前往麒麟山")
        麒麟山当地前往命令()

    elif "江南" in 挖宝地点 or "野外" in 挖宝地点 or "南野" in 挖宝地点:
        print("正在前往江南野外")
        打开或关闭背包()
        打开长安飞行旗()
        time.sleep(0.3 + 随机小数0)
        点击江南野外路口()
        time.sleep(0.3 + 随机小数0)
        打开或关闭背包()
        鼠标移动到指定距离(730, 570, 1)
        time.sleep(0.8 + 随机小数0)
        pyautogui.click()
        time.sleep(0.7 + 随机小数0)
        目标没移动 = True
        江南野外当地前往命令()
    elif "建邺" in 挖宝地点 or "邺城" in 挖宝地点 or "城" in 挖宝地点:
        print("正在前往建邺城")
        使用快捷键打开飞行符()
        time.sleep(0.2 + 随机小数0)
        点击建邺城飞行点()
        time.sleep(0.2 + 随机小数0)
        目标没移动 = True
        建邺城当地前往命令()
    elif "东海" in 挖宝地点 or "海湾" in 挖宝地点:
        print("正在前往东海湾")
        打开或关闭背包()
        打开傲来国飞行旗()
        time.sleep(0.3 + 随机小数0)
        点击东海湾路口()
        time.sleep(0.3 + 随机小数0)
        打开或关闭背包()
        场景窗口文本识别()
        点击东海湾传送人()
        点击常规确认()
        time.sleep(2 + 随机小数0)
        pyautogui.moveTo(150 + 顶点坐标X + 随机整数5, 200 + 顶点坐标Y + 随机整数6, duration=随机小数0)
        pyautogui.click()
        目标没移动 = True
        东海湾当地前往命令()
    elif "北俱" in 挖宝地点 or "俱芦" in 挖宝地点 or "芦洲" in 挖宝地点:
        print("正在前往北俱芦洲")
        if not "花果" in 场景文本 or not "果山" in 场景文本:
            打开或关闭背包()
            打开傲来国飞行旗()
            time.sleep(0.2 + 随机小数0)
            点击花果山路口()
            time.sleep(0.2 + 随机小数0)
            打开或关闭背包()
            鼠标移动到指定距离(700, 140, 4)
            pyautogui.move(60, 20)
            pyautogui.click()
            time.sleep(1 + 随机小数0)
        elif ("花果" in 场景文本 or "果山" in 场景文本):
            if 106 > 场景点Y坐标 > 93 and 37 > 场景点X坐标 > 20:
                pyautogui.press('f9')
                鼠标移动到指定距离(406 - (场景点X坐标 - 28) * 20, 310 + (场景点Y坐标 - 97) * 20, 1)
                鼠标移动到指定距离(243, 394, 4)
                驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 驿站:
                    pyautogui.click()
                    time.sleep(0.5 + 随机小数0)
                    目标没移动 = True
                    北俱芦洲当地前往命令()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(250, 280, 1)
                    打开或关闭地图()
    elif "寿郊" in 挖宝地点 or "郊" in 挖宝地点:
        print("正在前往长寿郊外")
        if not "长寿" in 场景文本 and not "寿村" in 场景文本:
            使用快捷键打开飞行符()
            time.sleep(0.2 + 随机小数0)
            点击长寿村飞行点()
            time.sleep(0.2 + 随机小数0)
            打开或关闭地图()
            time.sleep(0.2 + 随机小数0)
            鼠标移动到指定距离(485, 540, 1)
            打开或关闭地图()
        elif "村" in 场景文本:
            if 场景点Y坐标 < 10:
                鼠标移动到指定距离(600, 590, 1)
                time.sleep(1 + 随机小数0)
                鼠标移动到指定距离(210 + 随机整数10, 550 + 随机整数10, 1)
                time.sleep(0.7 + 随机小数0)
                目标没移动 = True
                长寿郊外当地前往命令()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    time.sleep(0.2 + 随机小数0)
                    鼠标移动到指定距离(485, 540, 1)
                    打开或关闭地图()

    elif "普陀" in 挖宝地点 or "陀" in 挖宝地点 or "陀山" in 挖宝地点:
        print("正在前往普陀山")
        if not "国境" in 场景文本:
            打开或关闭背包()
            打开长安飞行旗()
            点击大唐国境路口()
            time.sleep(0.2 + 随机小数0)
            打开或关闭背包()
            鼠标移动到指定距离(90 + 随机整数3, 520 + 随机整数3, 1)
            time.sleep(0.1 + 随机小数0)
            鼠标移动到指定距离(90 + 随机整数3, 520 + 随机整数3, 1)
        elif "国境" in 场景文本:
            if 55 < 场景点Y坐标 < 66 and 目标没移动:
                pyautogui.press('f9')
                鼠标移动到指定距离(406 - (场景点X坐标 - 221) * 20, 310 + (场景点Y坐标 - 60) * 20, 1)
                鼠标移动到指定距离(243, 394, 4)
                驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 驿站:
                    pyautogui.click()
                    time.sleep(0.8 + 随机小数0)
                    目标没移动 = True
                    普陀山当地前往命令()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    出口钩子模板匹配()
                    鼠标移动到指定距离(420, 491, 1)
                    打开或关闭地图()

    elif "国境" in 挖宝地点:
        print("正在前往大唐国境")
        打开或关闭背包()
        打开长安飞行旗()
        点击大唐国境路口()
        time.sleep(0.2 + 随机小数0)
        打开或关闭背包()
        鼠标移动到指定距离(90 + 随机整数3, 500 + 随机整数3, 1)
        time.sleep(0.5 + 随机小数0)
        鼠标移动到指定距离(90 + 随机整数3, 500 + 随机整数3, 1)
        time.sleep(0.5 + 随机小数0)
        目标没移动 = True
        大唐国境当地前往命令()
    elif "来国" in 挖宝地点 or "傲来" in 挖宝地点 or "傲" in 挖宝地点 or "来" in 挖宝地点:
        print("正在前往傲来国")
        使用快捷键打开飞行符()
        time.sleep(0.2 + 随机小数0)
        点击傲来国飞行点()
        time.sleep(0.6 + 随机小数0)
        目标没移动 = True
        傲来国当地前往命令()
    elif "家村" in 挖宝地点 or "墨家" in 挖宝地点:
        print("正在前往墨家村")
        if not "朱紫" in 场景文本 and not "境外" in 场景文本:
            使用快捷键打开飞行符()
            点击朱紫国飞行点()
            time.sleep(0.3 + 随机小数0)
            打开或关闭地图()
            鼠标移动到指定距离(162 + 随机整数3, 507 + 随机整数3, 1)
            time.sleep(0.3 + 随机小数0)
            打开或关闭地图()
        elif "朱" in 场景文本 and not "境外" in 场景文本:
            if 场景点Y坐标 < 10:
                鼠标移动到指定距离(35, 570, 1)
                time.sleep(1)
                鼠标移动到指定距离(686 + 随机整数3, 462 + 随机整数3, 1)
                time.sleep(0.8)
                打开或关闭地图()
                time.sleep(0.3 + 随机小数0)
                鼠标移动到指定距离(330, 313, 1)
                time.sleep(0.3 + 随机小数0)
                打开或关闭地图()
            elif 场景点Y坐标 > 10:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(162 + 随机整数3, 507 + 随机整数3, 1)
                    time.sleep(0.3 + 随机小数0)
                    打开或关闭地图()
        elif "大" in 场景文本 and "外" in 场景文本:
            if 场景点Y坐标 < 107 and 场景点X坐标 < 230:
                if 目标没移动:
                    打开或关闭地图()
                    time.sleep(0.3 + 随机小数0)
                    鼠标移动到指定距离(323, 313, 1)
                    time.sleep(0.3 + 随机小数0)
                    打开或关闭地图()
            elif 场景点Y坐标 >= 107 and 场景点X坐标 > 230 and 目标没移动:
                pyautogui.press('f9')
                鼠标移动到指定距离(406 - (场景点X坐标 - 238) * 20, 190, 1)
                time.sleep(0.3 + 随机小数0)
                鼠标移动到指定距离(208, 396, 1)
                time.sleep(0.7 + 随机小数0)
                目标没移动 = True
                墨家村当地前往命令()
    elif "麒" in 挖宝地点 or "麟" in 挖宝地点:
        if not "朱" in 场景文本:
            print("正在前往麒麟山")
            使用快捷键打开飞行符()
            time.sleep(0.2 + 随机小数0)
            点击朱紫国飞行点()
            time.sleep(0.4 + 随机小数0)
            打开或关闭地图()
            time.sleep(0.4 + 随机小数0)
            鼠标移动到指定距离(160, 255, 1)
            time.sleep(0.4 + 随机小数0)
            打开或关闭地图()
        elif "朱" in 场景文本:
            if 场景点X坐标 > 8 and 目标没移动:
                打开或关闭地图()
                time.sleep(0.4 + 随机小数0)
                鼠标移动到指定距离(160, 255, 1)
                time.sleep(0.4 + 随机小数0)
                打开或关闭地图()

            elif 场景点X坐标 <= 8:
                鼠标移动到指定距离(30, 162, 1)
                time.sleep(0.4 + 随机小数0)
                pyautogui.click()
                pyautogui.move(100, 0)
                time.sleep(0.4 + 随机小数0)
                目标没移动 = True
                麒麟山当地前往命令()
    elif "境外" in 挖宝地点:
        print("正在前往大唐境外")
        if not "国境" in 场景文本 and not "境外" in 场景文本:
            已到国境 = 长安驿站路口前往命令()
            if 已到国境:
                time.sleep(0.3)
                打开或关闭地图()
                鼠标移动到指定距离(187, 473, 1)
                打开或关闭地图()
        if "境" in 场景文本 and not "外" in 场景文本:
            if 场景点X坐标 > 15 and 目标没移动:
                打开或关闭地图()
                鼠标移动到指定距离(187, 473, 1)
                打开或关闭地图()
            elif 场景点X坐标 < 15 and 70 < 场景点Y坐标 < 78:
                鼠标移动到指定距离(70 + 随机整数3, 300 + 随机整数3, 1)
                time.sleep(1 + 随机小数0)
                目标没移动 = True
                大唐境外当地前往命令()
    elif "五庄" in 挖宝地点 or "庄观" in 挖宝地点:
        print("正在前往五庄观")
        if not "国境" in 场景文本 and not "外" in 场景文本:
            已到国境 = 长安驿站路口前往命令()
            if 已到国境:
                time.sleep(0.3)
                打开或关闭地图()
                鼠标移动到指定距离(187, 473, 1)
                打开或关闭地图()
        elif "国境" in 场景文本:
            if 场景点X坐标 > 15 and 目标没移动:
                打开或关闭地图()
                time.sleep(0.2 + 随机小数0)
                鼠标移动到指定距离(187, 473, 1)
                time.sleep(0.2 + 随机小数0)
                打开或关闭地图()
            elif 场景点X坐标 < 15:
                鼠标移动到指定距离(70 + 随机整数3, 300 + 随机整数3, 1)
                time.sleep(1.3 + 随机小数0)
                鼠标移动到指定距离(440 + 随机整数3, 540 + 随机整数3, 1)
                time.sleep(0.3 + 随机小数0)
        elif "外" in 场景文本:
            if 85 > 场景点Y坐标 > 70 and 640 > 场景点X坐标 > 625:
                鼠标移动到指定距离(755, 250, 1)
                time.sleep(2 + 随机小数0)
                目标没移动 = True
                五庄观当地前往命令()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    time.sleep(0.3 + 随机小数0)
                    出口钩子模板匹配()
                    鼠标移动到指定距离(682, 350, 1)
                    time.sleep(0.4 + 随机小数0)
                    打开或关闭地图()


    elif "朱" in 挖宝地点 or "紫" in 挖宝地点:
        使用快捷键打开飞行符()
        time.sleep(0.3 + 随机小数0)
        点击朱紫国飞行点()
        time.sleep(0.3 + 随机小数0)
        目标没移动 = True
        朱紫国当地前往命令()
    elif "花果" in 挖宝地点 or "果山" in 挖宝地点:
        打开或关闭背包()
        打开傲来国飞行旗()
        点击花果山路口()
        打开或关闭背包()
        鼠标移动到指定距离(700, 145, 4)
        pyautogui.move(60, 10)
        pyautogui.click()
        time.sleep(1 + 随机小数0)
        鼠标移动到指定距离(520 + 随机整数5, 200 + 随机整数5, 1)
        目标没移动 = True
        花果山当地前往命令()
    elif "女儿" in 挖宝地点:
        print("正在前往女儿村")
        打开或关闭背包()
        打开傲来国飞行旗()
        time.sleep(0.3 + 随机小数0)
        点击女儿村路口()
        time.sleep(0.3 + 随机小数0)
        打开或关闭背包()
        鼠标移动到指定距离(70, 285 + 随机整数5, 1)
        time.sleep(1 + 随机小数0)
        目标没移动 = True
        女儿村当地前往命令()
    elif "狮驼" in 挖宝地点 or "驼岭" in 挖宝地点:
        print("正在前往 狮驼岭")
        if not "朱" in 场景文本:
            使用快捷键打开飞行符()
            点击朱紫国飞行点()
            time.sleep(0.3 + 随机小数0)
            打开或关闭地图()
            time.sleep(0.3 + 随机小数0)
            鼠标移动到指定距离(160 + 随机整数3 + 50, 507 + 随机整数3, 4)
            pyautogui.click()
            pyautogui.move(-50, 0, 0.3)
            pyautogui.click()
            time.sleep(0.3 + 随机小数0)
            打开或关闭地图()
        elif "朱" in 场景文本:
            if 场景点Y坐标 < 10:
                鼠标移动到指定距离(35, 570, 1)
                已进入 = 场景切换判断('唐境外')
                if 已进入:
                    time.sleep(0.2)
                    pyautogui.click()
                    time.sleep(2.8 + 随机小数0)
                    已进入 = 场景切换判断('狮驼岭')
                    if 已进入:
                        pyautogui.click()
                        目标没移动 = True
                        狮驼岭当地前往命令()
            elif 场景点Y坐标 > 10 and 目标没移动:
                打开或关闭地图()
                time.sleep(0.3 + 随机小数0)
                鼠标移动到指定距离(160 + 随机整数3 + 50, 507 + 随机整数3, 4)
                pyautogui.click()
                pyautogui.move(-50, 0, 0.3)
                pyautogui.click()
                time.sleep(0.3 + 随机小数0)
                打开或关闭地图()
    else:
        print("没有识别出任何地点..")
        # 点击人物中心(随机整数50, 随机整数50+50)
    # 条件判断 识别任务地点前往


def 目标前往命令():
    global 目标点X坐标, 目标点Y坐标
    global 场景点X坐标
    global 场景点Y坐标
    global 场景文本
    global 任务文本
    global 目标没移动
    if 任务点Y坐标 < 0 :
        print('任务点坐标识别错误')
        if 目标没移动:
            点击人物中心(随机整数50*2, abs(随机整数50)*2)
        任务文本 = []
    elif ("傲" in 任务文本 or "来国" in 任务文本 or "米国" in 任务文本) and (
            "傲" in 场景文本 or "来国" in 场景文本 or "米国" in 场景文本):
        傲来国当地前往命令()
    elif ("陀" in 任务文本 or "普" in 任务文本) and ("陀" in 场景文本 or "普" in 场景文本):
        普陀山当地前往命令()
    elif ("朱紫" in 任务文本 or "紫国" in 任务文本) and "朱紫" in 场景文本:
        朱紫国当地前往命令()
    elif "魔王" in 任务文本 and "魔王" in 场景文本:
        魔王寨当地前往命令()
    elif "家村" in 任务文本 and "家村" in 场景文本:
        墨家村当地前往命令()
    elif "长寿村" in 任务文本 and "长寿村" in 场景文本:
        长寿村当地前往命令()
    elif ("外" in 任务文本 or "郊" in 任务文本) and ("长" in 场景文本 and "外" in 场景文本) and not "境" in 场景文本:
        长寿郊外当地前往命令()
    elif "北俱" in 任务文本 and "北俱" in 场景文本:
        北俱芦洲当地前往命令()
    elif (("女" in 任务文本 or "儿" in 任务文本) and "村" in 任务文本) and ("女" in 场景文本 and "儿" in 场景文本):
        女儿村当地前往命令()
    elif "宝象" in 任务文本 and "宝象" in 场景文本:
        宝象国当地前往命令()
    elif ("地" in 任务文本 or "府" in 任务文本) and ("府" in 场景文本 or "地" in 场景文本):
        地府当地前往命令()
    elif "五庄" in 任务文本 and "五庄" in 场景文本:
        五庄观当地前往命令()
    elif "外" in 任务文本 and "外" in 场景文本 and not "寿" in 场景文本 and not "野" in 场景文本:
        大唐境外当地前往命令()
    elif (
            "国境" in 任务文本 or "唐国" in 任务文本 or "玉境" in 任务文本 or "唐玉" in 任务文本 or "面境" in 任务文本) and "国境" in 场景文本:
        大唐国境当地前往命令()
    elif "方寸" in 任务文本 and "方寸" in 场景文本:
        方寸山当地前往命令()
    elif "果" in 任务文本 and "花果" in 场景文本:
        花果山当地前往命令()
    elif ("化" in 任务文本 and "寺" in 任务文本) and "化生寺" in 场景文本:
        化生寺当地前往命令()
    elif ("东海" in 任务文本 or "海湾" in 任务文本) and "东海" in 场景文本:
        东海湾当地前往命令()
    elif ("西梁" in 任务文本 or "女国" in 任务文本 or "梁女" in 任务文本) and (
            "西梁" in 场景文本 or "女国" in 场景文本 or "梁女" in 场景文本):
        西梁女国当地前往命令()
    elif ("建" in 任务文本 or "业" in 任务文本) and "建" in 场景文本:
        建邺城当地前往命令()
    elif "岭" in 任务文本 and "岭" in 场景文本:
        狮驼岭当地前往命令()
    elif ("南野" in 任务文本 or "野外" in 任务文本 or "江南" in 任务文本) and (
            "野外" in 场景文本 or "江南" in 场景文本):
        江南野外当地前往命令()
    elif "西梁" in 任务文本 or "女国" in 任务文本 or "梁女" in 任务文本:
        使用快捷键打开飞行符()
        点击西梁女国飞行点()
        time.sleep(1)
        目标没移动 = True
        西梁女国当地前往命令()
    elif "宝象" in 任务文本:
        使用快捷键打开飞行符()
        点击宝象国飞行点()
        time.sleep(2 + 随机小数0)
    elif "东海" in 任务文本 or "海湾" in 任务文本:
        if not "傲来国" in 场景文本:
            打开或关闭背包()
            打开傲来国飞行旗()
            time.sleep(0.3)
            点击东海湾路口()
            打开或关闭背包()
            已进入 = 场景切换判断('傲来国')
            if 已进入:
                点击东海湾传送人()
                鼠标移动到指定距离(243, 394, 4)
                驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 驿站:
                    pyautogui.click()
                    time.sleep(0.4)
                    目标没移动 = True
                    东海湾当地前往命令()
    elif "北俱" in 任务文本:
        if not "花果山" in 场景文本:
            打开或关闭背包()
            打开傲来国飞行旗()
            点击花果山路口()
            打开或关闭背包()
            鼠标移动到指定距离(700, 140, 4)
            pyautogui.move(60, 10)
            pyautogui.click()
            time.sleep(1)
            打开或关闭地图()
            鼠标移动到指定距离(260, 300, 1)
            打开或关闭地图()
            场景窗口文本识别()
        if "花果山" in 场景文本  and 目标没移动 :
            if 102 > 场景点Y坐标 > 90 and 35 > 场景点X坐标 > 30:
                pyautogui.press('f9')
                鼠标移动到指定距离(406 - (场景点X坐标 - 28) * 20, 310 + (场景点Y坐标 - 97) * 20, 1)
                鼠标移动到指定距离(243, 394, 4)
                驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 驿站:
                    pyautogui.click()
                    time.sleep(0.5 + 随机小数0)
                    目标没移动 = True
                    北俱芦洲当地前往命令()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(260, 300, 1)
                    打开或关闭地图()
    elif "郊外" in 任务文本 or "寿郊" in 任务文本:
        打开或关闭背包()
        打开长寿村飞行旗()
        time.sleep(0.1 + 随机小数0)
        点击长寿郊外路口()
        打开或关闭背包()
        time.sleep(0.2 + 随机小数0)
        pyautogui.move(100, 60)
        pyautogui.click()
        time.sleep(1 + 随机小数0)
        pyautogui.move(-400, 0)
        pyautogui.click()
        目标没移动 = True
        长寿郊外当地前往命令()
    elif "寿村" in 任务文本:
        if 任务点X坐标 < 60 and 任务点Y坐标 <= 90:
            打开或关闭背包()
            打开长寿村飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(333, 475, 1, 红点=True)
            打开或关闭背包()
        elif 任务点X坐标 < 60 and 150 < 任务点Y坐标:
            打开或关闭背包()
            打开长寿村飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(338, 237, 1, 红点=True)
            打开或关闭背包()
        elif 任务点X坐标 >= 60 and 任务点Y坐标 > 150:
            打开或关闭背包()
            打开长寿村飞行旗()
            time.sleep(0.3)
            点击方寸山路口()
            打开或关闭背包()
        elif 任务点X坐标 >= 60 and 90 < 任务点Y坐标 < 150:
            打开或关闭背包()
            打开长寿村飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(478, 352, 1, 红点=True)
            打开或关闭背包()
        elif 任务点X坐标 >= 60 and 任务点Y坐标 < 40:
            打开或关闭背包()
            打开长寿村飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(513, 524, 1, 红点=True)
            打开或关闭背包()
        else:
            使用快捷键打开飞行符()
            点击长寿村飞行点()
        time.sleep(0.5)
        目标没移动 = True
        长寿村当地前往命令()
    elif "国境" in 任务文本 or "唐国" in 任务文本 or "玉境" in 任务文本 or "唐玉" in 任务文本 or "田境" in 任务文本:
        print('正在前往国境')
        if 任务点X坐标 < 150 and 任务点Y坐标 > 80:  # 往驿站方向走
            print('正在前往国境222')
            if 场景点X坐标 < 270 or 场景点X坐标 > 290 and not "长安城" in 场景文本:
                print('正在前往国境333')
                国境 = 长安驿站路口前往命令()
                if 国境:
                    目标没移动 = True
                    大唐国境当地前往命令()
            elif 场景点X坐标 > 290 or 场景点X坐标 < 270 and "长安" in 场景文本:
                print('位置错误')
        else:
            打开或关闭背包()
            打开长安飞行旗()
            time.sleep(0.3 + 随机小数0)
            点击大唐国境路口()
            time.sleep(0.1 + 随机小数0)
            打开或关闭背包()
            time.sleep(0.1 + 随机小数0)
            鼠标移动到指定距离(70, 590, 1)
            time.sleep(1)
            pyautogui.click()
            time.sleep(0.5)
            pyautogui.click()
            目标没移动 = True
            大唐国境当地前往命令()
    elif ("普陀" in 任务文本 or "陀山" in 任务文本) and "国境" in 场景文本:
        if not "普" in 场景文本 and not "国境" in 场景文本 and not '陀' in 场景文本:
            打开或关闭背包()
            打开长安飞行旗()
            time.sleep(0.3 + 随机小数0)
            点击大唐国境路口()
            time.sleep(0.1 + 随机小数0)
            打开或关闭背包()
            time.sleep(0.1 + 随机小数0)
            鼠标移动到指定距离(70, 590, 1)
            pyautogui.click()
            time.sleep(0.8 + 随机小数0)
            打开或关闭地图()
            time.sleep(0.3)
            点击普陀山路口()
            出口钩子模板匹配()
            打开或关闭地图()
        elif "国境" in 场景文本:
            if 场景点Y坐标 < 62 and 目标没移动:
                隐藏人物()
                鼠标移动到指定距离(406 - (场景点X坐标 - 221) * 20, 310 + (场景点Y坐标 - 60) * 20, 1)
                鼠标移动到指定距离(243, 394, 4)
                驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 驿站:
                    pyautogui.click()
                    time.sleep(0.4 + 随机小数0)
                    目标没移动 = True
                    普陀山当地前往命令()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    time.sleep(0.3)
                    点击普陀山路口()
                    打开或关闭地图()
    elif "傲" in 任务文本 or "来国" in 任务文本 or "米国" in 任务文本:
        if 任务点X坐标 <= 100 and 任务点Y坐标 >= 70:
            打开或关闭背包()
            打开傲来国飞行旗()
            time.sleep(0.3)
            点击女儿村路口()
            打开或关闭背包()
        elif 任务点X坐标 <= 90 and 任务点Y坐标 <= 70:
            打开或关闭背包()
            打开傲来国飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(283, 447, 1, 红点=True)
            打开或关闭背包()
        elif 任务点X坐标 >= 120 and 任务点Y坐标 <= 50:
            打开或关闭背包()
            打开傲来国飞行旗()
            time.sleep(0.3)
            点击东海湾路口()
            打开或关闭背包()
        elif 任务点X坐标 >= 170 and 任务点Y坐标 > 100:
            打开或关闭背包()
            打开傲来国飞行旗()
            time.sleep(0.3)
            点击花果山路口()
            打开或关闭背包()
        elif 任务点X坐标 >= 135 and 50 <= 任务点Y坐标 <= 85:
            打开或关闭背包()
            打开傲来国飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(555, 357, 1, 红点=True)
            打开或关闭背包()
        else:
            使用快捷键打开飞行符()
            点击傲来国飞行点()
        time.sleep(0.5)
        目标没移动 = True
        傲来国当地前往命令()
    elif "朱紫" in 任务文本 or "紫国" in 任务文本:
        if 任务点X坐标 <= 50 and 任务点Y坐标 >= 42:
            打开或关闭背包()
            打开朱紫国飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(200, 244, 1, 红点=True)
            打开或关闭背包()
        elif 任务点X坐标 <= 50 and 任务点Y坐标 < 42:
            打开或关闭背包()
            打开朱紫国飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(200, 484, 1, 红点=True)
            打开或关闭背包()
        elif 50 < 任务点X坐标 <= 112 and 任务点Y坐标 >= 80:
            打开或关闭背包()
            打开朱紫国飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(380, 262, 1, 红点=True)
            打开或关闭背包()
        elif 50 < 任务点X坐标 <= 112 and 任务点Y坐标 <= 50:
            打开或关闭背包()
            打开朱紫国飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(370, 470, 1, 红点=True)
            打开或关闭背包()
        elif 任务点X坐标 > 112 and 任务点Y坐标 < 50:
            打开或关闭背包()
            打开朱紫国飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(542, 460, 1, 红点=True)
            打开或关闭背包()
        else:
            使用快捷键打开飞行符()
            点击朱紫国飞行点()
        time.sleep(0.5)
        目标没移动 = True
        朱紫国当地前往命令()
    elif "花果" in 任务文本 or "果山" in 任务文本:
        打开或关闭背包()
        打开傲来国飞行旗()
        点击花果山路口()
        打开或关闭背包()
        鼠标移动到指定距离(700, 145, 4)
        pyautogui.move(60, 10)
        pyautogui.click()
        time.sleep(1)
        pyautogui.click()
        time.sleep(0.5)
        pyautogui.click()
        目标没移动 = True
        花果山当地前往命令()
    elif ("女" in 任务文本 and "儿" in 任务文本) and "村" in 任务文本:
        打开或关闭背包()
        打开傲来国飞行旗()
        time.sleep(0.2 + 随机小数0)
        点击女儿村路口()
        打开或关闭背包()
        鼠标移动到指定距离(60, 160, 1)
        time.sleep(1)
        pyautogui.click()
        time.sleep(0.7)
        pyautogui.click()
        time.sleep(0.5)
        pyautogui.click()
        目标没移动 = True
        女儿村当地前往命令()
    elif "化" in 任务文本 and "寺" in 任务文本:
        打开或关闭背包()
        打开化生寺飞行旗()
        鼠标移动到指定距离(634, 223, 1, 红点=True)
        打开或关闭背包()
        time.sleep(0.2 + 随机小数0)
        pyautogui.move(-70, -100)
        pyautogui.click()
        time.sleep(0.7 + 随机小数0)
        pyautogui.click()
        time.sleep(0.7 + 随机小数0)
        目标没移动 = True
        化生寺当地前往命令()
    elif "陀山" in 任务文本:
        if 这个号的门派 == "普陀山":
            pyautogui.press('f2')
            time.sleep(0.7)
            目标没移动 = True
            普陀山当地前往命令()
        else:
            打开或关闭背包()
            打开长安飞行旗()
            time.sleep(0.4 + 随机小数0)
            点击大唐国境路口()
            time.sleep(0.1 + 随机小数0)
            打开或关闭背包()
            time.sleep(0.1 + 随机小数0)
            鼠标移动到指定距离(70, 590, 1)
            time.sleep(0.7 + 随机小数0)
            pyautogui.click()
            打开或关闭地图()
            time.sleep(0.3)
            点击普陀山路口()
            time.sleep(0.3)
            打开或关闭地图()
    elif "岭" in 任务文本:
        打开或关闭背包()
        打开朱紫国飞行旗()
        time.sleep(0.2 + 随机小数0)
        点击大唐境外路口()
        打开或关闭背包()
        time.sleep(0.2 + 随机小数0)
        鼠标移动到指定距离(35, 570, 1)
        已进入 = 场景切换判断('唐境外')
        if 已进入:
            time.sleep(0.2)
            pyautogui.click()
            time.sleep( 2.8+ 随机小数0)
            已进入 = 场景切换判断('狮驼岭')
            if 已进入:
                pyautogui.click()
                目标没移动 = True
                狮驼岭当地前往命令()
    elif "府" in 任务文本 and "地" in 任务文本:
        print('正在前往地府')
        if not "国境" in 场景文本 and not '地' in 场景文本:
            国境已到 = 长安驿站路口前往命令()
            if 国境已到:
                打开或关闭地图()
                出口钩子模板匹配()
                time.sleep(随机小数0)
                打开或关闭地图()
        elif "国境" in 场景文本:
            if 场景点Y坐标 > 317 and 45 < 场景点X坐标 < 53:
                鼠标移动到指定距离(360, 160, 1)
                目标没移动 = True
                time.sleep(1)
                pyautogui.click()
                time.sleep(0.5)
                pyautogui.click()
                地府当地前往命令()
                目标没移动 = False
            else:
                if 目标没移动:
                    打开或关闭地图()
                    出口钩子模板匹配()
                    鼠标移动到指定距离(237+随机整数1, 201+随机整数1, 1)
                    打开或关闭地图()
    elif "邺" in 任务文本 or "建" in 任务文本 or "业" in 任务文本:
        使用快捷键打开飞行符()
        点击建邺城飞行点()
        time.sleep(0.7 + 随机小数0)
        目标没移动 = True
        建邺城当地前往命令()
    elif "唐" in 任务文本 and "外" in 任务文本:
        if 任务点X坐标 < 492:
            打开或关闭背包()
            打开朱紫国飞行旗()
            点击大唐境外路口()
            打开或关闭背包()
            鼠标移动到指定距离(35, 570, 1)
            time.sleep(0.7 + 随机小数0)
            pyautogui.click()
            time.sleep(0.5 + 随机小数0)
            目标没移动 = True
            大唐境外当地前往命令()
        elif 任务点X坐标 >= 492:
            if not "国境" in 场景文本 and not "境外" in 场景文本:
                已到国境 = 长安驿站路口前往命令()
                if 已到国境:
                    time.sleep(0.3)
                    打开或关闭地图()
                    鼠标移动到指定距离(187, 477, 1)
                    打开或关闭地图()
            if "国境" in 场景文本:
                if 场景点X坐标 > 15 and 目标没移动:
                    打开或关闭地图
                    鼠标移动到指定距离(187, 473, 1)
                    打开或关闭地图()
                elif 场景点X坐标 < 15:
                    鼠标移动到指定距离(70 + 随机整数3, 300 + 随机整数3, 1)
                    time.sleep(1 + 随机小数0)
                    目标没移动 = True
                    大唐境外当地前往命令()
    elif "南野" in 任务文本 or "野外" in 任务文本 or "江南" in 任务文本:
        打开或关闭背包()
        打开长安飞行旗()
        time.sleep(0.3)
        点击江南野外路口()
        打开或关闭背包()
        time.sleep(0.3)
        pyautogui.move(50, 80)
        pyautogui.click()
        time.sleep(1)
        pyautogui.click()
        time.sleep(0.7)
        pyautogui.click()
        目标没移动 = True
        江南野外当地前往命令()
    else:
        print("没有识别出任何地点..2")
        任务文本 = []
        if 目标没移动:
            点击人物中心(随机整数50+2, abs(随机整数50)+2)
            print('没有识别到押镖地点')
    # if 目标没移动:
    #     框关闭函数()


def 示威前往():
    global 任务文本
    场景窗口文本识别()
    if '地' in 任务文本 and '府' in 任务文本:
        if ('地' in 场景文本 or '府' in 场景文本) and not '程咬官' in 场景文本:
            地府当地任务寻找()
        elif "国境" in 场景文本:
            if 场景点Y坐标 > 317:
                鼠标移动到指定距离(360, 160, 1)
                time.sleep(1)
                地府当地任务寻找()
            elif 场景点Y坐标 < 310 and 目标没移动:
                打开或关闭地图()
                出口钩子模板匹配()
                鼠标移动到指定距离(237 + 随机整数1, 201 + 随机整数1, 1)
                打开或关闭地图()
        else:
            国境已到 = 长安驿站路口前往命令()
            if 国境已到:
                打开或关闭地图()
                出口钩子模板匹配()
                鼠标移动到指定距离(237 + 随机整数1, 201 + 随机整数1, 1)
                打开或关闭地图()
    elif '狮' in 任务文本 and '驼' in 任务文本:
        if not "狮" in 场景文本 or not "驼" in 场景文本:
            打开或关闭背包()
            打开朱紫国飞行旗()
            time.sleep(0.2 + 随机小数0)
            点击大唐境外路口()
            打开或关闭背包()
            time.sleep(0.2 + 随机小数0)
            鼠标移动到指定距离(35, 570, 1)
            已进入 = 场景切换判断('唐境外')
            if 已进入:
                time.sleep(0.2)
                pyautogui.click()
                time.sleep(3.5)
                已进入=场景切换判断('狮驼岭')
                if 已进入:
                    狮驼岭当地任务寻找()
        elif "狮" in 场景文本 or "驼" in 场景文本:
            狮驼岭当地任务寻找()
    elif "示威" in 任务文本 and "庄" in 任务文本:
        print("正在前往五庄观")
        if not "国境" in 场景文本 and not "外" in 场景文本 and not "五" in 场景文本:
            已到国境 = 长安驿站路口前往命令()
            if 已到国境:
                time.sleep(0.3)
                打开或关闭地图()
                鼠标移动到指定距离(187, 477, 1)
                打开或关闭地图()
        if "国境" in 场景文本:
            if 场景点X坐标 > 15 and 目标没移动:
                打开或关闭地图()
                鼠标移动到指定距离(187, 473, 1)
                打开或关闭地图()
            elif 场景点X坐标 < 18:
                鼠标移动到指定距离(70 + 随机整数3, 300 + 随机整数3, 1)
                time.sleep(1.3 + 随机小数0)
                打开或关闭地图()
                time.sleep(0.3 + 随机小数0)
                鼠标移动到指定距离(688, 355, 1)
                出口钩子模板匹配()
                time.sleep(0.4 + 随机小数0)
                打开或关闭地图()
        elif "外" in 场景文本:
            if 85 > 场景点Y坐标 > 70 and 640 > 场景点X坐标 > 625:
                鼠标移动到指定距离(755, 250, 1)
                time.sleep(1)
                已进入 = 场景切换判断('五庄观')
                if 已进入:
                    五庄观当地任务寻找()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    time.sleep(0.3 + 随机小数0)
                    鼠标移动到指定距离(688, 350, 1)
                    出口钩子模板匹配()
                    time.sleep(0.4 + 随机小数0)
                    打开或关闭地图()
        elif "五" in 场景文本 and "庄" in 场景文本:
            五庄观当地任务寻找()
    elif '盘' in 任务文本 and '丝' in 任务文本:
        if not "境外" in 场景文本  and (not "盘丝" in 场景文本 or not "丝岭" in 场景文本) and not "国境" in 场景文本:
            已到国境 = 长安驿站路口前往命令()
            if 已到国境:
                time.sleep(0.3)
                打开或关闭地图()
                鼠标移动到指定距离(187, 477, 1)
                打开或关闭地图()
            场景窗口文本识别()
        if "国境" in 场景文本 :
            if 场景点X坐标 > 15 and 目标没移动:
                打开或关闭地图()
                time.sleep(0.2 + 随机小数0)
                鼠标移动到指定距离(187, 473, 1)
                time.sleep(0.2 + 随机小数0)
                打开或关闭地图()
            elif 场景点X坐标 < 18:
                鼠标移动到指定距离(70 + 随机整数3, 300 + 随机整数3, 1)
                time.sleep(1.7 + 随机小数0)
                打开或关闭地图()
                time.sleep(0.3 + 随机小数0)
                鼠标移动到指定距离(596, 315, 1)
                出口钩子模板匹配()
                time.sleep(0.4 + 随机小数0)
                打开或关闭地图()
        elif "境外" in 场景文本:
            if 场景点Y坐标 > 110 and 540 > 场景点X坐标 > 520:
                鼠标移动到指定距离(326, 78, 1)
                已进入 = 场景切换判断('盘丝岭')
                if 已进入:
                    盘丝岭当地任务寻找()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    time.sleep(0.3 + 随机小数0)
                    鼠标移动到指定距离(596, 315, 1)
                    出口钩子模板匹配()
                    time.sleep(0.4 + 随机小数0)
                    打开或关闭地图()
        elif "盘丝" in 场景文本 or "丝岭" in 场景文本:
            盘丝岭当地任务寻找()
    elif '龙' in 任务文本 and '宫' in 任务文本:
        if not "龙" in 场景文本 and not "东海" in 场景文本 and not "海湾" in 场景文本:
            打开或关闭背包()
            打开傲来国飞行旗()
            点击东海湾路口()
            打开或关闭背包()
            time.sleep(1)
            场景窗口文本识别()
            鼠标移动到指定距离(406 - (场景点X坐标 - 168) * 20, 310 + (场景点Y坐标 - 15) * 20, 1)
            鼠标移动到指定距离(205, 396, 1)
            time.sleep(0.8)
            打开或关闭地图()
            鼠标移动到指定距离(490, 308, 1)
            打开或关闭地图()
        elif "东海" in 场景文本 or "海湾" in 场景文本:
            if 场景点X坐标 > 109 and 目标没移动:
                隐藏人物()
                鼠标移动到指定距离(676, 310 + (场景点Y坐标 - 88) * 20, 1)
                鼠标移动到指定距离(243, 394, 4)
                驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 驿站:
                    pyautogui.click()
                    time.sleep(0.7)
                    龙宫当地任务寻找()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(490, 308, 1)
                    打开或关闭地图()
        elif '龙' in 场景文本 and '宫' in 场景文本:
            龙宫当地任务寻找()
    elif ('天' in 任务文本 or '大' in 任务文本) and '宫' in 任务文本:
        if not "郊" in 场景文本 and not "外" in 场景文本 and (not "天" in 场景文本 or not "宫" in 场景文本):
            打开或关闭背包()
            打开长寿村飞行旗()
            time.sleep(0.1 + 随机小数0)
            点击长寿郊外路口()
            time.sleep(0.1 + 随机小数0)
            打开或关闭背包()
            pyautogui.move(100, 60)
            pyautogui.click()
            time.sleep(1 + 随机小数0)
            打开或关闭地图()
            time.sleep(0.2 + 随机小数0)
            鼠标移动到指定距离(245, 426, 1)
            time.sleep(0.2 + 随机小数0)
            打开或关闭地图()
        elif "郊" in 场景文本 or "外" in 场景文本:
            if 场景点X坐标 > 25 and 目标没移动:
                打开或关闭地图()
                time.sleep(0.2 + 随机小数0)
                鼠标移动到指定距离(245, 426, 1)
                time.sleep(0.2 + 随机小数0)
                打开或关闭地图()
            elif 场景点X坐标 <= 25 and 目标没移动:
                隐藏人物()
                鼠标移动到指定距离(406 - (场景点X坐标 - 21) * 20, 310 + (场景点Y坐标 - 58) * 20, 1)
                鼠标移动到指定距离(243, 394, 4)
                驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 驿站:
                    pyautogui.click()
                    time.sleep(0.7)
                    天宫当地任务寻找()
        elif "天" in 场景文本 or "宫" in 场景文本:
            天宫当地任务寻找()
    elif '神' in 任务文本 and '木' in 任务文本:
        if not "神木林" in 场景文本 and not "战神山" in 场景文本:
            if not '长安' in 场景文本:
                打开或关闭背包()
                打开长安飞行旗()
                鼠标移动到指定距离(405, 455, 1, 红点=True)
                打开或关闭背包()
                time.sleep(0.4 + 随机小数0)
                打开或关闭地图()
                鼠标移动到指定距离(473, 430, 1)
                打开或关闭地图()
                场景窗口文本识别()
            if '长安' in 场景文本 and 目标没移动:
                if 340 < 场景点X坐标 < 350:
                    隐藏人物()
                    pyautogui.hotkey('alt', 'h')
                    鼠标移动到指定距离(406 - (场景点X坐标 - 350) * 20, 310 + (场景点Y坐标 - 73) * 20, 1)
                    for i in range(7):
                        战神山 = 单个模板匹配(160, 390, 300, 470, 'zss.png')
                        if 战神山:
                            鼠标移动到指定距离(208, 436, 1)
                            time.sleep(0.4 + 随机小数0)
                            打开或关闭地图()
                            鼠标移动到指定距离(226, 480, 1)
                            打开或关闭地图()
                            break
                        else:
                            time.sleep(0.3)
                else:
                    if 目标没移动:
                        打开或关闭地图()
                        鼠标移动到指定距离(473, 430, 1)
                        打开或关闭地图()
        elif "战神山" in 场景文本:
            if 场景点Y坐标 > 38 and 场景点X坐标 < 18:
                鼠标移动到指定距离(250, 310 + (场景点Y坐标 - 43) * 20, 1)
                已进入 = 场景切换判断('神木林')
                if 已进入:
                    神木林当地任务寻找()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(226, 480, 1)
                    打开或关闭地图()
        elif "神木" in 场景文本 or "木林" in 场景文本:
            神木林当地任务寻找()
    elif '化' in 任务文本 and '生' in 任务文本:
        打开或关闭背包()
        打开化生寺飞行旗()
        鼠标移动到指定距离(634, 223, 1, 红点=True)
        打开或关闭背包()
        time.sleep(0.2 + 随机小数0)
        pyautogui.move(-70, -100)
        pyautogui.click()
        已进入 = 场景切换判断('化生寺')
        if 已进入:
            化生寺当地任务寻找()
    elif '凌' in 任务文本 and '波' in 任务文本:
        if not "长安" in 场景文本 and not "国境" in 场景文本 and not "凌波" in 场景文本:
            国境已到 = 长安驿站路口前往命令()
            if 国境已到:
                打开或关闭地图()
                出口钩子模板匹配()
                鼠标移动到指定距离(370, 280, 1)
                打开或关闭地图()
        elif "国境" in 场景文本:
            if 180>场景点X坐标 > 166 and 265>场景点Y坐标 > 253 and 目标没移动:
                time.sleep(0.4)
                隐藏人物()
                鼠标移动到指定距离(406 - (场景点X坐标 - 174) * 20, 310 + (场景点Y坐标 - 259) * 20, 1)
                鼠标移动到指定距离(205, 413, 1)
                已进入 = 场景切换判断('凌波城')
                if 已进入:
                    凌波城当地任务寻找()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    出口钩子模板匹配()
                    鼠标移动到指定距离(370, 280, 1)
                    打开或关闭地图()
        elif '凌' in 场景文本 and '波' in 场景文本:
            凌波城当地任务寻找()
    elif '花' in 任务文本 and '果' in 任务文本:
        if not "花果" in 场景文本 and not "幻境" in 场景文本:
            打开或关闭背包()
            打开傲来国飞行旗()
            点击花果山路口()
            打开或关闭背包()
            鼠标移动到指定距离(700, 140, 4)
            pyautogui.move(60, 10)
            pyautogui.click()
            time.sleep(1 + 随机小数0)
            pyautogui.click()
            打开或关闭地图()
            鼠标移动到指定距离(525, 482, 1)
            打开或关闭地图()
        elif "花果" in 场景文本:
            场景窗口文本识别()
            if 场景点X坐标 > 143:
                鼠标移动到指定距离(690, 385, 1)
                已进入 = 场景切换判断('幻境')
                if 已进入:
                    花果山当地任务寻找()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(525, 482, 1)
                    打开或关闭地图()
        elif "幻境" in 场景文本:
            花果山当地任务寻找()
    elif '魔' in 任务文本 and '王' in 任务文本:
        if not "境外" in 场景文本 and not "王" in 场景文本:
            打开或关闭背包()
            打开朱紫国飞行旗()
            点击大唐境外路口()
            time.sleep(0.2 + 随机小数0)
            打开或关闭背包()
            鼠标移动到指定距离(35, 570, 1)
            time.sleep(1 + 随机小数0)
            打开或关闭地图()
            鼠标移动到指定距离(167, 315, 1)
            打开或关闭地图()
        elif "境外" in 场景文本:
            场景窗口文本识别()
            if 场景点Y坐标 > 110 and 目标没移动:
                鼠标移动到指定距离(406 - (场景点X坐标 - 53) * 20, 92, 1)
                已进入 = 场景切换判断('魔王寨')
                if 已进入:
                    魔王寨当地任务寻找()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(167, 315, 1)
                    打开或关闭地图()
        elif "王赛" in 场景文本 or "王" in 场景文本:
            魔王寨当地任务寻找()
    elif ('天' in 任务文本 or '大' in 任务文本) and '机' in 任务文本:
        if not "大唐" in 场景文本 and not "机" in 场景文本:
            打开或关闭背包()
            打开朱紫国飞行旗()
            点击大唐境外路口()
            time.sleep(0.2 + 随机小数0)
            打开或关闭背包()
            鼠标移动到指定距离(35, 570, 1)
            time.sleep(1.2 + 随机小数0)
            pyautogui.click()
            打开或关闭地图()
            鼠标移动到指定距离(285, 414, 1)
            打开或关闭地图()
        elif "大唐" in 场景文本 or "境外" in 场景文本:
            场景窗口文本识别()
            if 场景点Y坐标 < 6 and 目标没移动:
                隐藏人物()
                鼠标移动到指定距离(406 - (场景点X坐标 - 190) * 20, 423, 1)
                鼠标移动到指定距离(222, 392, 1)
                已进入 = 场景切换判断('天机城')
                if 已进入:
                    天机城当地任务寻找()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(285, 414, 1, 0.25)
                    打开或关闭地图()
        elif ('天' in 场景文本 or '大' in 场景文本) and '机' in 场景文本:
            天机城当地任务寻找()
    elif '女' in 任务文本 and '儿' in 任务文本:
        if not "女" in 场景文本 and not "儿" in 场景文本:
            打开或关闭背包()
            打开傲来国飞行旗()
            time.sleep(0.3 + 随机小数0)
            点击女儿村路口()
            打开或关闭背包()
            time.sleep(0.3)
            鼠标移动到指定距离(50, 230, 1)
            已进入 = 场景切换判断('女儿村')
            if 已进入:
                女儿村当地任务寻找()
        elif "女" in 场景文本 and "儿" in 场景文本:
            女儿村当地任务寻找()
    elif '方' in 任务文本 and '寸' in 任务文本:
        if not "方" in 场景文本 and not "寸" in 场景文本:
            打开或关闭背包()
            打开长寿村飞行旗()
            time.sleep(0.3 + 随机小数0)
            鼠标移动到指定距离(450, 191, 1, 红点=True)
            打开或关闭背包()
            鼠标移动到指定距离(515, 72, 1)
            已进入 = 场景切换判断('方寸山')
            if 已进入:
                方寸山当地任务寻找()
        elif "方" in 场景文本 or "寸" in 场景文本:
            方寸山当地任务寻找()
    elif '女 ' in 任务文本 and not '儿' in 任务文本:
        if not "东海" in 场景文本 and not "女" in 场景文本:
            打开或关闭背包()
            打开傲来国飞行旗()
            点击东海湾路口()
            打开或关闭背包()
            time.sleep(0.5)
            YZ = 长安驿站路口前往命令(其他地方=True, 默认地点='来')
            if YZ:
                打开或关闭地图()
                鼠标移动到指定距离(415, 438, 1)
                打开或关闭地图()
                time.sleep(3.8)
        elif "东海" in 场景文本 and not "岩洞" in 场景文本:
            if 75 < 场景点X坐标 < 83 and 28 < 场景点Y坐标 < 34 and 目标没移动:
                隐藏人物()
                鼠标移动到指定距离(406 - (场景点X坐标 - 86) * 20, 310 + (场景点Y坐标 - 33) * 20, 1)
                鼠标移动到指定距离(307, 413, 4)
                岩洞路口 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 岩洞路口:
                    pyautogui.click()
                    time.sleep(0.7)
                    打开或关闭地图()
                    鼠标移动到指定距离(650, 293, 1)
                    打开或关闭地图()
            else:
                打开或关闭地图()
                鼠标移动到指定距离(415, 438, 1)
                打开或关闭地图()
                time.sleep(2.8)
        elif "东海" in 场景文本 or "岩洞" in 场景文本 and not "湾" in 场景文本:
            if 场景点X坐标 < 181 and 场景点Y坐标 < 67 and 目标没移动:
                打开或关闭地图()
                鼠标移动到指定距离(650, 293, 1)
                打开或关闭地图()
            else:
                if 目标没移动:
                    隐藏人物()
                    鼠标移动到指定距离(600, 310 + (场景点Y坐标 - 72) * 20, 1)
                    鼠标移动到指定距离(232, 392, 1)
                    time.sleep(0.7)
                    女魁当地任务寻找()
        elif "女" in 场景文本 or "墓" in 场景文本:
            女魁当地任务寻找()
    elif '普' in 任务文本 and '陀' in 任务文本:
        if not "普" in 场景文本 and not "国境" in 场景文本 and not '陀' in 场景文本:
            打开或关闭背包()
            打开长安飞行旗()
            time.sleep(0.3 + 随机小数0)
            点击大唐国境路口()
            time.sleep(0.1 + 随机小数0)
            打开或关闭背包()
            time.sleep(0.1 + 随机小数0)
            鼠标移动到指定距离(70, 590, 1)
            time.sleep(0.5 + 随机小数0)
            pyautogui.click()
            打开或关闭地图()
            出口钩子模板匹配()
            点击普陀山路口()
            打开或关闭地图()
        elif "国境" in 场景文本:
            if 场景点Y坐标 < 64 and 目标没移动:
                隐藏人物()
                鼠标移动到指定距离(406 - (场景点X坐标 - 221) * 20, 310 + (场景点Y坐标 - 60) * 20, 1)
                鼠标移动到指定距离(243, 394, 4)
                驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 驿站:
                    pyautogui.click()
                    time.sleep(0.7)
                    普陀山当地任务寻找()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    time.sleep(0.3)
                    点击普陀山路口()
                    打开或关闭地图()
        elif '普' in 场景文本 and '陀' in 场景文本:
            普陀山当地任务寻找()
    elif '大' in 任务文本 and '唐' in 任务文本:
        if not '大唐' in 场景文本 and not "长安" in 场景文本:
            使用快捷键打开飞行符()
            鼠标移动到指定距离(520, 358, 1)
            time.sleep(1)
            打开或关闭地图()
            time.sleep(0.3)
            鼠标移动到指定距离(444, 230, 1)
            打开或关闭地图()
        elif "长安" in 场景文本:
            if 场景点Y坐标 > 270:
                鼠标移动到指定距离(322, 97, 1)
                已进入 = 场景切换判断('大唐官府')
                if 已进入:
                    大唐当地任务寻找()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    time.sleep(0.3)
                    鼠标移动到指定距离(444, 230, 1)
                    打开或关闭地图()
        elif '大' in 场景文本 and '唐' in 场景文本:
            大唐当地任务寻找()
    elif '无' in 任务文本 and '底' in 任务文本:
        if not "无底" in 场景文本 and not "国" in 场景文本 and not "门派里面" in 场景文本 or 首次前往:
            使用快捷键打开飞行符()
            点击宝象国飞行点()
            time.sleep(0.2 + 随机小数0)
            打开或关闭地图()
            鼠标移动到指定距离(570, 530, 1)
            打开或关闭地图()
        elif "宝" in 场景文本 or "象国" in 场景文本:
            if 场景点X坐标 > 146:
                鼠标移动到指定距离(670, 518, 1)
                time.sleep(1 + 随机小数0)
                打开或关闭地图()
                鼠标移动到指定距离(335, 515, 1)
                打开或关闭地图()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(555, 510, 1)
                    鼠标移动到指定距离(570, 530, 1)
                    打开或关闭地图()
        elif "门派里面" in 场景文本:
            if 场景点X坐标 > 27 and 目标没移动:
                隐藏人物()
                鼠标移动到指定距离(406 - (场景点X坐标 - 26) * 20, 310 + (场景点Y坐标 - 17) * 20, 1)
                time.sleep(0.2 + 随机小数0)
                鼠标移动到指定距离(198, 392, 1)
                time.sleep(0.5 + 随机小数0)
                无底洞当地任务寻找()
            else:
                if 目标没移动:
                    打开或关闭地图()
                    鼠标移动到指定距离(335, 515, 1)
                    打开或关闭地图()
    else:
        print('示威地点没有识别出 来')
        任务文本 = []
        if 目标没移动:
            点击人物中心(随机整数50*2, abs(随机整数50)*2)
            print('没有识别到押镖地点')
    # if 目标没移动:
    #     框关闭函数()
    血量检测系统()

def 窗口句柄函数(输入窗口名称, 调整后的窗口位置X, 调整后的窗口位置Y, 窗口大小X, 窗口大小Y, 是否调整位置=False):
    窗口顶点坐标 = [0, 0]
    窗口左下角坐标 = [0, 0]
    找到窗口 = False  # 标识是否找到了输入窗口名称对应的窗口

    def callback(句柄, param):
        nonlocal 找到窗口
        if 输入窗口名称 in win32gui.GetWindowText(句柄):
            找到窗口 = True
            left, top, right, bottom = win32gui.GetWindowRect(句柄)
            print("窗口的宽：", right - left, "窗口的高：", bottom - top)
            窗口顶点坐标[0], 窗口顶点坐标[1] = left, top
            窗口左下角坐标[0], 窗口左下角坐标[1] = left, top + (bottom - top)  # 计算左下角坐标
            if 是否调整位置:
                win32gui.MoveWindow(句柄, 调整后的窗口位置X, 调整后的窗口位置Y, 窗口大小X, 窗口大小Y,
                                    False)  # 使用调整后的窗口位置和原始窗口尺寸

    win32gui.EnumWindows(callback, None)
    if not 找到窗口:
        print(f"未找到窗口名称为 {输入窗口名称} 的窗口")
    return 窗口顶点坐标[0], 窗口顶点坐标[1], 窗口左下角坐标[0], 窗口左下角坐标[1], 找到窗口


def 随机数载入():
    global 随机小数正负3
    global 随机小数0
    global 随机整数1
    global 随机整数3
    global 随机整数2
    global 随机整数5
    global 随机整数6
    global 随机整数10
    global 随机整数50
    global 随机整数100
    global 随机小数小
    随机小数正负3 = random.choice([-3, 3])
    随机小数0 = random.uniform(0.1, 0.3)  # 随机小数
    随机小数小 = random.uniform(0, 0.05)  # 随机小数
    随机整数1 = random.randint(-1, 1)  # 随机整数
    随机整数3 = random.randint(0, 3)  # 随机整数
    随机整数2 = random.randint(0, 2)  # 随机整数
    随机整数5 = random.randint(-5, 5)  # 随机整数
    随机整数6 = random.randint(-6, 6)  # 随机整数
    随机整数10 = random.randint(-10, 10)  # 随机整数
    随机整数50 = random.randint(-50, 50)  # 随机整数
    随机整数100 = random.randint(0, 100)  # 随机整数


def 出口钩子模板匹配():
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X, 顶点坐标Y, 顶点坐标X + 812, 顶点坐标Y + 663))
    窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    模板 = cv2.imread("muban/chukou.png")
    结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
    阈值 = 0.90
    位置 = np.where(结果 >= 阈值)
    # 查找模板匹配的位置
    if len(位置[0]) > 0 and len(位置[1]) > 0:
        模板中心X = int(位置[1][0] + 模板.shape[1] / 2)
        模板中心Y = int(位置[0][0] + 模板.shape[0] / 2)
        鼠标移动到指定距离(模板中心X, 模板中心Y, 1)


def 终止循环(event):
    global 终止按键
    if event.name == 'space':
        print("已暂停程序，按回车键继续")
        终止按键 = False
    elif event.name == 'enter':
        终止按键 = True
        print("已重新运行程序，按ESC可以暂停")
    elif event.name == 'esc':
        os.system(f'taskkill /f /im mygj.exe')
# ------------------------------------------
def 召唤兽所在页面识别(物品):
    if 物品 == '熊精' and 物品 in 指定窗口文本:
        print('找到:', 物品)
        index = 指定窗口文本.index('熊精')
        if 指定窗口文本[-1].isdigit():
            位置 = 指定窗口文本.index(物品)
            页数 = 指定窗口文本[位置 + 2]
            print("数字在后，召唤兽所在的页数是:", 页数)
        else:
            位置 = 指定窗口文本.index(物品)
            页数 = 指定窗口文本[位置 - 1]
            print("数字在前，召唤兽所在的页数是:", 页数)
        if 页数.isdigit():
            return 页数
        else:
            return None

    elif not 物品 == '熊精':
        for index, 字 in enumerate(指定窗口文本):
            if 物品 == '牛妖' or 物品 == '天将' or 物品 == '黑熊':
                A = 1
                B = 2
            elif 物品 == '虾兵' or 物品 == '蟹将' or 物品 == '白熊' or 物品 == '花妖':
                A = 0
                B = 1
            else:
                A = 0
                B = 5
            if 字 in 物品[A:B]:
                if 指定窗口文本[index:index + len(物品)] == "熊精":
                    print('跳过:', "熊精")
                    continue
                print('找到:', 物品)
                if 指定窗口文本[-1].isdigit():
                    页数 = next((x for x in 指定窗口文本[index + 1:] if x.isdigit()), None)
                    print("数字在后，召唤兽所在的页数是:", 页数)
                else:
                    页数 = next((x for x in reversed(指定窗口文本[:index]) if x.isdigit()), None)
                    print("数字在前，召唤兽所在的页数是:", 页数)
                if 物品 == '芙蓉子' or 物品 == '芙蓉子' or 物品 == '如意仙子' or 物品 == '星灵仙':
                    页数 = 9
                return 页数
                break
        else:
            页数 = None
            print('没有发现需要的召唤兽')
def 战神山特别任务取消():
    global 任务文本,任务类型,第几个账号,这个账号已完成任务,账号
    战神山= 单个模板匹配(160, 370, 300, 450, 'zss.png')
    师门完成 = 单个模板匹配(130, 380, 400, 460, 'smwancheng.png', 0.8)
    print('这个账号已完成任务 战神山,师门完成:',这个账号已完成任务,战神山,师门完成)
    框关闭函数()
    这个账号已完成任务=False
    if  战神山 or 师门完成:
        if 战神山:
            鼠标移动到指定距离(689, 181, 1)
            鼠标移动到指定距离(653, 202, 1)
        pyautogui.hotkey('alt', 'k')
        time.sleep(0.5)
        鼠标移动到指定距离(237, 520, 1)
        鼠标移动到指定距离(715, 130, 1)
        print('师门已完成')
        任务类型, 第几个账号, 账号, 密码 = 任务类型输出函数(我想要完成的任务及顺序, 第几个账号)
        刷新账号的任务状态('师门:未完成', '师门:已完成', 1)
        任务文本 = []
        任务类型, 第几个账号, 这个账号已完成任务, 密码 = 任务类型输出函数(我想要完成的任务及顺序, 第几个账号)
        print(', 这个账号已完成任务中', 这个账号已完成任务)
def 师门任务领取(点到师傅):
    global 任务类型
    global 重新领取
    global 第几个账号
    if 点到师傅:
        鼠标移动到指定距离(点到师傅[0] + 360, 点到师傅[1] + 370, 1)
        pyautogui.move(100, 0)
        print('重新领取内', 重新领取)
        if 重新领取:
            time.sleep(0.2)
            点击常规确认()
            time.sleep(0.5)
            pyautogui.click()
            重新领取 = False
        else:
            for i in range(8):
                对话框 = 单个模板匹配(600, 300, 700, 440, 'duihuakuang.png', 0.91, 返回坐标=True)
                if 对话框:
                    pyautogui.click()
                    break
                else:
                    time.sleep(0.1)
            战神山特别任务取消()
def 召唤兽属性识别(任务文本):
    这只召唤是我要找的 = False
    数字列表 = [int(s) for s in re.findall(r'\d+', 指定窗口文本)]
    属性列表 = ["体质", "法力", "力量", "耐力", "敏捷"]
    属性字典 = dict(zip(属性列表, 数字列表))
    排序后属性 = sorted(属性字典.items(), key=lambda x: x[1], reverse=True)
    宠物属性 = 排序后属性[:2]
    print('这只召唤兽的属性特征：', 宠物属性)
    if "体" in 指定窗口文本 and "法" in 指定窗口文本 and (
            "星" in 指定窗口文本 or "量" in 指定窗口文本) and "耐" in 指定窗口文本 and "敏" in 指定窗口文本:
        if any(需要找任务宠[:2] in item[0] for item in 宠物属性):
            print('这只是我需要找的买它')
            这只召唤是我要找的 = True
        else:
            print('这只不是我要买的继续寻找')
    else:
        print('召唤兽的属性特征识别错误')
    return 这只召唤是我要找的


def 指定窗口文本识别(顶点X, 顶点Y, 右下角点X, 右下角点Y, 窗口句柄=True):
    if not 窗口句柄:
        任务窗口截屏 = ImageGrab.grab(
            bbox=(顶点X, 顶点Y, 右下角点X, 右下角点Y))
    else:
        任务窗口截屏 = ImageGrab.grab(
            bbox=(顶点坐标X + 顶点X, 顶点坐标Y + 顶点Y, 顶点坐标X + 右下角点X, 顶点坐标Y + 右下角点Y))
    res = ocr.ocr(任务窗口截屏)  # 调用cnocr进行识别
    指定窗口文本 = [line['text'] for line in res]  # 提取文本部分
    指定窗口文本 = ' '.join(指定窗口文本)
    替换场景文本的内容 = {
        "高": "宫",

    }
    for old, new in 替换场景文本的内容.items():
        指定窗口文本 = 指定窗口文本.replace(old, new)
    return 指定窗口文本


def 召唤兽文本替换(指定窗口文本):
    替换场景文本的内容 = {
        "g": "9",
        '\n': ' ',
        " ": "",
        "《": "巡",
        "程": "精",
        "倍": "僵",
        "关": "芙",
        "L": "山",
        "化": "花",
        "业": "狐",
        "贴": "赌",
        "机": "狐",
        "号": "马",
        "壁": "蟹",
        "无": "鬼",
        "犯": "狐",
        "游": "雨",
        "栓": "蟹",
        "碟": "蝶",
        "学": "蛤",
        "片": "蛤",
        "水": "丞",
        "哈": "蛤",
        "很": "狼",
        "蜡": "蛤",
        "听": "蛤",
        "构": "树",
        "招": "猪",
        "档": "猪",
        "妞": "贼",
        "搭": "猪",
        "柘": "猪",
        "肉": "雨",
        "根": "狼",
        "服": "熊",
        "料": "蟹",
        "年": "蟹",
        "活": "猪",
        "括": "猪",
        "格": "猪",
        "话": "猪",
        "日": "白",
        "免": "兔",
        "仁": "僵",
        "信": "僵",
        "中": "虾",
        "外": "虾",
        "帐": "蝶",
        "保": "蝶",
        "鲜": "蟹",
        "特": "蛙",
        "南": "雨",
        "零": "蓉",
        "年": "蟹",
        "自": "白",
        "果": "鬼",
        "估": "骷",
        "话": "骷",
        "酷": "骷",
        "仁": "僵",
        "保": "僵",
        "信": "僵",
        "年": "牛",
        "o": "0",
        "校": "蛟",
        "谍": "蝶",
        "浪": "狼",
        "永": "丞",
        "下": "虾",
        "蚝": "蛙",
        "措": "猪",
        "烤": "赌",
        "希": "赌",
        "州": "贼",
        "线": "蟹",
        "始": "蛤",
    }
    for old, new in 替换场景文本的内容.items():
        指定窗口文本 = 指定窗口文本.replace(old, new)
    return 指定窗口文本

def 摊位识别():

    if 物品 in 烹饪列表:
        模板列表 = 摊位模板列表[:1]
    elif 物品 in 三级药列表:
        模板列表 = 摊位模板列表[1:5]
    elif 物品 in 一级家具:
        模板列表 = 摊位模板列表[5:8]
    elif 物品 in 二级家具:
        模板列表 = 摊位模板列表[8:]
    print('模板列表',len(模板列表))
    结果列表 = []
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X , 顶点坐标Y, 顶点坐标X + 812, 顶点坐标Y + 663))
    # 窗口截屏.save('win1.png')
    窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    for 模板 in 模板列表:
        结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
        坐标 = np.where(结果 >= 0.89)
        print(坐标)
        if len(坐标[0]) > 0:
            匹配坐标 = [(x + 模板.shape[1] // 2, y + 模板.shape[0] // 2) for x, y in zip(坐标[1], 坐标[0])]
            结果列表.extend(匹配坐标)
    结果列表 = sorted(结果列表, key=lambda x: x[1])
    filtered_list = []
    prev_y = None
    prev_x = None
    for x, y in 结果列表:
        if prev_y is None or abs(y - prev_y) >= 2 or abs(x - prev_x) >= 90:
            filtered_list.append((x, y))
            prev_y = y
            prev_x = x
    random.shuffle(filtered_list)
    return filtered_list

def 物品识别并购买(物品, 目标价格):
    global 任务已完成,模板路径
    for index, aa in enumerate(物品转化数字列表):
        if 物品 == aa:
            break
    print('图片张数', index+1)
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 260, 顶点坐标Y + 230, 顶点坐标X + 566, 顶点坐标Y + 475))
    窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    模板路径 = 'shangpin/' + str(index + 1) + '.png'
    模板 = cv2.imread(模板路径)
    结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
    坐标 = np.where(结果 >= 0.95)
    if len(坐标[0]) > 0:
        匹配坐标 = [(x + 模板.shape[1] // 2, y + 模板.shape[0] // 2) for x, y in zip(坐标[1], 坐标[0])]
        匹配坐标 = 删除重复元素(匹配坐标)
        for 坐标 in 匹配坐标:
            鼠标移动到指定距离(坐标[0] + 260, 坐标[1] + 230, 1)
            鼠标移动到指定距离(422, 542, 4)
            价格 = 指定窗口文本识别(314, 477, 400, 500)
            if 价格.isdigit():
                if int(价格) < 目标价格 and 终止按键:
                    print("价格合适", 价格)
                    pyautogui.click()
                    任务已完成 = True
                    break
                else:
                    鼠标移动到指定距离(288, 188, 4, 0)
                    print("价格过高")
                    break
            else:
                print(价格, "价格识别错误")


def 召唤兽识别():
    for index, aa in enumerate(召唤兽列表):
        if 物品 == aa:
            break
    print('图片张数', index)
    匹配坐标 = []
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 270, 顶点坐标Y + 230, 顶点坐标X + 540, 顶点坐标Y + 450))
    窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    模板路径 = 'bb2/' + str(index + 1) + '.png'
    模板 = cv2.imread(模板路径)
    结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
    坐标 = np.where(结果 >= 0.92)
    if len(坐标[0]) > 0:
        匹配坐标 = [(x + 模板.shape[1] // 2, y + 模板.shape[0] // 2) for x, y in zip(坐标[1], 坐标[0])]
        print('删除重复前的召唤兽坐标',匹配坐标)
        匹配坐标 = 删除重复元素(匹配坐标)
        print('删除重复后的召唤兽坐标', 匹配坐标)
    return 匹配坐标


def 单个模板匹配(顶点X, 顶点Y, 匹配范围X, 匹配范围Y, 模板图片, 阈值=0.81, 返回坐标=False, 坐标列表=False, 截屏=True,路径='模板'):
    global 窗口截屏图片
    if 截屏:
        窗口截屏 = ImageGrab.grab(
            bbox=(顶点坐标X + 顶点X, 顶点坐标Y + 顶点Y, 顶点坐标X + 匹配范围X, 顶点坐标Y + 匹配范围Y))
        窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    if 路径=='模板':
        模板图片 = 'muban/' + 模板图片
    else:
        模板图片=模板图片
    模板 = cv2.imread(模板图片)
    结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
    坐标 = np.where(结果 >= 阈值)
    if len(坐标[0]) > 0:
        if 返回坐标:
            if 坐标列表:
                匹配坐标 = [(x + 模板.shape[1] // 2, y + 模板.shape[0] // 2) for x, y in zip(坐标[1], 坐标[0])]

                return 匹配坐标
            else:
                匹配坐标 = (坐标[1][0] + 模板.shape[1] // 2, 坐标[0][0] + 模板.shape[0] // 2)
                return 匹配坐标  # 返回匹配坐标
        else:
            return True  # 返回匹配结果
    else:
        if 返回坐标:
            return []  # 如果需要坐标但未找到匹配，返回空列表
        else:
            return False  # 返回匹配结果


def 任务窗口文本识别(识别类型='常规'):
    global 任务点X坐标
    global 任务点Y坐标
    global 今日领取次数
    global 任务文本
    global 计数器
    global 坐标差X
    global 坐标差Y
    if 识别类型 == '常规':
        任务窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 640, 顶点坐标Y + 200, 顶点坐标X + 800, 顶点坐标Y + 400))
        res = ocr.ocr(任务窗口截屏)  # 调用cnocr进行识别
    elif 识别类型 == '任务栏':
        任务窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 390, 顶点坐标Y + 260, 顶点坐标X + 611, 顶点坐标Y + 361))
        res = ocr.ocr(任务窗口截屏)  # 调用cnocr进行识别
        # pyautogui.hotkey('alt', 'q')
    任务文本 = [line['text'] for line in res]  # 提取文本部分
    任务文本 = ' '.join(任务文本)
    替换场景文本的内容 = {
        '\n': ' ',
        '田': '国',
        '员': '圆',
        'T': '7',
        '黑能': '黑熊',
        '大兵': '天兵',
        '大将': '天将',
        '古战': '苦战',
        '生头': '牛头',
        '耐方': '耐力',
        '风凰': '凤凰',
        '身强': '身哦',
    }
    for old, new in 替换场景文本的内容.items():
        任务文本 = 任务文本.replace(old, new)
    提取任务栏坐标S = re.findall(r"(\d+)\D{1,2}(\d+)", 任务文本)
    if 提取任务栏坐标S:
        for 提取任务栏坐标 in 提取任务栏坐标S:
            任务点X坐标 = int(提取任务栏坐标[0])
            任务点Y坐标 = int(提取任务栏坐标[1])
            print("任务点X,任务点Y:", 任务点X坐标, 任务点Y坐标)
            计数器 = 0
            # 任务坐标列表.append((任务点X, 任务点Y))
            if 任务点X坐标 > 690 or 任务点Y坐标 > 400:
                print("坐标点识别错误", 任务点X坐标, 任务点Y坐标)
                任务点X坐标 = -10
                任务点Y坐标 = -10
                任务文本 = []
                # 任务坐标列表.append((任务点X, 任务点Y))
                if 目标没移动:
                    点击人物中心(随机整数50*2, abs(随机整数50)*2)
            break
    else:
        任务点X坐标 = -10
        任务点Y坐标 = -10
    坐标差X = 场景点X坐标 - 任务点X坐标
    坐标差Y = 场景点Y坐标 - 任务点Y坐标
        # 任务坐标列表.append((任务点X, 任务点Y))
    if isinstance(任务文本, str):
        提取领取次数 = re.search(r"取(\d+)", 任务文本)
        if 提取领取次数:
            今日领取次数 = int(提取领取次数.group(1))
            print("今日领取次数:", 今日领取次数)
    else:
        print("任务文本不是字符串或类似字节对象")


def 场景窗口文本识别():
    global 上一次的坐标X
    global 上一次的坐标Y
    global 场景点X坐标
    global 场景点Y坐标
    global 坐标差X
    global 坐标差Y
    global 场景文本
    global 目标没移动
    目标没移动 = False
    结果列表 = []
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 25, 顶点坐标Y + 65, 顶点坐标X + 126, 顶点坐标Y + 142))
    窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    for i, 模板 in enumerate(场景模板列表[:11]):
        结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
        坐标 = np.where(结果 >= 0.80)
        if len(坐标[0]) > 0:
            匹配坐标 = [(x + 模板.shape[1] // 2, y + 模板.shape[0] // 2) for x, y in zip(坐标[1], 坐标[0])]
            for 坐标点 in 匹配坐标:
                结果列表.append((*坐标点, i))  # 将坐标点和数字模板索引作为元组的一部分添加到结果列表中
    结果列表 = sorted(结果列表, key=lambda x: x[0])
    首个X坐标 = 0
    需要保留的位置 = []
    for index, 坐标 in enumerate(结果列表):
        if abs(首个X坐标 - 坐标[0]) > 2:
            需要保留的位置.append(index)
        首个X坐标 = 坐标[0]
    结果列表 = [元素 for 索引, 元素 in enumerate(结果列表) if 索引 in 需要保留的位置]
    # print(结果列表)
    分割点索引 = [索引 for 索引, 元素 in enumerate(结果列表) if 元素[2] == 10]
    if not 分割点索引:
        print("坐标点识别错误")
        场景点X坐标 = -50
        场景点Y坐标 = -50
        验证函数()
        目标没移动 = True
    elif 分割点索引:
        第一部分 = 结果列表[:分割点索引[0]]
        第二部分 = 结果列表[分割点索引[0] + 1:]
        if 第一部分 != [] and 第二部分 != []:
            场景点X坐标 = int(''.join(str(元素[2]) for 元素 in 第一部分))
            场景点Y坐标 = int(''.join(str(元素[2]) for 元素 in 第二部分))
        else:
            print("坐标点识别错误111")
            场景点X坐标 = -50
            场景点Y坐标 = -50
        if 场景点X坐标 == 上一次的坐标X and 场景点Y坐标 == 上一次的坐标Y:
            目标没移动 = True
    上一次的坐标X = 场景点X坐标
    上一次的坐标Y = 场景点Y坐标
    坐标差X = 场景点X坐标 - 任务点X坐标
    坐标差Y = 场景点Y坐标 - 任务点Y坐标
    print(场景点X坐标, 场景点Y坐标)
    for i, 模板 in enumerate(场景模板列表[11:]):
        结 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
        坐 = np.where(结 >= 0.85)
        if len(坐[0]) > 0:
            场景文本 = 场景地点[i]
            break
    else:
        场景文本 = '门派里面'
    print(场景文本)
def 长安驿站路口前往命令(其他地方=False, 默认地点='长安'):
    驿站=False
    if not 其他地方:
        打开或关闭背包()
        time.sleep(随机小数0)
        打开长安飞行旗()
        time.sleep(0.3 + 随机小数0)
        鼠标移动到指定距离(406, 450, 1, 红点=True)
        打开或关闭背包()
        time.sleep(0.8 + 随机小数0)
    pyautogui.press('f9')
    for i in range(8):
        窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X, 顶点坐标Y, 顶点坐标X + 800, 顶点坐标Y + 600))
        原始图像 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
        for 模板 in 驿站老板模板列表:
            result = cv2.matchTemplate(原始图像, 模板, cv2.TM_CCOEFF_NORMED)
            loc = np.where(result >= 0.77)  # 找到匹配程度大于阈值的位置
            if len(loc[0]) > 0:  # 如果匹配成功
                pt = (loc[1][0], loc[0][0])  # 取第一个匹配位置
                左上角 = (pt[0], pt[1])
                h, w = 模板.shape[:2]
                右下角 = (pt[0] + w, pt[1] + h)
                中心点X = (pt[0] + 右下角[0]) // 2
                中心点Y = (pt[1] + 右下角[1]) // 2
                中心点坐标 = (中心点X, 中心点Y)
                print("模板中心点坐标：", 中心点坐标)
                鼠标移动到指定距离(中心点X, 中心点Y, 1)
                鼠标移动到指定距离(243, 394, 4)
                驿站 = 单个模板匹配(0, 0, 300, 450, 'yizhanqueren.png')
                if 驿站:
                    pyautogui.click()
                    time.sleep(0.7)
                    return True
                else:
                    time.sleep(3)
                    break
        else:
            time.sleep(3)
        if 驿站:
            break


def 翻页(方向, 步数, 挖图翻页=True):
    if 挖图翻页:
        鼠标移动到指定距离(300, 560, 4, 0, 30)
    if 方向 == -1:
        pyautogui.keyDown('ctrl')
        for _ in range(步数):
            pyautogui.scroll(1)  # 向上滚动1个单位
            time.sleep(0.1)  # 等待一段时间
        pyautogui.keyUp('ctrl')
    elif 方向 == 1:
        pyautogui.keyDown('ctrl')
        for _ in range(步数):
            pyautogui.scroll(-1)  # 向下滚动1个单位
            time.sleep(0.1)  # 等待一段时间
        pyautogui.keyUp('ctrl')


def 整理到行囊(最后几个不整理, 最后几层不识别):
    打开或关闭背包()
    鼠标移开()
    time.sleep(0.5)
    大红 = 单个模板匹配(380, 230, 650, 450, 'dahong.png', 返回坐标=True)
    if 大红:
        鼠标移动到指定距离(大红[0] + 380, 大红[1] + 230, 1)
        鼠标移动到指定距离(420, 425, 1)
    鼠标移开()
    time.sleep(0.5)
    大蓝 = 单个模板匹配(380, 230, 650, 450, 'dalan.png', 返回坐标=True)
    if 大蓝:
        鼠标移动到指定距离(大蓝[0] + 380, 大蓝[1] + 230, 1)
        鼠标移动到指定距离(466, 425, 1)
    鼠标移开()
    time.sleep(0.5)
    飞行符 = 单个模板匹配(380, 230, 650, 450, 'feixingfu2.png', 返回坐标=True)
    if 飞行符:
        鼠标移动到指定距离(飞行符[0] + 380, 飞行符[1] + 230, 1)
        鼠标移动到指定距离(520, 425, 1)
    if 最后几层不识别 > 1:
        摄妖香 = 单个模板匹配(380, 230, 650, 450, 'sheyaoxiang.png', 返回坐标=True)
        if 摄妖香:
            鼠标移动到指定距离(摄妖香[0] + 380, 摄妖香[1] + 230, 1)
            鼠标移动到指定距离(415, 375, 1)
        乾坤袋 = 单个模板匹配(272, 228, 550, 500, 'qiankundai.png', 0.88, 返回坐标=True)
        if 乾坤袋:
            鼠标移动到指定距离(乾坤袋[0] + 380, 乾坤袋[1] + 230, 1)
            鼠标移动到指定距离(465, 375, 1)
    鼠标移开()
    鼠标移动到指定距离(515, 230, 1)
    time.sleep(0.3)
    行囊空位数量, _ = 格子检测函数(390, 250, '空', 0)
    鼠标移动到指定距离(435, 230, 1)
    time.sleep(0.3)
    背包物品数量, 坐标列表 = 格子检测函数(390, 250, '有', 最后几个不整理, 层数=最后几层不识别)
    print(坐标列表)
    a = 0
    for 坐标 in 坐标列表:
        if not 终止按键 or a == 行囊空位数量:
            break
        鼠标移动到指定距离(坐标[0], 坐标[1], 1)
        鼠标移动到指定距离(515, 230, 1)
        a += 1
    打开或关闭背包()


def 血量检测系统(只检测血量=False):
    图像 = ImageGrab.grab(
        bbox=(顶点坐标X + 745, 顶点坐标Y + 60, 顶点坐标X + 807, 顶点坐标Y + 85))
    感兴趣区域 = cv2.cvtColor(np.array(图像), cv2.COLOR_RGB2BGR)
    内伤 = 感兴趣区域[4:11, 8:56]
    图像2 = ImageGrab.grab(
        bbox=(顶点坐标X + 745-120, 顶点坐标Y + 60, 顶点坐标X + 807-120, 顶点坐标Y + 85))
    感兴趣区域2 = cv2.cvtColor(np.array(图像2), cv2.COLOR_RGB2BGR)
    下限红色 = (0, 0, 140)
    上限红色 = (100, 100, 255)
    下限内伤 = (190, 190, 190)
    上限内伤 = (255, 255, 255)
    下限蓝色 = (140, 50, 0)
    上限蓝色 = (255, 150, 100)
    红色像素数 = 0
    蓝色像素数 = 0
    for 行 in 感兴趣区域2:
        for 像素 in 行:
            if 下限红色[2] <= 像素[2] <= 上限红色[2] and 下限红色[1] <= 像素[1] <= 上限红色[1] and 下限红色[
                0] <= \
                    像素[0] <= 上限红色[0]:
                红色像素数 += 1
            if 下限蓝色[2] <= 像素[2] <= 上限蓝色[2] and 下限蓝色[1] <= 像素[1] <= 上限蓝色[1] and 下限蓝色[
                0] <= \
                    像素[0] <= 上限蓝色[0]:
                蓝色像素数 += 1
    召唤兽血量 = 红色像素数 / 230
    召唤兽蓝量 = 蓝色像素数 / 230
    # 定义红色范围的阈值
    红色像素数 = 0
    蓝色像素数 = 0
    for 行 in 感兴趣区域:
        for 像素 in 行:
            if 下限红色[2] <= 像素[2] <= 上限红色[2] and 下限红色[1] <= 像素[1] <= 上限红色[1] and 下限红色[
                0] <= \
                    像素[0] <= 上限红色[0]:
                红色像素数 += 1
            if 下限蓝色[2] <= 像素[2] <= 上限蓝色[2] and 下限蓝色[1] <= 像素[1] <= 上限蓝色[1] and 下限蓝色[
                0] <= \
                    像素[0] <= 上限蓝色[0]:
                蓝色像素数 += 1
    内伤像素数 = 0
    for 行 in 内伤:
        for 像素 in 行:
            if 下限内伤[2] <= 像素[2] <= 上限内伤[2] and 下限内伤[1] <= 像素[1] <= 上限内伤[1] and 下限内伤[
                0] <= \
                    像素[0] <= 上限内伤[0]:
                内伤像素数 += 1
    血量 = 红色像素数 / 230
    蓝量 = 蓝色像素数 / 230
    内伤量=内伤像素数/75
    if not 只检测血量:
        if 内伤量>0.15:
            打开或关闭背包()
            打开长安飞行旗()
            点击酒店飞行坐标()
            打开或关闭背包()
            进入 = 场景切换判断('长安城')
            if 进入:
                pyautogui.hotkey('alt', 'h')
                鼠标移动到指定距离(466, 255, 1)
                已进入 = 场景切换判断('长安酒店')
                if 已进入:
                    while 终止按键:
                        time.sleep(0.5)
                        场景窗口文本识别()
                        if 场景点X坐标>46 and 目标没移动:
                            time.sleep(1)
                            隐藏人物()
                            鼠标移动到指定距离(373, 310 + (场景点Y坐标 - 20) * 20, 1)
                            time.sleep(0.7)
                            鼠标移动到指定距离(200, 430, 1)
                            time.sleep(0.7)
                            pyautogui.click()
                            break
                        else:
                            if 目标没移动:
                                鼠标移动到指定距离(720, 300, 1)
                            else:
                                if '长安'in 场景文本:
                                    pass
        elif 血量 < 0.8:
            背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
            if not 背包开:
                打开或关闭背包()
                pyautogui.moveTo(顶点坐标X + 300, 顶点坐标Y + 100)
                烤鸭 = 单个模板匹配(380, 230, 650, 450, 'ya.png', 返回坐标=True, 坐标列表=True)
                烤肉 = 单个模板匹配(380, 230, 650, 450, 'rou.png', 返回坐标=True, 坐标列表=True)
                臭豆腐 = 单个模板匹配(380, 230, 650, 450, 'chou.png', 返回坐标=True, 坐标列表=True)
                包子 = 单个模板匹配(380, 230, 650, 450, 'baozi.png', 返回坐标=True)
                if 包子:
                    鼠标移动到指定距离(包子[0] + 380, 包子[1] + 230, 3)
                    pyautogui.rightClick()
                    pyautogui.rightClick()
                if len(烤鸭)>1:
                    鼠标移动到指定距离(烤鸭[0][0] + 380, 烤鸭[0][1] + 230, 3)
                elif len(烤肉)>1:
                    鼠标移动到指定距离(烤肉[0][0] + 380, 烤肉[0][1] + 230, 3)
                elif len(臭豆腐)>1:
                    鼠标移动到指定距离(臭豆腐[0][0] + 380, 臭豆腐[0][1] + 230, 3)
                else:
                    大红 = 单个模板匹配(380, 230, 650, 450, 'dahong.png', 返回坐标=True)
                    if 大红:
                        鼠标移动到指定距离(大红[0] + 380, 大红[1] + 230, 3)
                    else:
                        打开或关闭背包()
                        商会购买商品('烹饪',60000,'muban/dahong.png',其他模板=True)
            打开或关闭背包()
        if 蓝量 < 0.5 :
            if 任务类型=='场景挂机':
                if 蓝量 < 0.2 and 队长模式:
                    打开或关闭背包()
                    打开长安飞行旗()
                    点击酒店飞行坐标()
                    打开或关闭背包()
                    进入 = 场景切换判断('长安城')
                    if 进入:
                        pyautogui.hotkey('alt', 'h')
                        鼠标移动到指定距离(466, 255, 1)
                        已进入 = 场景切换判断('长安酒店')
                        if 已进入:
                            while 终止按键:
                                time.sleep(0.5)
                                场景窗口文本识别()
                                if 场景点X坐标 > 46 and 目标没移动:
                                    time.sleep(1)
                                    隐藏人物()
                                    鼠标移动到指定距离(373, 310 + (场景点Y坐标 - 20) * 20, 1)
                                    time.sleep(0.7)
                                    鼠标移动到指定距离(200, 430, 1)
                                    time.sleep(0.7)
                                    pyautogui.click()
                                    break
                                else:
                                    if 目标没移动:
                                        鼠标移动到指定距离(720, 300, 1)
                                    else:
                                        if '长安' in 场景文本:
                                            pass
                    for i in range(3):
                        打开或关闭背包()
                        打开傲来国飞行旗()
                        鼠标移动到指定距离(287, 443, 1, 红点=True)
                        打开或关闭背包()
                        time.sleep(0.5)
                        场景窗口文本识别()
                        if '傲' in 场景文本 or '来' in 场景文本:
                            打开或关闭地图()
                            鼠标移动到指定距离(256, 466, 1)
                            打开或关闭地图()
                            time.sleep(5)
                            for i in range(5):
                                隐藏人物()
                                pyautogui.hotkey('alt', 'h')
                                场景窗口文本识别()
                                鼠标移动到指定距离(406 - (场景点X坐标 - 44) * 20, 310 + (场景点Y坐标 - 28) * 20, 1)
                                time.sleep(1)
                                巫医3 = 单个模板匹配(130, 380, 500, 520, '51222.png', 返回坐标=True)
                                if 巫医3:
                                    鼠标移动到指定距离(巫医3[0] + 130, 巫医3[1] + 380, 1)
                                    time.sleep(0.5)
                                    pyautogui.click()
                                    time.sleep(0.5)
                                    for i in range(8):
                                        回门派()
                                        场景窗口文本识别()
                                        if 门派场景名称 in 场景文本:
                                            break
                                    break
                                else:
                                    打开或关闭地图()
                                    鼠标移动到指定距离(256, 466, 1)
                                    打开或关闭地图()
                                    time.sleep(4)
                            if 巫医3:
                                break
            else:
                背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
                if not 背包开:
                    打开或关闭背包()
                    pyautogui.moveTo(顶点坐标X + 300, 顶点坐标Y + 100)
                    佛跳墙 = 单个模板匹配(380, 230, 650, 450, 'for.png', 返回坐标=True, 坐标列表=True)
                    绿豆腐 = 单个模板匹配(380, 230, 650, 450, 'lvdoufu.png', 返回坐标=True, 坐标列表=True)
                    if len(佛跳墙)>1:
                        鼠标移动到指定距离(佛跳墙[0][0] + 380, 佛跳墙[0][1] + 230, 3)
                    elif len(绿豆腐)>1:
                        鼠标移动到指定距离(绿豆腐[0][0] + 380, 绿豆腐[0][1] + 230, 3)
                    else:
                        大蓝 = 单个模板匹配(380, 230, 650, 450, 'dalan.png', 返回坐标=True)
                        if 大蓝:
                            鼠标移动到指定距离(大蓝[0] + 380, 大蓝[1] + 230, 3)
                        else:
                            打开或关闭背包()
                            商会购买商品('烹饪',67866,'muban/dalan.png',其他模板=True)
                打开或关闭背包()
        if 召唤兽血量<0.5:
            鼠标移动到指定距离(650, 65, 3)
        
    print("内伤量:", 内伤量)
    print("当前血量","当前蓝量", 血量,蓝量)
    print("召唤兽血量", "召唤兽蓝量", 召唤兽血量, 召唤兽蓝量)
    return 血量


def 窗口1的时间管理():
    global 新登号登入
    时间超 = False
    with open("时间.txt", 'r') as 文件:
        文本第1行的数据 = 文件.readline().strip()
        文本第2行的数据 = 文件.readline().strip()
    当前时间 = datetime.datetime.now()
    摄妖香时间 = datetime.datetime.strptime(文本第1行的数据, '%Y-%m-%d %H:%M:%S')
    打坐时间 = datetime.datetime.strptime(文本第2行的数据, '%Y-%m-%d %H:%M:%S')
    摄妖香时差 = 当前时间 - 摄妖香时间
    打坐时差 = 当前时间 - 打坐时间
    摄妖香时间差 = 摄妖香时差.total_seconds() / 60
    打坐时间差 = 打坐时差.total_seconds() / 60
    if 任务类型 != '押镖' and 任务类型 != '清仓库' and 任务类型 != '场景挂机':
        if 摄妖香时间差 > 29.2 or 新登号登入:
            # 这里加入点击摄妖香的命令
            print('摄妖香已经点28分钟以上了，已经更新当前时间为')
            打开或关闭背包()
            pyautogui.moveTo(顶点坐标X + 300, 顶点坐标Y + 100)
            time.sleep(0.7)
            for i in range(4):
                背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
                if 背包开:
                    摄妖香 = 单个模板匹配(380, 230, 650, 450, 'sheyaoxiang.png', 返回坐标=True)
                    if 摄妖香:
                        鼠标移动到指定距离(摄妖香[0] + 380, 摄妖香[1] + 230, 3)
                        time.sleep(0.5)
                        打开或关闭背包()
                        新登号登入 = False
                        with open("时间.txt", 'r+') as 文件:
                            lines = 文件.readlines()  # 读取文件列表
                            lines[0] = 当前时间.strftime('%Y-%m-%d %H:%M:%S') + '\n'  # 更新第1行的时间
                            文件.seek(0)  # 将文件指针移动到开头
                            文件.writelines(lines)  # 将更新后的内容写回文件
                            # 再次定位文件指针到开头，然后读取更新后的第一行内容
                            文件.seek(0)
                            文本第1行的数据 = 文件.readline().strip()
                        break
                    else:
                        time.sleep(0.3)
                        pyautogui.press('f8')
                        time.sleep(0.1)
                        鼠标移动到指定距离(357, 209, 1)
                        if 任务类型!='挖图':
                            pyautogui.press('0')
                        time.sleep(0.1)
                        鼠标移动到指定距离(485, 495, 1)
                        time.sleep(0.1)
                        pyautogui.move(0, -30)
                        time.sleep(0.1)
                        pyautogui.rightClick()
                        time.sleep(0.3)
                else:
                    打开或关闭背包()
            else:
                while 终止按键:
                    随机数载入()
                    场景窗口文本识别()
                    if not '长安' in 场景文本:
                        打开或关闭背包()
                        打开长安飞行旗()
                        鼠标移动到指定距离(591, 328, 1, 红点=True)
                        打开或关闭背包()
                        time.sleep(0.8)
                        打开或关闭地图()
                        鼠标移动到指定距离(658, 370, 1)
                        打开或关闭地图()
                    elif '长安' in 场景文本 and 目标没移动:
                        if 528 < 场景点X坐标 < 540 and 128 < 场景点Y坐标 < 139:
                            隐藏人物()
                            pyautogui.hotkey('alt', 'h')
                            鼠标移动到指定距离(533, 250, 1)
                            time.sleep(2)
                            隐藏人物()
                            鼠标移动到指定距离(370, 270, 1)
                            time.sleep(1)
                            购买 = 单个模板匹配(140, 350, 250, 450, 'goumai.png', 返回坐标=True)
                            if 购买:
                                鼠标移动到指定距离(购买[0] + 140, 购买[1] + 350, 1)
                            time.sleep(1)
                            摄妖香 = 单个模板匹配(357, 170, 530, 300, 'sheyaoxiang.png', 返回坐标=True)
                            if 摄妖香:
                                鼠标移动到指定距离(410, 210, 1)
                                time.sleep(0.5)
                                pyautogui.click()
                                time.sleep(0.5)
                                pyautogui.click()
                                time.sleep(0.5)
                                pyautogui.press('0')
                                鼠标移动到指定距离(398, 534, 1)
                                break
                        else:
                            if 目标没移动:
                                打开或关闭地图()
                                鼠标移动到指定距离(658, 370, 1)
                                打开或关闭地图()
                    time.sleep(0.5)
            时间超 = True
        if 打坐时间差 > 3.1:
            print('打坐时间差', 打坐时间差)
            print('打坐历史时间：', 打坐时间)
            print('当前时间', 当前时间)
            with open("时间.txt", 'r+') as 文件:
                lines = 文件.readlines()  # 读取文件列表
                lines[1] = 当前时间.strftime('%Y-%m-%d %H:%M:%S') + '\n'  # 更新第1行的时间
                文件.seek(0)  # 将文件指针移动到开头
                文件.writelines(lines)  # 将更新后的内容写回文件
                # 再次定位文件指针到开头，然后读取更新后的第一行内容
                文件.seek(0)
                文本第2行的数据 = 文件.readline().strip()
            print('打坐已超3分钟')
            time.sleep(0.3)
            pyautogui.press('f5')
            time.sleep(0.3)
            if 是否自动喊话 and 随机整数100>75:
                pyautogui.press('up')
                time.sleep(0.3)
                pyautogui.press('enter')
    return 时间超


def 师门任务文本识别判断():
    global 物品属类
    物品属类 = False
    if '狼' in 任务文本 and not '牙'in 任务文本 and not '面'in 任务文本 and not '才'in 任务文本 and not '锤'in 任务文本:
        物品 = '狼'
        物品属类 = 3
    elif '熊' in 任务文本 and '精' in 任务文本:
        物品 = '熊精'
        物品属类 = 3
    elif '雨' in 任务文本  and  '江湖'in 任务文本:
        物品 = '江湖夜'
        物品属类 = 7
    elif '龙' in 任务文本  and  '泉'in 任务文本:
        物品 = '龙泉剑'
        物品属类 = 7
    elif ('狼牙' in 任务文本 or '狼才' in 任务文本)  and  '双剑'in 任务文本:
        物品 = '牙双'
        物品属类 = 7
    elif '狼牙' in 任务文本  and  '锤'in 任务文本:
        物品 = '狼牙锤'
        物品属类 = 7
    elif '龙凤' in 任务文本  and  '双'in 任务文本:
        物品 = '龙凤双'
        物品属类 = 7
    elif '强' in 任务文本 and '盗' in 任务文本 and not '挖宝' in 任务文本:
        物品 = '强盗'
        物品属类 = 3
    elif '骷' in 任务文本 and '髅' in 任务文本 and '吊' in 任务文本:
        物品 = '髅吊坠'
        物品属类 = 7
    elif '金创药' in 任务文本 :
        物品 = '金创药'
        物品属类 = 2
    elif '女儿红' in 任务文本 :
        物品 = '女儿红'
        物品属类 = 2
    else:
        for index, 任务品 in enumerate(总列表):
            for 物品 in 任务品:
                出现次数 = 0
                上一个位置 = -10  # 初始化上一个字符的位置
                for 字 in 物品:
                    if 字 in 任务文本:
                        当前位置 = 任务文本.index(字)
                        if 出现次数 == 0:
                            出现次数 += 1
                        elif 当前位置 - 上一个位置 <= 3:  # 检查字符间距
                            出现次数 += 1
                        上一个位置 = 当前位置
                    if 出现次数 >= 2:
                        物品属类 = index + 1  # 索引从0开始，所以要加1
                        break
                if 物品属类:
                    break
            if 物品属类:
                break
        else:
            物品属类=8
    return 物品


def 示威文本识别并点击():
    任务窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 120, 顶点坐标Y + 140, 顶点坐标X + 800, 顶点坐标Y + 630))
    result = ocr.ocr(任务窗口截屏)
    坐标X = False
    坐标Y = False
    for item in result:
        print(item['text'])
        出现次数 = 0
        for 字 in item['text']:
            if 字 in 任务文本:
                出现次数 += 1
            if 出现次数 > 3:
                x1, y1 = item['position'][0]  # 获取文本框坐标
                x2, y2 = item['position'][2]
                center_x = (x1 + x2) / 2  # 计算中心点坐标
                center_y = (y1 + y2) / 2
                坐标X = 120 + center_x
                坐标Y = 140 + center_y
    return 坐标X, 坐标Y


def 召唤兽忠诚识别():
    global 任务点X坐标
    global 任务点Y坐标
    global 物品
    pyautogui.moveTo(顶点坐标X + 400, 顶点坐标Y + 100)
    pyautogui.hotkey('alt', 'o')
    time.sleep(0.5)
    鼠标移动到指定距离(328, 578, 1)
    忠诚 = 指定窗口文本识别(50, 535, 110, 570)
    # 攻击力 = 指定窗口文本识别(50, 535, 110, 570)
    寿命 = 指定窗口文本识别(507, 370, 574, 387)
    print('忠诚：', 忠诚,'寿命:',寿命)
    time.sleep(0.5)
    pyautogui.hotkey('alt', 'o')
    if int(忠诚) < 88:
        for i in range(3):
            打开或关闭背包()
            打开傲来国飞行旗()
            鼠标移动到指定距离(287, 443, 1, 红点=True)
            打开或关闭背包()
            time.sleep(0.5)
            场景窗口文本识别()
            if '傲' in 场景文本 or '来' in 场景文本:
                打开或关闭地图()
                鼠标移动到指定距离(256, 466, 1)
                打开或关闭地图()
                time.sleep(5)
                for i in range(5):
                    隐藏人物()
                    pyautogui.hotkey('alt', 'h')
                    场景窗口文本识别()
                    鼠标移动到指定距离(406 - (场景点X坐标 - 44) * 20, 310 + (场景点Y坐标 - 28) * 20, 1)
                    time.sleep(1)
                    巫医3 = 单个模板匹配(130, 380, 500, 520, '51222.png', 返回坐标=True)
                    if 巫医3:
                        鼠标移动到指定距离(巫医3[0] + 130, 巫医3[1] + 380, 1)
                        time.sleep(0.5)
                        pyautogui.click()
                        time.sleep(0.5)
                        for i in range(8):
                            回门派()
                            场景窗口文本识别()
                            if 门派场景名称 in 场景文本:
                                break
                        break
                    else:
                        打开或关闭地图()
                        鼠标移动到指定距离(256, 466, 1)
                        打开或关闭地图()
                        time.sleep(4)
                if 巫医3:
                    break
    if int(寿命)<150:
        物品='豆斋果'
        商会购买商品('烹饪', 烹饪价格, 0)
        打开或关闭背包()
        time.sleep(0.5)
        鼠标移动到指定距离(234, 230, 1)
        豆斋果= 单个模板匹配(380, 230, 650, 450, 'shangpin/15.png',0.92, 返回坐标=True, 坐标列表=True,路径='其他')
        桂花丸= 单个模板匹配(380, 230, 650, 450, 'shangpin/18.png',0.92, 返回坐标=True, 坐标列表=True,路径='其他')
        for a in 豆斋果:
            鼠标移动到指定距离(a[0]+380, a[1]+230, 3)
            鼠标移动到指定距离(180, 430, 1)
        for a in 桂花丸:
            鼠标移动到指定距离(a[0]+380, a[1]+230, 3)
        打开或关闭背包()
        for i in range(8):
            回门派()
            场景窗口文本识别()
            if 门派场景名称 in 场景文本:
                break
def 体活检查():
    global 上一次的坐标X
    global 上一次的坐标X
    global 任务点X坐标
    global 任务点Y坐标
    pyautogui.moveTo(顶点坐标X + 400, 顶点坐标Y + 100)
    pyautogui.hotkey('alt', 'w')
    time.sleep(0.5)
    体活 = 指定窗口文本识别(650, 267, 800, 330)
    print(体活)
    time.sleep(0.5)
    pyautogui.hotkey('alt', 'w')
    活力 = re.search(r'活力 (\d+)', 体活).group(1)
    体力 = re.search(r'体力 (\d+)', 体活).group(1)
    print('体活：', 体力, 活力)
    # if int(活力) > 400:
    #     整理到行囊(5, 2)
    #     打开或关闭背包()
    #     time.sleep(0.4)
    #     背包空格数量, _ = 格子检测函数(390, 250, '空', 0)
    #     if 背包空格数量 > 2:
    #         print('背包空格数量:', 背包空格数量)
    #         for _ in range(背包空格数量 - 2):
    #             pyautogui.press('f7')
    #             time.sleep(0.3)
    #         女儿红 = 单个模板匹配(380, 230, 650, 450, 'nverh.png', 0.92, 返回坐标=True, 坐标列表=True)
    #         虎骨 = 单个模板匹配(380, 230, 650, 450, 'hu.png', 0.92, 返回坐标=True, 坐标列表=True)
    #         珍露 = 单个模板匹配(380, 230, 650, 450, 'zhenru.png', 0.92, 返回坐标=True, 坐标列表=True)
    #         if 女儿红:
    #             for 女儿红 in 女儿红:
    #                 鼠标移动到指定距离(女儿红[0] + 380, 女儿红[1] + 230, 1)
    #                 鼠标移动到指定距离(557, 133, 1)
    #                 鼠标移动到指定距离(358, 400, 1)
    #         if 虎骨:
    #             for 虎骨 in 虎骨:
    #                 鼠标移动到指定距离(虎骨[0] + 380, 虎骨[1] + 230, 1)
    #                 鼠标移动到指定距离(557, 133, 1)
    #                 鼠标移动到指定距离(358, 400, 1)
    #         for i, 珍 in enumerate(珍露):
    #             if i < len(珍露) - 1:
    #                 鼠标移动到指定距离(珍[0] + 380, 珍[1] + 230, 1)
    #                 鼠标移动到指定距离(557, 133, 1)
    #                 鼠标移动到指定距离(358, 400, 1)
    #     打开或关闭背包()
    if int(体力) > 400:
        print(体力)
        体力卖掉 = False
        while not 体力卖掉 and 终止按键:
            随机数载入()
            场景窗口文本识别()
            if not '长安'in 场景文本:
                打开或关闭背包()
                打开长安飞行旗()
                鼠标移动到指定距离(591, 328, 1, 红点=True)
                打开或关闭背包()
                time.sleep(0.8)
                打开或关闭地图()
                鼠标移动到指定距离(648, 427, 1)
                打开或关闭地图()
            elif '长安'in 场景文本 and 目标没移动:
                if 516 < 场景点X坐标 < 524 and 72 < 场景点Y坐标 < 77:
                    隐藏人物()
                    pyautogui.hotkey('alt', 'h')
                    鼠标移动到指定距离(437, 293, 1)
                    time.sleep(2)
                    隐藏人物()
                    鼠标移动到指定距离(380, 220, 1)
                    time.sleep(1)
                    鼠标移动到指定距离(210, 393, 1)
                    time.sleep(0.5)
                    鼠标移动到指定距离(446, 357, 1)
                    for _ in range(20):
                        pyautogui.click()
                        time.sleep(0.5)
                    pyautogui.move(0, 70)
                    time.sleep(0.5)
                    pyautogui.click()
                    time.sleep(0.5)
                    pyautogui.rightClick()
                    pyautogui.press('f2')
                    time.sleep(0.5)
                    pyautogui.press('f2')
                    time.sleep(0.5)
                    pyautogui.press('f2')
                    break
                else:
                    if 目标没移动:
                        打开或关闭地图()
                        鼠标移动到指定距离(648, 427, 1)
                        打开或关闭地图()
            time.sleep(0.5)


def 重叠判断(重叠名称, 重叠名称2, 点击方式=1, 类型='点击'):
    战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
    对话框 = 单个模板匹配(500, 300, 777, 430, 'duihuakuang.png', 返回坐标=True)
    if 对话框 and not 战斗中 or 计数器 > 2:
        if 对话框:
            鼠标移动到指定距离(对话框[0] + 500, 对话框[1] + 300, 1)
        pyautogui.keyDown('ctrl')
        点击人物中心(目标点X坐标, 目标点Y坐标)
        pyautogui.move(-100, 0)
        pyautogui.keyUp('ctrl')
        窗口截屏 = ImageGrab.grab(bbox=(
            顶点坐标X + 404 + 目标点X坐标, 顶点坐标Y + 314 + 目标点Y坐标, 顶点坐标X + 404 + 目标点X坐标 + 150,
            顶点坐标Y + 314 + 目标点Y坐标 + 180))
        result = ocr.ocr(窗口截屏)  # 调用cnocr进行识别
        if 类型 == '点击':
            for item in result:
                if 重叠名称 in item['text'] or 重叠名称2 in item['text']:
                    x1, y1 = item['position'][0]  # 获取文本框坐标
                    x2, y2 = item['position'][2]
                    center_x = (x1 + x2) / 2  # 计算中心点坐标
                    center_y = (y1 + y2) / 2
                    坐标X = center_x + 404 + 目标点X坐标
                    坐标Y = center_y + 314 + 目标点Y坐标
                    鼠标移动到指定距离(坐标X, 坐标Y, 点击方式)
                    return True
            else:
                return False
        elif 类型 == '攻击':
            出现次数 = 0
            for item in result:
                for 字 in item['text']:
                    if 字 in 任务文本:
                        出现次数 += 1
                    if 出现次数 > 1:
                        x1, y1 = item['position'][0]  # 获取文本框坐标
                        x2, y2 = item['position'][2]
                        center_x = (x1 + x2) / 2  # 计算中心点坐标
                        center_y = (y1 + y2) / 2
                        坐标X = center_x + 404 + 目标点X坐标
                        坐标Y = center_y + 314 + 目标点Y坐标
                        鼠标移动到指定距离(坐标X, 坐标Y, 点击方式)
                        return True
                if 出现次数 > 1:
                    break
            else:
                return False

def 框关闭函数(首次=False):
    摊位开 = False
    购买键 = False
    对话框 = 单个模板匹配(500, 300, 777, 430, 'duihuakuang.png', 0.91, 返回坐标=True)
    对话框2 = 单个模板匹配(440, 80, 812, 300, 'XX.png', 0.91, 返回坐标=True)
    if 任务类型 == '师门':
        摊位开 = 单个模板匹配(368, 510, 460, 580, 'tanweikai.png', 0.91)
        购买键 = 单个模板匹配(266, 484, 643, 600, 'goumaijian.png', 0.91)
    对话框3 = 单个模板匹配(-10, 0, 100, 230, 'k1.png', 0.91)
    红点 = 单个模板匹配(550, 300, 630, 360, 'hongdian.png', 0.93)
    if 对话框:
        if 首次:
            pyautogui.moveTo(顶点坐标X+600,顶点坐标Y+222)
            鼠标移动到指定距离(对话框[0] + 500, 对话框[1] + 300-30, 4)
            pyautogui.move(0, 27, 0.5)
            pyautogui.click()
        else:
            鼠标移动到指定距离(对话框[0] + 500, 对话框[1] + 300, 1)
    elif 摊位开:
        鼠标移动到指定距离(318, 550, 3)
    elif 购买键:
        鼠标移动到指定距离(300, 500, 3, 0, 20)
        鼠标移动到指定距离(330, 430, 3, 0, 20)
    elif 对话框2:
        if 对话框2[0]+440>777:
            鼠标移动到指定距离(618, 128, 3)
        else:
            鼠标移动到指定距离(对话框2[0] + 440, 对话框2[1] + 80, 1)
    elif 对话框3:
        鼠标移动到指定距离(45, 178, 4)
        pyautogui.move(-30,0,1)
        pyautogui.click()
    elif 红点:
        鼠标移动到指定距离(458, 345, 3)
    print('框关闭已识别')
def 商会购买商品(购买类别,价格,其他图片,其他模板=False):
    global 任务已完成
    购买键 = False
    任务已完成 = False
    if  not 其他模板:
        for index, aa in enumerate(物品转化数字列表):
            if 物品 == aa:
                break
        print('图片张数商会', index+1)
        模板路径 = 'shangpin/' + str(index + 1) + '.png'
    else:
        模板路径=其他图片
    while 终止按键:
        场景窗口文本识别()
        if ('长安' in 场景文本 or '安城' in 场景文本) and 场景点Y坐标 < 25 and 400>场景点X坐标>300:
            if 场景点Y坐标 <= 14:
                鼠标移动到指定距离(406 - (场景点X坐标 - 326) * 20, 260, 1)
            else:
                鼠标移动到指定距离(406 - (场景点X坐标 - 326) * 20, 300 + (场景点Y坐标 - 17) * 20, 1)
            鼠标移动到指定距离(207, 410, 1)
            time.sleep(0.5)
            打开店铺 = 单个模板匹配(200, 400, 400, 550, 'dakaidianpu.png')
            if 打开店铺:
                鼠标移动到指定距离(453, 185, 1)
                for i in range(12):
                    对话框2 = 单个模板匹配(500, 230, 575, 291, 'XX.png', 0.91, 返回坐标=True)
                    if 对话框2:
                        if 购买类别 == '烹饪':
                            鼠标移动到指定距离(408, 323, 1)
                        elif 购买类别 == '三药':
                            鼠标移动到指定距离(408, 345, 1)
                        elif 购买类别 == '家具':
                            鼠标移动到指定距离(308, 345, 1)
                        break
                    else:
                        time.sleep(0.2)
                time.sleep(0.5)
                for i in range(12):
                    对话框2 = 单个模板匹配(500, 230, 575, 291, 'XX.png', 0.91, 返回坐标=True)
                    if not 对话框2:
                        break
                    else:
                        time.sleep(0.2)
                        if 购买类别 == '烹饪':
                            鼠标移动到指定距离(408, 323, 1)
                        elif 购买类别 == '三药':
                            鼠标移动到指定距离(408, 345, 1)
                        elif 购买类别 == '家具':
                            鼠标移动到指定距离(308, 345, 1)
                pyautogui.moveTo(顶点坐标X + 420, 顶点坐标Y + 300)
                翻页(1, 2, 挖图翻页=False)
                pyautogui.moveTo(顶点坐标X + 420, 顶点坐标Y)
                for i in range(15):
                    for a in range(8):
                        打开店铺 = 单个模板匹配(200, 400, 400, 550, 'dakaidianpu.png')
                        if 打开店铺:
                            鼠标移动到指定距离(270, 210 + a * 22, 3)
                            for a in range(10):
                                if a >0:
                                    鼠标移动到指定距离(283 + a * 22, 466-25, 4)
                                    pyautogui.move(0,22)
                                    pyautogui.click()
                                    time.sleep(0.4)
                                else:
                                    time.sleep(0.4)
                                背包空位数量, _ = 格子检测函数(276, 244, '空', 0)
                                print('商会物品空位数量',背包空位数量)
                                商品 = 单个模板匹配(380, 230, 650, 450,模板路径,0.92, 返回坐标=True,路径='其他')
                                if 商品:
                                    鼠标移动到指定距离(商品[0] + 380, 商品[1] + 230, 1)
                                    鼠标移动到指定距离(485, 550, 4)
                                    召唤兽价格 = 指定窗口文本识别(304, 484, 390, 507)
                                    print('价格：', 召唤兽价格)
                                    if 召唤兽价格:
                                        if int(召唤兽价格) < 价格 :
                                            购买键 = 单个模板匹配(266, 484, 643, 600, 'goumaijian.png')
                                            if 购买键:
                                                pyautogui.click()
                                                回门派()
                                                任务已完成=True
                                                break
                                        else:
                                            鼠标移动到指定距离(464, 187, 3)
                                            break
                                购买键 = 单个模板匹配(266, 484, 643, 600, 'goumaijian.png')
                                if not 购买键 or not 终止按键 or 背包空位数量>=19:
                                    break
                            if 任务已完成 or not 终止按键:
                                break
                            购买键 = 单个模板匹配(266, 484, 643, 600, 'goumaijian.png')
                            if 购买键:
                                鼠标移动到指定距离(464, 187, 3)
                    if 任务已完成 or not 终止按键:
                        break
                    购买键 = 单个模板匹配(266, 484, 643, 600, 'goumaijian.png')
                    if 购买键:
                        鼠标移动到指定距离(464, 187, 3)
                    pyautogui.moveTo(顶点坐标X + 420, 顶点坐标Y + 300)
                    翻页(1, 1, 挖图翻页=False)
                    pyautogui.moveTo(顶点坐标X + 420, 顶点坐标Y)
                if 任务已完成 or not 终止按键:
                    break
            else:
                框关闭函数()
        else:
            打开或关闭背包()
            打开长安飞行旗()
            time.sleep(0.3)
            鼠标移动到指定距离(467, 488, 1, 红点=True)
            打开或关闭背包()
            time.sleep(0.4)
            场景窗口文本识别()
        if 任务已完成 or not 终止按键:
            break
def 押镖给与():
    global 任务文本
    global 押镖数
    pyautogui.hotkey('alt', 'g')
    pyautogui.click()
    pyautogui.moveTo(顶点坐标X + 300, 顶点坐标Y + 100)
    time.sleep(0.3)
    镖 = 单个模板匹配(0, 0, 817, 450, 'BBB.png', 返回坐标=True)
    if 镖:
        鼠标移动到指定距离(镖[0], 镖[1], 1)
        鼠标移动到指定距离(245, 470, 1)
        time.sleep(0.5)
        pyautogui.click()
        time.sleep(0.2)
        战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
        if not 战斗中:
            押镖数 += 1
            任务文本 = []
def 刷新账号的任务状态(刷新前, 刷新后, 刷新个数, 刷新全部=False, ):
    with open('账号密码.txt', 'r', encoding='utf-8') as 文件:
        内容 = 文件.read()
    if 刷新全部:
        内容 = 内容.replace(刷新前, 刷新后)
    else:
        内容 = 内容.replace(刷新前, 刷新后, 刷新个数)
    with open('账号密码.txt', 'w', encoding='utf-8') as 文件:
        文件.write(内容)
def 判断是否移动中():
    global 目标没移动
    目标没移动 = False
    模板 = ImageGrab.grab(bbox=(顶点坐标X + 140, 顶点坐标Y + 80, 顶点坐标X + 160, 顶点坐标Y + 100))
    模板2 = ImageGrab.grab(bbox=(顶点坐标X + 380, 顶点坐标Y + 130, 顶点坐标X + 400, 顶点坐标Y + 150))
    模板.save("muban/w.png")
    模板2.save("muban/w2.png")
    time.sleep(0.3)
    目标没移动押镖 = 单个模板匹配(135, 75, 165, 105, "w.png")
    目标没移动押镖2 = 单个模板匹配(375, 125, 405, 155, "w2.png")
    if 目标没移动押镖 or 目标没移动押镖2:
        print('目标没移动目标没移动')
        目标没移动 = True
    else:
        print('目标移动中')
def 任务类型输出函数(我想要完成的任务及顺序, 第几个账号):
    with open('账号密码.txt', 'r', encoding='utf-8') as file:
        行表 = file.read().strip().split('\n\n')
    for index, 任务信息 in enumerate(行表, start=1):
        账号, 密码, 师门, 押镖, 打图, 挖图, 场景挂机 = 任务信息.strip().split('\n')
        这个号未完成的任务列表 = []
        if "未完成" in 师门:
            这个号未完成的任务列表.append('师门')
        if "未完成" in 押镖:
            这个号未完成的任务列表.append('押镖')
        if "未完成" in 打图:
            这个号未完成的任务列表.append('打图')
        if "未完成" in 挖图:
            这个号未完成的任务列表.append('挖图')
        if "未完成" in 场景挂机:
            这个号未完成的任务列表.append('场景挂机')
        if "未完成" in 师门 or "未完成" in 押镖 or "未完成" in 打图 or "未完成" in 挖图 or "未完成" in 场景挂机:
            重新排列后的任务列表 = [task for task in 我想要完成的任务及顺序 if task in 这个号未完成的任务列表]
            print(f'这第{index}个账号{账号}未完成的任务列表:', 这个号未完成的任务列表)
            print('重新排列后的任务列表:', 重新排列后的任务列表)
            不想完成的任务 = [task for task in 这个号未完成的任务列表 if task not in 我想要完成的任务及顺序]
            print('我不想完成的任务:', 不想完成的任务)
            for task in 不想完成的任务:
                if task == '师门':
                    师门 = 师门.replace('师门:未完成', '师门:已完成')
                if task == '押镖':
                    押镖 = 押镖.replace('押镖:未完成', '押镖:已完成')
                if task == '打图':
                    打图 = 打图.replace('打图:未完成', '打图:已完成')
                if task == '挖图':
                    挖图 = 挖图.replace('挖图:未完成', '挖图:已完成')
                if task == '场景挂机':
                    场景挂机 = 场景挂机.replace('场景挂机:未完成', '场景挂机:已完成')
            更新后的任务信息 = '\n'.join([账号, 密码, 师门, 押镖, 打图, 挖图, 场景挂机])
            行表[index - 1] = 更新后的任务信息
            with open('账号密码.txt', 'w', encoding='utf-8') as file:
                file.write('\n\n'.join(行表))
            if 重新排列后的任务列表 != []:
                return 重新排列后的任务列表[0], index, 账号, 密码
            else:
                pass
        else:
            if index == 第几个账号:
                pyautogui.hotkey('alt', 'f4')
                time.sleep(5)
                鼠标移动到指定距离(235, 565, 1)
                print("这个账号的任务已经完成 更换账号")
                return [], index+1, True, 密码
def 场景切换判断(切换到这个场景后退出):
    for i in range(9):
        场景窗口文本识别()
        if 切换到这个场景后退出 in 场景文本:
            return True
        else:
            time.sleep(0.2)
    else:
        框关闭函数()
def 登入梦幻函数(登入方式):
    global 顶点坐标X
    global 顶点坐标Y
    global 左下角坐标Xe
    global 左下角坐标Y
    global 任务类型
    global 第几个账号
    桌面路径 = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')  # 获取桌面路径
    梦幻快捷方式 = os.path.join(桌面路径, '梦幻西游.lnk')  # 替换成你的快捷方式文件名
    try:
        os.startfile(梦幻快捷方式)  # 打开桌面上的快捷方式
    except Exception as e:
        print("An error occurred:", e)
    while 终止按键:
        print('无线等待3')
        time.sleep(1)
        窗口截屏 = ImageGrab.grab(bbox=(0, 0, 1900, 1000))
        窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
        模板 = cv2.imread("muban/dengruanniu.png")
        结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
        坐标 = np.where(结果 >= 0.8)
        if len(坐标[0]) > 0:
            匹配坐标 = (坐标[1][0] + 模板.shape[1] // 2, 坐标[0][0] + 模板.shape[0] // 2)
            pyautogui.click(匹配坐标[0], 匹配坐标[1])
            break
    while 终止按键:
        time.sleep(1)
        窗口截屏 = ImageGrab.grab(bbox=(0, 0, 1900, 1000))
        窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
        模板 = cv2.imread("muban/xiayibu.png")
        结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
        坐标 = np.where(结果 >= 0.8)
        模板2 = cv2.imread("muban/xiayibu2.png")
        结果2 = cv2.matchTemplate(窗口截屏图片, 模板2, cv2.TM_CCOEFF_NORMED)
        坐标2 = np.where(结果2 >= 0.8)
        if len(坐标[0]) > 0 or len(坐标2[0]) > 0:
            break
    if 调整窗口位置:
        窗口句柄函数('梦幻西游', 调整到位置[0], 调整到位置[1], 812, 663, 是否调整位置=True)
    time.sleep(1)
    顶点坐标X, 顶点坐标Y, 左下角坐标X, 左下角坐标Y, 找到窗口 = 窗口句柄函数("梦幻西游", 50, 50, 50, 50)
    pyautogui.click(顶点坐标X + 700, 顶点坐标Y + 600)
    if 登入方式 == '将军令':
        pyautogui.click(1595, 225)
        time.sleep(5)
        pyautogui.click(1668, 400)
        time.sleep(3)
        pyautogui.moveTo(930, 340)
        pyautogui.mouseDown()
        time.sleep(1)
        pyautogui.move(0, 100)
        pyautogui.mouseUp()
        time.sleep(3)
        任务类型, 第几个账号, 账号, 密码 = 任务类型输出函数(我想要完成的任务及顺序, 第几个账号)
        pyautogui.click(1573, 173 - 47 + 47 * 第几个账号)
        time.sleep(2)
        pyautogui.click(1740, 412)
    elif 登入方式 == '扫码':
        while 终止按键:
            time.sleep(1)
            窗口截屏 = ImageGrab.grab(bbox=(0, 0, 1900, 1000))
            窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
            模板 = cv2.imread("muban/jinrujiemie.png")
            结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
            坐标 = np.where(结果 >= 0.8)
            if len(坐标[0]) > 0:
                time.sleep(1)
                匹配坐标 = (坐标[1][0] + 模板.shape[1] // 2, 坐标[0][0] + 模板.shape[0] // 2)
                pyautogui.click(顶点坐标X + 150, 顶点坐标Y + 600)
                break
    elif 登入方式 == '账号':
        time.sleep(2)
        鼠标移动到指定距离(300, 260, 1)
        time.sleep(2)
        键盘 = ctypes.WinDLL("User32.dll")
        VK_CAPITAL = 0x14
        大小写状态 = 键盘.GetKeyState(VK_CAPITAL)
        if 大小写状态 == 1:
            print("大写锁定键已经打开")
            键盘.keybd_event(0x14, 0, 0, 0)
            键盘.keybd_event(0x14, 0, 2, 0)
        任务类型, 第几个账号, 账号, 密码 = 任务类型输出函数(我想要完成的任务及顺序, 第几个账号)
        鼠标移动到指定距离(470, 328, 1)
        for a,i in enumerate(账号):
            if i.isupper():  # Check if the letter is uppercase
                pyautogui.hotkey('shift', i)
            else:
                pyautogui.press(i)
            time.sleep(0.1)
            pyautogui.click()
        pyautogui.press('tab')
        time.sleep(0.5)
        鼠标移动到指定距离(470, 373, 1)
        for i in 密码:
            if i.isupper():  # Check if the letter is uppercase
                pyautogui.hotkey('shift', i)
            else:
                pyautogui.press(i)
            time.sleep(0.1)
            pyautogui.click()
        pyautogui.press('enter')
        while 终止按键:
            time.sleep(1)
            窗口截屏 = ImageGrab.grab(bbox=(0, 0, 1900, 1000))
            窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
            模板 = cv2.imread("muban/xiayibu.png")
            结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
            坐标 = np.where(结果 >= 0.8)
            if len(坐标[0]) > 0:
                time.sleep(1)
                匹配坐标 = (坐标[1][0] + 模板.shape[1] // 2, 坐标[0][0] + 模板.shape[0] // 2)
                break
        pyautogui.click(顶点坐标X + 150, 顶点坐标Y + 600)
        while 终止按键:
            time.sleep(1)
            窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X, 顶点坐标Y, 顶点坐标X+900, 顶点坐标Y+700))
            窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
            模板 = cv2.imread("muban/jinruyouxi.png")
            结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
            坐标 = np.where(结果 >= 0.8)
            if len(坐标[0]) > 0:
                time.sleep(1.5)
                匹配坐标 = (坐标[1][0] + 模板.shape[1] // 2, 坐标[0][0] + 模板.shape[0] // 2)
                pyautogui.click(顶点坐标X + 700, 顶点坐标Y + 617)
                for i in range(5):
                    pyautogui.move(100,0)
                    time.sleep(5)
                    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X, 顶点坐标Y, 顶点坐标X + 900, 顶点坐标Y + 700))
                    窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
                    模板 = cv2.imread("muban/jinruyouxi.png")
                    结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
                    坐标 = np.where(结果 >= 0.8)
                    if len(坐标[0])==0:
                        break
                    elif len(坐标[0]) > 0:
                        pyautogui.click(顶点坐标X + 700, 顶点坐标Y + 617)
                break
        while 终止按键:
            time.sleep(1)
            窗口截屏 = ImageGrab.grab(bbox=(0, 0, 1900, 1000))
            窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
            模板 = cv2.imread("muban/jinruyouxi2.png")
            结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
            坐标 = np.where(结果 >= 0.8)
            if len(坐标[0]) > 0:
                break
        框关闭函数(首次=True)
        for i in range(3):
            time.sleep(0.7)
            窗口截屏 = ImageGrab.grab(bbox=(0, 0, 1900, 1000))
            窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
            模板 = cv2.imread("muban/qiandao.png")
            结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
            坐标 = np.where(结果 >= 0.8)
            if len(坐标[0]) > 0:
                鼠标移动到指定距离(660, 555, 1)
                time.sleep(1)
                对话框 = 单个模板匹配(600, 300, 777, 430, 'duihuakuang.png')
                if 对话框:
                    鼠标移动到指定距离(200, 413, 1)
                    time.sleep(1)
                    鼠标移动到指定距离(520, 368, 1)
                    for i in range(4):
                        time.sleep(1.3)
                        pyautogui.click()
                time.sleep(1)
                鼠标移动到指定距离(700, 157, 1)
                break
            窗口截屏 = ImageGrab.grab(bbox=(0, 0, 1900, 1000))
            窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
            模板 = cv2.imread("muban/qiandao2.png")
            结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
            坐标 = np.where(结果 >= 0.8)
            if len(坐标[0]) > 0:
                鼠标移动到指定距离(635, 380, 1)
                time.sleep(1)
                对话框 = 单个模板匹配(600, 300, 777, 430, 'duihuakuang.png')
                if 对话框:
                    鼠标移动到指定距离(200, 413, 1)
                    time.sleep(1)
                    鼠标移动到指定距离(520, 368, 1)
                    for i in range(4):
                        time.sleep(1.3)
                        pyautogui.click()
                time.sleep(1)
                鼠标移动到指定距离(709, 157, 1)
                break
        任务类型, 第几个账号, 账号, 密码 = 任务类型输出函数(我想要完成的任务及顺序, 第几个账号)
    return 顶点坐标X, 顶点坐标Y, 左下角坐标X, 左下角坐标Y
def 背包宝图文本识别():
    global 挖宝地点,任务点X坐标,任务点Y坐标
    任务点X坐标 = None  # 默认值
    任务点Y坐标 = None  # 默认值
    挖宝地点 = None
    识别成功 = False
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 133, 顶点坐标Y + 180, 顶点坐标X + 600, 顶点坐标Y + 220))
    # 窗口截屏 = ImageGrab.grab(bbox=(0, 0, 500, 500))
    窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    结果列表 = []
    for i, 模板 in enumerate(挖宝场景模板列表[:11]):
        # 模板文件名 = str(i) + '.png'
        # 模板 = cv2.imread(os.path.join('wabao', 模板文件名))
        结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
        坐标 = np.where(结果 >= 0.9)
        if len(坐标[0]) > 0:
            匹配坐标 = [(x + 模板.shape[1] // 2, y + 模板.shape[0] // 2) for x, y in zip(坐标[1], 坐标[0])]
            for 坐标点 in 匹配坐标:
                结果列表.append((*坐标点, i))  # 将坐标点和数字模板索引作为元组的一部分添加到结果列表中
    结果列表 = sorted(结果列表, key=lambda x: x[0])

    # print(结果列表)
    首个X坐标 = 0
    需要保留的位置 = []
    for index, 坐标 in enumerate(结果列表):
        if abs(首个X坐标 - 坐标[0]) > 2:
            需要保留的位置.append(index)
        首个X坐标 = 坐标[0]
    结果列表 = [元素 for 索引, 元素 in enumerate(结果列表) if 索引 in 需要保留的位置]
    # print(结果列表)
    分割点索引 = [索引 for 索引, 元素 in enumerate(结果列表) if 元素[2] == 10]
    if not 分割点索引:
        print("坐标点识别错误")
        return False
    else:
        第一部分 = 结果列表[:分割点索引[0]]
        第二部分 = 结果列表[分割点索引[0] + 1:]
        任务点X坐标 = int(''.join(str(元素[2]) for 元素 in 第一部分))
        任务点Y坐标 = int(''.join(str(元素[2]) for 元素 in 第二部分))
        print('载入的任务点X坐标, 任务点Y坐标',任务点X坐标, 任务点Y坐标)
        识别成功 = True
    for i, 模板 in enumerate(挖宝场景模板列表[11:]):
        结 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
        坐 = np.where(结 >= 0.9)
        if len(坐[0]) > 0:
            挖宝地点 = 挖宝地点列表[i]
            print(挖宝地点)
            break
    return 识别成功
def 摆摊卖货(摆摊地点, 卖货物品, 摆摊坐标X, 摆摊坐标Y, 摆摊时间, 少于个数):
    while 终止按键:
        场景窗口文本识别()
        if 摆摊地点 == '长安城':
            if not '长安' in 场景文本:
                打开或关闭背包()
                打开长安飞行旗()
                鼠标移动到指定距离(651, 372, 1, 红点=True)
                打开或关闭背包()
                打开或关闭地图()
                鼠标移动到指定距离(132 + 摆摊坐标X, 502 - 摆摊坐标Y, 1)
                打开或关闭地图()
            if '长安' in 场景文本 and abs(摆摊坐标X - 场景点X坐标) < 10 and abs(
                    摆摊坐标Y - 场景点Y坐标) < 10:
                打开或关闭背包()
                鼠标移动到指定距离(633, 475, 1)
                鼠标移动到指定距离(633, 410, 1)
                time.sleep(2)
                for i in range(2):
                    _, 坐标列表 = 格子检测函数(430, 245, '有', 0)
                    for 坐标 in 坐标列表:
                        for i in range(5):
                            识别成功 = True
                            print(坐标)
                            鼠标移动到指定距离(坐标[0], 坐标[1] - 25 - 5, 4)
                            pyautogui.move(0, 5)
                            pyautogui.click()
                            time.sleep(0.8)
                            任务文本 = 指定窗口文本识别(坐标[0] - 50, 坐标[1] + 20, 坐标[0] - 50 + 230,
                                                        坐标[1] + 20 + 150)
                            index = 任务文本.find('等级')
                            if index != -1:
                                next_char = 任务文本[index + 2]
                                if next_char.isdigit():
                                    pass
                                else:
                                    任务文本 = 任务文本[:index + 2] + 任务文本[index + 3:]
                            else:
                                pass
                            print(任务文本)
                            if '等级4' in 任务文本 and ('百炼' in 任务文本 or '矿石' in 任务文本):
                                pyautogui.press('backspace', presses=6)
                                pyautogui.typewrite(str(9999), 0.1)
                                鼠标移动到指定距离(670, 470, 4)
                                pyautogui.move(-50, 0)
                                pyautogui.click()
                            elif '等级5' in 任务文本 and ('百炼' in 任务文本 or '矿石' in 任务文本):
                                pyautogui.press('backspace', presses=6)
                                pyautogui.typewrite(str(23222), 0.1)
                                鼠标移动到指定距离(670, 470, 4)
                                pyautogui.move(-50, 0)
                                pyautogui.click()
                            elif '等级6' in 任务文本 and ('百炼' in 任务文本 or '矿石' in 任务文本):
                                print('奥斯的骄傲京东i啊是京东i啊睡觉的')
                                pyautogui.press('backspace', presses=6)
                                pyautogui.typewrite(str(66666), 0.1)
                                鼠标移动到指定距离(670, 470, 4)
                                pyautogui.move(-50, 0)
                                pyautogui.click()
                            elif '等级7' in 任务文本 and ('百炼' in 任务文本 or '矿石' in 任务文本):
                                pyautogui.press('backspace', presses=6)
                                pyautogui.typewrite(str(12999), 0.1)
                                鼠标移动到指定距离(670, 470, 4)
                                pyautogui.move(-50, 0)
                                pyautogui.click()
                            elif '等级4' in 任务文本 and '书卷' in 任务文本:
                                pyautogui.press('backspace', presses=6)
                                pyautogui.typewrite(str(6666), 0.1)
                                鼠标移动到指定距离(670, 470, 4)
                                pyautogui.move(-50, 0)
                                pyautogui.click()
                            elif '等级5' in 任务文本 and '书卷' in 任务文本:
                                pyautogui.press('backspace', presses=6)
                                pyautogui.typewrite(str(9999), 0.1)
                                鼠标移动到指定距离(670, 470, 4)
                                pyautogui.move(-50, 0)
                                pyautogui.click()
                            elif '等级6' in 任务文本 and '书卷' in 任务文本 and (
                                    '项链' in 任务文本 or '腰带' in 任务文本):
                                pyautogui.press('backspace', presses=6)
                                pyautogui.typewrite(str(11011), 0.1)
                                鼠标移动到指定距离(670, 470, 4)
                                pyautogui.move(-50, 0)
                                pyautogui.click()
                            elif '等级6' in 任务文本 and '书卷' in 任务文本:
                                pyautogui.press('backspace', presses=6)
                                pyautogui.typewrite(str(132333), 0.1)
                                鼠标移动到指定距离(670, 470, 4)
                                pyautogui.move(-50, 0)
                                pyautogui.click()
                            elif '等级7' in 任务文本 and '书卷' in 任务文本 and (
                                    '项' in 任务文本 or '腰' in
                                    任务文本 or '头' in 任务文本 or '发' in 任务文本
                                    or '甲' in 任务文本 or '衣' in 任务文本 or '鞋' in 任务文本):
                                pyautogui.press('backspace', presses=6)
                                pyautogui.typewrite(str(77777), 0.1)
                                鼠标移动到指定距离(670, 470, 4)
                                pyautogui.move(-50, 0)
                                pyautogui.click()
                            elif '等级7' in 任务文本 and '书卷' in 任务文本:
                                pyautogui.press('backspace', presses=6)
                                pyautogui.typewrite(str(29999), 0.1)
                                鼠标移动到指定距离(670, 470, 4)
                                pyautogui.move(-50, 0)
                                pyautogui.click()
                            elif '等级3' in 任务文本 or '等级20' in 任务文本 or '等级10' in 任务文本:
                                pyautogui.press('backspace', presses=6)
                                pyautogui.typewrite(str(3433), 0.1)
                                鼠标移动到指定距离(670, 470, 4)
                                pyautogui.move(-50, 0)
                                pyautogui.click()
                            else:
                                识别成功 = False
                                鼠标移动到指定距离(400, 150, 4)
                            time.sleep(0.3)
                            if 识别成功:
                                break
                    鼠标移动到指定距离(668, 466, 1)
                    time.sleep(1)

            else:
                打开或关闭地图()
                鼠标移动到指定距离(132 + 摆摊坐标X, 502 - 摆摊坐标Y, 1)
                打开或关闭地图()
                time.sleep(3)
        elif 摆摊地点 == '建邺城':
            pass
        elif 摆摊地点 == '傲来国':
            pass
        elif 摆摊地点 == '长寿村':
            pass
        while 终止按键:
            _, 坐标列表 = 格子检测函数(430, 245, '有', 1)
            鼠标移动到指定距离(668, 466, 1)
            time.sleep(2)
            _, 坐标列表2 = 格子检测函数(430, 245, '有', 0)
            鼠标移动到指定距离(668, 466, 1)
            print('还有几个摊位物品', len(坐标列表) + len(坐标列表2))
            if len(坐标列表) + len(坐标列表2) < 少于个数:
                print('收摊回家')
                鼠标移动到指定距离(530, 505, 1)
                break
            time.sleep(10)
def 召唤兽店铺识别(模板列表):
    结果列表 = []
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 200, 顶点坐标Y + 190, 顶点坐标X + 400, 顶点坐标Y + 400))
    窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    for 模板 in 模板列表:
        结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
        坐标 = np.where(结果 >= 0.88)
        if len(坐标[0]) > 0:
            匹配坐标 = [(x + 模板.shape[1] // 2, y + 模板.shape[0] // 2) for x, y in zip(坐标[1], 坐标[0])]
            结果列表.extend(匹配坐标)  # 将坐标点和数字模板索引作为元组的一部分添加到结果列表中
    结果列表 = sorted(结果列表, key=lambda x: x[1])
    filtered_list = []
    prev_y = None
    for x, y in 结果列表:
        if prev_y is None or abs(y - prev_y) >= 3:
            filtered_list.append((x, y))
            prev_y = y
    return filtered_list
def 行囊回来(回来所有=False):
    if 回来所有:
        打开或关闭背包()
        鼠标移动到指定距离(516, 230, 1)
        _, 行囊物品坐标 = 格子检测函数(390, 250, '有', 0)
        for 坐标 in 行囊物品坐标:
            鼠标移动到指定距离(坐标[0], 坐标[1], 1)
            鼠标移动到指定距离(437, 223, 1)
        鼠标移动到指定距离(437, 223, 1)
        打开或关闭背包()
    else:
        旗帜在里面 = False
        鼠标移开()
        打开或关闭背包()
        time.sleep(0.4)
        绿7 = 单个模板匹配(380, 230, 650, 450, 'lv7.png', 0.92, 返回坐标=True)
        if not 绿7:
            背包空格数量, _ = 格子检测函数(390, 250, '空', 0)
            print('背包空格数量:', 背包空格数量)
            鼠标移动到指定距离(516, 230, 1)
            time.sleep(0.7)
            绿7 = 单个模板匹配(380, 230, 650, 450, 'lv7.png', 0.92, 返回坐标=True)
            白7 = 单个模板匹配(380, 230, 650, 450, 'bai7.png', 0.92, 返回坐标=True)
            蓝7 = 单个模板匹配(380, 230, 650, 450, 'lan7.png', 0.88, 返回坐标=True)
            摄妖香 = 单个模板匹配(380, 230, 650, 450, 'sheyaoxiang.png', 返回坐标=True)
            if 绿7:
                鼠标移动到指定距离(绿7[0] + 380, 绿7[1] + 230, 1)
                time.sleep(0.2)
                鼠标移动到指定距离(437, 223, 1)
                旗帜在里面 = True
            if 白7:
                鼠标移动到指定距离(白7[0] + 380, 白7[1] + 230, 1)
                time.sleep(0.2)
                鼠标移动到指定距离(437, 223, 1)
            if 蓝7:
                鼠标移动到指定距离(蓝7[0] + 380, 蓝7[1] + 230, 1)
                time.sleep(0.2)
                鼠标移动到指定距离(437, 223, 1)
            if 摄妖香:
                鼠标移动到指定距离(摄妖香[0] + 380, 摄妖香[1] + 230, 1)
                鼠标移动到指定距离(437, 223, 1)
            if 背包空格数量 > 7:
                行囊数量, 行囊列表 = 格子检测函数(390, 250, '有', 0)
                for 坐标 in 行囊列表[:背包空格数量 - 6]:
                    鼠标移动到指定距离(坐标[0], 坐标[1], 1)
                    鼠标移动到指定距离(437, 223, 1)
            鼠标移动到指定距离(437, 223, 1)
            鼠标移开()
            绿7 = 单个模板匹配(380, 230, 650, 450, 'lv7.png', 0.9, 返回坐标=True)
            白7 = 单个模板匹配(380, 230, 650, 450, 'bai7.png', 0.9, 返回坐标=True)
            蓝7 = 单个模板匹配(380, 230, 650, 450, 'lan7.png', 0.88, 返回坐标=True)
            if 绿7:
                鼠标移动到指定距离(绿7[0] + 380, 绿7[1] + 230, 1)
                time.sleep(0.2)
                鼠标移动到指定距离(622, 377, 1)
            if 白7:
                鼠标移动到指定距离(白7[0] + 380, 白7[1] + 230, 1)
                time.sleep(0.2)
                鼠标移动到指定距离(566, 377, 1)
            if 蓝7:
                鼠标移动到指定距离(蓝7[0] + 380, 蓝7[1] + 230, 1)
                time.sleep(0.2)
                鼠标移动到指定距离(520, 377, 1)
        打开或关闭背包()
def 四小人模板匹配():
    global 四小人截屏
    pyautogui.moveTo(顶点坐标X + 300, 顶点坐标Y + 100)
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 270, 顶点坐标Y + 200, 顶点坐标X + 700, 顶点坐标Y + 430))
    原始图像 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    for 模板 in 四小人模板列表:
        result = cv2.matchTemplate(原始图像, 模板, cv2.TM_CCOEFF_NORMED)
        loc = np.where(result >= 0.85)  # 找到匹配程度大于阈值的位置
        排序索引 = np.argsort(loc[0])[::-1]  # 从下到上排序
        loc = (loc[0][排序索引], loc[1][排序索引])
        if len(loc[0]) > 0:  # 如果匹配成功
            pt = (loc[1][0], loc[0][0])  # 取第一个匹配位置
            左上角 = (pt[0], pt[1])
            h, w = 模板.shape[:2]
            右下角 = (pt[0] + w, pt[1] + h)
            中心点X = (pt[0] + 右下角[0]) // 2 + 270
            中心点Y = (pt[1] + 右下角[1]) // 2 + 200
            中心点坐标 = (中心点X, 中心点Y)
            print("模板中心点坐标：", 中心点坐标)
            鼠标移动到指定距离(中心点X, 中心点Y, 1)
            战斗攻击()
            return True
    else:
        if not 四小人截屏:
            print('没有找到四小人已截屏')
            时间 = time.strftime("%Y%m%d%H%M%S") + str(int(time.time() * 1000 % 1000))  # 毫秒级时间戳
            文件名字 = os.path.join(目录, "win_" + 时间 + ".png")
            窗口截屏 = ImageGrab.grab(
                bbox=(顶点坐标X + 150, 顶点坐标Y + 200, 顶点坐标X + 700, 顶点坐标Y + 430))
            窗口截屏.save(文件名字)
            四小人截屏 = True
        鼠标移动到指定距离(222 + 四小人[0] + 160, 100 + 四小人[1] + 90, 1)
        return False
def 召唤兽属性文本输出():
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 320, 顶点坐标Y + 380, 顶点坐标X + 415, 顶点坐标Y + 507))
    窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    结果列表 = []
    for i, 模板 in enumerate(bb3):
        结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
        坐标 = np.where(结果 >= 0.91)
        if len(坐标[0]) > 0:
            匹配坐标 = [(x + 模板.shape[1] // 2, y + 模板.shape[0] // 2) for x, y in zip(坐标[1], 坐标[0])]
            for 坐标点 in 匹配坐标:
                结果列表.append((*坐标点, i))  # 将坐标点和数字模板索引作为元组的一部分添加到结果列表中
    结果列表 = sorted(结果列表, key=lambda x: x[0])
    # 首个X坐标=0
    # 首个Y坐标 = 0
    # 需要保留的位置=[]
    # for index,坐标 in enumerate(结果列表):
    #     if abs(首个X坐标-坐标[0])>2:
    #         需要保留的位置.append(index)
    #     elif abs(首个Y坐标-坐标[1])>2:
    #         需要保留的位置.append(index)
    #     首个X坐标=坐标[0]
    #     首个Y坐标 = 坐标[1]
    # 结果列表 = [元素 for 索引, 元素 in enumerate(结果列表) if 索引 in 需要保留的位置]
    print(len(结果列表))
    排序后的结果列表 = []
    temp_group = []
    结果列表 = sorted(结果列表, key=lambda tup: tup[1])  # 先按 Y 坐标排序
    for item in 结果列表:
        if not temp_group or abs(temp_group[-1][1] - item[1]) < 3:
            temp_group.append(item)
        else:
            排序后的结果列表.append(sorted(temp_group, key=lambda tup: tup[0]))  # 对分组内的元组按 X 坐标排序
            temp_group = [item]
    if temp_group:
        排序后的结果列表.append(sorted(temp_group, key=lambda tup: tup[0]))  # 对最后一组元组排序
    首个数字 = -50
    文本 = []
    for 值 in 排序后的结果列表:
        文本.append('')
        for a in 值:
            文本.append(a[2])
    属性列表 = ["体质", "法力", "力量", "耐力", "敏捷"]
    最终文本 = ""
    attr_index = 0
    for item in 文本:
        if item == '':
            最终文本 += 属性列表[attr_index]
            attr_index += 1
        else:
            最终文本 += str(item)
    print(最终文本)
    return 最终文本
def 物品摧毁():
    打开或关闭背包()
    time.sleep(0.4)
    女儿红 = 单个模板匹配(380, 230, 650, 450, 'nverh.png', 0.92, 返回坐标=True, 坐标列表=True)
    虎骨 = 单个模板匹配(380, 230, 650, 450, 'hu.png', 0.92, 返回坐标=True, 坐标列表=True)
    珍露 = 单个模板匹配(380, 230, 650, 450, 'zhenru.png', 0.92, 返回坐标=True, 坐标列表=True)
    for i,女儿红 in enumerate(女儿红):
        if int(等级) < 100:
            if i < len(女儿红) - 1:
                鼠标移动到指定距离(女儿红[0] + 380, 女儿红[1] + 230, 1)
                鼠标移动到指定距离(557, 133, 1)
                鼠标移动到指定距离(358, 400, 1)
        else:
            鼠标移动到指定距离(女儿红[0] + 380, 女儿红[1] + 230, 1)
            鼠标移动到指定距离(557, 133, 1)
            鼠标移动到指定距离(358, 400, 1)
    for i, 虎骨 in enumerate(虎骨):
        if int(等级) < 100:
            if i < len(虎骨) - 1:
                鼠标移动到指定距离(虎骨[0] + 380, 虎骨[1] + 230, 1)
                鼠标移动到指定距离(557, 133, 1)
                鼠标移动到指定距离(358, 400, 1)
        else:
            鼠标移动到指定距离(虎骨[0] + 380, 虎骨[1] + 230, 1)
            鼠标移动到指定距离(557, 133, 1)
            鼠标移动到指定距离(358, 400, 1)
    for i, 珍 in enumerate(珍露):
        if i < len(珍露) - 1:
            鼠标移动到指定距离(珍[0] + 380, 珍[1] + 230, 1)
            鼠标移动到指定距离(557, 133, 1)
            鼠标移动到指定距离(358, 400, 1)
    打开或关闭背包()


def 回门派():
    pyautogui.press('f2')
    print('已按F2')
    time.sleep(0.6)
    场景窗口文本识别()
    if 门派场景名称[0] in 场景文本 and 门派场景名称[1] in 场景文本:
        print('已到达门派')
        鼠标移动到指定距离(门派路口地图坐标[0], 门派路口地图坐标[1], 4)
        打开或关闭地图()
        time.sleep(0.2)
        pyautogui.click()
        鼠标移动到指定距离(门派路口地图坐标[0], 门派路口地图坐标[1], 1)
        pyautogui.move(250, 0)
        打开或关闭地图()
        框关闭函数()
    else:
        血量检测系统()
        print('未到达门派，重新按F2')
def 自动喊话():
    for i in range(5):
        pyautogui.hotkey('alt', ',')
        time.sleep(0.3)
    for i in range(5):
        窗口截屏 = ImageGrab.grab(bbox=(0, 0, 1900, 1050))
        窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
        模板 = cv2.imread("muban/shurufa.png")
        结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
        坐标 = np.where(结果 >= 0.8)
        if len(坐标[0]) > 0:
            for i in 喊话快捷键:
                pyautogui.press(i)
                time.sleep(0.2)
            pyautogui.press('space')
            time.sleep(0.2)
            pyautogui.press('enter')
            time.sleep(0.2)
            break
        else:
            pyautogui.hotkey('ctrl', 'shift')
            time.sleep(0.5)
def 摊位识别并点击(识别名称, 识别名称2, 识别名称3, 识别名称4):
    窗口截屏 = ImageGrab.grab(bbox=(顶点坐标X + 130, 顶点坐标Y + 60, 顶点坐标X + 800, 顶点坐标Y + 600))
    窗口截屏 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
    result = ocr.ocr(窗口截屏)  # 调用cnocr进行识别
    摊位中心点列表 = []
    for item in result:
        if 识别名称 in item['text'] or 识别名称2 in item['text'] or 识别名称3 in item['text'] or 识别名称4 in item[
            'text']:
            x1, y1 = item['position'][0]  # 获取文本框坐标
            x2, y2 = item['position'][2]
            center_x = (x1 + x2) / 2  # 计算中心点坐标
            center_y = (y1 + y2) / 2
            摊位中心点列表.append((center_x + 130, center_y + 60))
            print('摊位坐标：', center_x, center_y)
    random.shuffle(摊位中心点列表)
    return 摊位中心点列表



# ------------------------------------------00000
目录 = "sixiaoren"  # 设定保存图片的目录
if not os.path.exists(目录):
    os.makedirs(目录)
驿站老板模板文件夹 = 'yizhan'
驿站老板模板列表 = []
for 文件名 in os.listdir(驿站老板模板文件夹):
    if 文件名.endswith('.png') or 文件名.endswith('.jpg'):
        # 读取图像并添加到模板列表中
        模板路径 = os.path.join(驿站老板模板文件夹, 文件名)
        驿站老板模板图像 = cv2.imread(模板路径)
        驿站老板模板列表.append(驿站老板模板图像)

贼王模板文件夹 = 'zeiwang'
贼王模板列表 = []
for 文件名 in os.listdir(贼王模板文件夹):
    if 文件名.endswith('.png') or 文件名.endswith('.jpg'):
        # 读取图像并添加到模板列表中
        模板路径 = os.path.join(贼王模板文件夹, 文件名)
        贼王模板图像 = cv2.imread(模板路径)
        贼王模板列表.append(贼王模板图像)

四小人模板文件夹 = '44'
四小人模板列表 = []
模板文件名列表 = []

for 文件名 in os.listdir(四小人模板文件夹):
    if 文件名.endswith('.png') or 文件名.endswith('.jpg'):
        # 读取图像并添加到模板列表中
        模板路径 = os.path.join(四小人模板文件夹, 文件名)
        四小人模板图像 = cv2.imread(模板路径)
        四小人模板列表.append(四小人模板图像)
        模板文件名列表.append(文件名)
鼠标模板文件夹 = 'shubiao'
鼠标模板列表 = []
for 文件名 in os.listdir(鼠标模板文件夹):
    if 文件名.endswith('.png') or 文件名.endswith('.jpg'):
        模板路径 = os.path.join(鼠标模板文件夹, 文件名)
        鼠标模板图像 = cv2.imread(模板路径)
        鼠标模板列表.append(鼠标模板图像)
三级药列表 = ['定神香', '小还丹', '年保心', '佛光舍', '蝎美人', '水混', '十香返生', '龙丹', '红雪散', '九转还',
              '金香玉']
烹饪列表 = ['佛跳墙', '烤鸭', '珍露酒', '豆斋果', '臭豆', '烤肉', '桂花丸', '翡翠豆', '寿面', '花酒', '百味酒',
            '蛇胆酒', '生梦']
环列表 = ['坤帽', "蛇形月", '玄铁矛','狼刀' ,'八卦坠', '头镰', '赤焰双', '七彩罗刹', '神火扇', '晶帽', '玉女发冠',
          '魔披风', '霓裳羽',
          '风月宝链', '卦坠', '攫魂铃', '双魂引', '孔雀羽', '连珠神弓', '引魂杖', '柳叶鞭', '追星踏月', '游龙剑',
          '惊涛雪',
          '发冠', '青刚刺,', '龙骨甲', '腾云杖', '流云素', '九州履', '兽王', '巨灵神',
          '狂魔镰', '金刚伞', '神绫', '晶棒', '华光刺', '百窜云', '碧水青',
          '鬼牙魂', '震天锤', '北斗七', '鳞宝刀', '满天星', '阴风扇', '金蛇信',  '子母双', '墨玉双', '沧海明珠',
          '玉兔盏', '醉浮生', '游鱼戏', '魂杖', '雷鸣嗜', '玲珑盏', '意宝珠']
一级家具 = ['麻垂曼', '印花', '木圆', '木立', '编地', '榛木床', '君子兰', '蝶兰', '水仙', '文竹', '仙人掌', '银烛台',
            '瓷画瓶', '踏春图', '花地板', '花竹凳']
二级家具 = ['虎坐山', '木地板', '夕阳山', '绘花瓶', '花马桶', '长信宫灯', '云雪', '花鸟图', '狮子图',
            '神仙帐', '卦镇邪', '月牙凳', '木靠背', '麻布地', '兽皮地', '绘立', '鱼吉庆', '玉虎纹', '红木八', '蓝绸绣',
            '白鹤展', '延年灯']
低级宠 = ['骷髅怪', '蛤蟆', '羊头', '花妖', '山贼', '赌徒', '强盗', '野猪', '树怪', '巨蛙', '海龟', '老虎', '狐狸',
          '黑熊']
中级宠 = ['蜘蛛', '兔子怪', '小龙女', '狼', '僵尸', '野鬼', '马面', '牛头', '牛妖', '龟丞相', '虾兵', '蟹将', '熊精']
高级宠 = ['黑山', '蝶仙', '芙蓉子', '巡雨天神', '雨师', '如仙', '星灵仙',
          '地狱战', '蛟龙', '凤凰', '风伯', '天兵', '古代瑞兽', '天将', '白熊', '雷鸟人']
地点库 = ["女儿", "东海湾", "建邺城", "北俱芦洲", "墨家村", "狮驼岭", "普陀", "麒麟山", "五庄观", "国境", "长寿郊",
          "境外", "江南野外", "傲国", "花果", "朱紫国"]
环40级=["九宫坠",'白面狼','江湖夜','凤头钗','缨络丝','神行靴','琥珀腰链','紧身衣','天香披肩','勾魂爪','天蚕丝','风火圈'
    ,'錾金宝','钢禅钺','牙双','火焰枪','龙泉剑','莲华珠','青铜古','烈焰锤','蓉花灯','幽兰帐','雁翅刀','百折扇',
        '蛇骨鞭','云龙棒','铁牛角杖','无极丝','锦绣帷','黑铁拐','铁面扇','金刺轮','青龙牙','点金棒','竹节双','双弦钺','鲤鱼灯'
        ,'金背大砍刀','青锋剑','狼牙锤','钢结鞭','壁玉长','乌金三叉戟','翡翠珠','宝雕长弓','纶巾','珠带','水晶腰','侠客履','龙鳞羽衣','玉树带'
    ,'锁子甲','髅吊坠','苍魂珠','马靴','鳞甲','五彩裙','梅花簪子','面具','银腰','珍珠链','离情环','珍宝珠','龙凤双','白椴杖','紫竹伞',
        '赭石巨剑','玉如意','幽冥鬼爪','乌龙鞭','锯齿矛','双面斧','精钢扇','夜鹰弯刀','八棱金瓜','红灯笼','吴越剑','紫檀弓','金丝彩']

前2页=[ '天将','白熊','野猪', '树怪', '巨蛙', '海龟','虾兵', '蟹将','蝶仙','雷鸟人']
中3到7页顺=['天兵','风伯','地狱战','龟丞相','山贼','强盗','黑山','古代瑞兽']
中3到7页倒=['蛤蟆','羊头','赌徒','小龙女','狼','僵尸','野鬼','马面','牛头','蛟龙','凤凰','巡雨天神','雨师']
后5页=['老虎','花妖','狐狸','黑熊','蜘蛛','兔子怪','熊精','牛妖','芙蓉子','星灵仙','如仙','骷髅怪']
空=['未识别']
召唤兽列表 = 低级宠 + 中级宠 + 高级宠
总列表 = [三级药列表, 烹饪列表, 召唤兽列表, 一级家具, 二级家具, 环列表,环40级,空]
物品转化数字列表 = 三级药列表 + 烹饪列表 + 一级家具 + 二级家具+['金创药','女儿红','虎骨']
# 加载模型
ocr = cnocr.CnOcr(mode='normal')
像素与坐标的比例 = 19.55
左右边缘距离 = 19.8
上下边缘距离 = 15.1
调整后的窗口宽度 = 812
调整后的窗口高度 = 663
窗口的大小比例值 = 1
终止按键 = True
这个账号已完成任务 = False
第几个账号=0

bb3 = []
文件列表 = os.listdir('bb3')
文件列表 = sorted([文件名 for 文件名 in 文件列表 if 文件名.endswith('.png')], key=lambda x: int(os.path.splitext(x)[0]))
for 文件名 in 文件列表:
    if 文件名.endswith('.png'):
        模板路径 = os.path.join('bb3', 文件名)
        模板图像 = cv2.imread(模板路径)
        bb3.append(模板图像)

召唤兽店铺列表 = []
文件列表 = os.listdir('bb1')
文件列表 = sorted([文件名 for 文件名 in 文件列表 if 文件名.endswith('.png')],
                  key=lambda x: int(os.path.splitext(x)[0]))
for 文件名 in 文件列表:
    if 文件名.endswith('.png'):
        模板路径 = os.path.join('bb1', 文件名)
        模板图像 = cv2.imread(模板路径)
        召唤兽店铺列表.append(模板图像)

场景模板列表 = []
文件列表 = os.listdir('shuzi')
文件列表 = sorted([文件名 for 文件名 in 文件列表 if 文件名.endswith('.png')], key=lambda x: int(os.path.splitext(x)[0]))
for 文件名 in 文件列表:
    if 文件名.endswith('.png'):
        模板路径 = os.path.join('shuzi', 文件名)
        模板图像 = cv2.imread(模板路径)
        场景模板列表.append(模板图像)
场景地点 = ["女儿村", "东海湾", "建邺城", "北俱芦洲", "普陀山", "大唐国境", "长寿郊外",
            "大唐境外", "江南野外", "傲来国", "幻境", "朱紫国", "地府", "化生寺", "长安城", "龙宫", "五庄观",
            "凌波城", "狮驼岭", "无底洞",
            "魔王寨", "神木林", "墨家村", "天宫", "大唐官府", "方寸山", "麒麟山", "东海岩洞", "女魁墓", "花果山",
            "天机城", "盘丝岭", "长寿村",
            "长安酒店", "西凉女国", "长风镖局", "战神山", "宝象国"]
挖宝场景模板列表 = []
文件列表 = os.listdir('wabao')
文件列表 = sorted([文件名 for 文件名 in 文件列表 if 文件名.endswith('.png')], key=lambda x: int(os.path.splitext(x)[0]))
for 文件名 in 文件列表:
    if 文件名.endswith('.png'):
        模板路径 = os.path.join('wabao', 文件名)
        模板图像 = cv2.imread(模板路径)
        挖宝场景模板列表.append(模板图像)
挖宝地点列表 = ["女儿村", "东海湾", "建邺城", "北俱芦洲", "墨家村", "狮驼岭", "普陀山", "麒麟山", "五庄观", "长寿郊外",
                "唐境外", "江南野外", "傲来国", "花果山", "朱紫国", "唐国境"]
摊位模板列表=[]
文件列表 = os.listdir('tanwei')
文件列表 = sorted([文件名 for 文件名 in 文件列表 if 文件名.endswith('.png')], key=lambda x: int(os.path.splitext(x)[0]))
for 文件名 in 文件列表:
    if 文件名.endswith('.png'):
        模板路径 = os.path.join('tanwei', 文件名)
        模板图像 = cv2.imread(模板路径)
        摊位模板列表.append(模板图像)
窗口句柄函数('mygj', 0, 0, 200, 600, 是否调整位置=True)
for i in range(4):
    if i >0:
        time.sleep(2)
    pyautogui.FAILSAFE = False
    窗口 = 0
    郊外X, 郊外Y = None, None
    野外X, 野外Y = None, None
    东海X, 东海Y = None, None
    女儿X, 女儿Y = None, None
    酒店X, 酒店Y = None, None
    花果X, 花果Y = None, None
    国境X, 国境Y = None, None
    境外X, 境外Y = None, None
    商会X, 商会Y = None, None
    家具X, 家具Y = None, None
    任务已完成 = False
    宝石商人已清空 = False
    首次前往 = True
    目标没移动 = False
    任务坐标列表 = []
    战斗回合数 = 0
    任务文本 = []
    四小人截屏 = False
    今日领取次数 = 0
    押镖数 = 0
    起始次数=0
    乾坤袋个数 = 0
    上一次的坐标X = 0
    上一次的坐标Y = 0
    书铁已清空 = False
    低级环已清空 = False
    环已清空 = False
    杂货已清空 = False
    重新领取 = False
    战斗类型 = None
    这个仓库没有 = 0
    飞行坐骑 = False
    飞行坐骑已打开 = False
    计数器 = 0
    临时打图次数 = 0
    页数1 = 0
    上一次的任务 = []
    放战利品仓库页数 = 0
    单次挖图坐标 = []
    背包开 = False
    挖宝地点1 = None
    中心点列表1 = []
    today = datetime.date.today()
    with open("时间管理.txt", "r") as file:
        运行日期 = file.read().strip()
        运行日期 = datetime.datetime.strptime(运行日期, "%Y-%m-%d").date() if 运行日期 else None
    if 运行日期 != today:
        刷新账号的任务状态('已', '未', 0, 刷新全部=True)
        print("已刷新账号的登入状态")
        with open("时间管理.txt", "w") as file:
            file.write(today.strftime("%Y-%m-%d"))
    keyboard.on_press(终止循环)
    # 可设置参数
    我想要完成的任务及顺序 = []

    if 师门:
        我想要完成的任务及顺序.append("师门")
    if 打图:
        我想要完成的任务及顺序.append("打图")
    if 押镖:
        我想要完成的任务及顺序.append("押镖")
    if 挖图:
        我想要完成的任务及顺序.append("挖图")
    if 场景挂机:
        我想要完成的任务及顺序.append("场景挂机")
    print(我想要完成的任务及顺序)
    print('函数外 我想要完成的任务及顺序:', 我想要完成的任务及顺序)
    # 1111
    任务点X坐标 = -50
    任务点Y坐标 = -50
    顶点坐标X, 顶点坐标Y, 左下角坐标X, 左下角坐标Y, 找到窗口 = 窗口句柄函数('梦幻西游 ', 812, 663, 50,50 )
    任务类型, 第几个账号, 账号, 密码 = 任务类型输出函数(我想要完成的任务及顺序, 第几个账号)
    if 找到窗口:
        新登号登入 = False
        是否重新载入仓库宝图窗口1 = False
        快捷施法 = False
        这个账号已完成任务 = False
    else:
        这个账号已完成任务 = False
        print('这里开始打开梦幻')
        顶点坐标X, 顶点坐标Y, 左下角坐标X, 左下角坐标Y = 登入梦幻函数(登入方式)
        新登号登入 = True
        是否重新载入仓库宝图窗口1 = True
        快捷施法 = False
    print('任务类型, 第几个账号,这个账号已完成任务', 任务类型, 第几个账号,这个账号已完成任务)
    区名称 = 指定窗口文本识别(0, 0, 350, 35)
    print('区名称',区名称)
    if '方明' in 区名称:
        这个号的区 = '东方明珠'
        三药位置 = '傲来国'
        买图地点 = '宝石'
        家具位置 = '家'
        烹饪位置 = "野外路口"
    elif '功成名就' in 区名称:
        这个号的区 = '功成名就'
        家具位置 = '商会'
        买图地点 = '宝石'
        三药位置 = '长安城'
        烹饪位置 = "野外路口"
    elif '花果山' in 区名称:
        这个号的区 = '花果山'
        三药位置 = '长安城'
        家具位置 = '家'
        烹饪位置 = "街道"
        心灵店铺 = True
        def 前往长安烹饪():
            打开长安飞行旗()
            点击江南野外路口()
            打开或关闭背包()
            time.sleep(0.7)
            打开或关闭地图()
            鼠标移动到指定距离(590, 464, 1)
            打开或关闭地图()
            time.sleep(12)
    elif '龙马精神' in 区名称 :
        这个号的区 = '龙马精神'
        三药位置 = '长安城'
        买图地点 = '宝石'
        家具位置 = '镖局'
        烹饪位置 = "王夫人"
        def 前往长安烹饪():
            打开长安飞行旗()
            点击江南野外路口()
            打开或关闭背包()
            time.sleep(0.7)
            打开或关闭地图()
            鼠标移动到指定距离(590, 464, 1)
            打开或关闭地图()
            time.sleep(12)
    elif '2008' in 区名称:
        这个号的区 = '2008'
        三药位置 = '傲来国'
        宝宝类型 = '功宝宝'
        买图地点 = '宝石'
        家具位置 = '长寿巫医'
        烹饪位置 = "街道"
        三药价格 = 17000
        def 前往长安烹饪():
            打开长安飞行旗()
            鼠标移动到指定距离(467, 488, 1, 红点=True)
            打开或关闭背包()
            time.sleep(0.7)
            打开或关闭地图()
            鼠标移动到指定距离(515, 445, 1)
            打开或关闭地图()
            time.sleep(16)
    elif '孔庙' in 区名称:
        这个号的区 = '孔庙'
        三药位置 = '长寿村'
        买图地点 = '宝石'
        家具位置 = '家'
        烹饪位置 = "野外路口"
        三药价格 = 17000
    elif '陀山' in 区名称 or '东海' in 区名称 :
        这个号的区 = '普陀山'
        买图地点 = '宝石'
        三药位置 = '长安城'
        家具位置 = '家'
        烹饪位置 = "野外路口"
    elif '黄金台' in 区名称:
        这个号的区 = '黄金台'
        三药位置 = '长安城'
        买图地点 = '宝石'
        家具位置 = '长寿巫医'
        烹饪位置 = "王夫人"
    elif '续前缘' in 区名称:
        这个号的区 = '再续前缘'
        三药位置 = '长寿村'
        买图地点 = '宝石'
        家具位置 = '家'
        烹饪位置 = "天台"
        三药价格 = 17000
    while 终止按键:
        战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
        点击自动 = 单个模板匹配(650, 180, 776, 555, 'zidongPC.png')
        if 点击自动:
            pyautogui.hotkey('alt', 'q')
            time.sleep(0.3)
            pyautogui.hotkey('alt', 'a')
            time.sleep(0.3)
            pyautogui.hotkey('alt', 'a')
            time.sleep(0.3)
        elif not 战斗中:
            break
    pyautogui.hotkey('alt', 'w')
    time.sleep(0.5)
    这个号的门派 = 指定窗口文本识别(550, 220, 680, 250)
    # 这个号的门派='化生寺'
    等级 = 指定窗口文本识别(730, 150, 783, 174)
    time.sleep(0.5)
    pyautogui.hotkey('alt', 'w')
    print('这个号的门派',这个号的门派,'这个号的区',这个号的区,'等级',等级)
    物品摧毁()

    if 这个号的门派 == '天宫':
        门派场景名称 = '天宫'
        门派内名称 = '门派里面'
        门派路口坐标XY = (150, 63)
        门派路口地图坐标 = (404, 414)
        门派内师傅坐标X = 29
        def 进入门派府内():
            鼠标移动到指定距离(360, 280, 1)
            鼠标移动到指定距离(130, 260, 4)
            场景切换判断('门派里面')
        def 前往师傅附近():
            for i in range(7):
                print(i)
                场景窗口文本识别()
                if abs(场景点X坐标 - 门派内师傅坐标X) > 10:
                    鼠标移动到指定距离(130, 260, 1)
                    time.sleep(2.5)
                    pyautogui.click()
                    time.sleep(2.5)
                    pyautogui.click()
                    time.sleep(1)
                else:
                    if 目标没移动:
                        break
                time.sleep(0.3)
            else:
                回门派()
        def 点击师傅位置():
            global 任务类型, 第几个账号, 密码
            师门任务坐标 = False
            for i in range(3):
                if abs(场景点X坐标 - 门派内师傅坐标X) < 5:
                    鼠标移动到指定距离(406 - (场景点X坐标 - 25) * 20, 310 + (场景点Y坐标 - 32) * 20, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if not 快捷施法:
                pyautogui.hotkey('alt', 'w')
                for i in range(5):
                    技能位置= 单个模板匹配(250, 160, 500, 550,'TGJN.png', 返回坐标=True)
                    if 技能位置:
                        鼠标移动到指定距离(技能位置[0]+250, 技能位置[1]+160, 3)
                        pyautogui.hotkey('alt', 'q')
                        快捷施法 = True
                        break
                    else:
                        time.sleep(0.4)
            else:
                if 战斗类型 == '示威':
                    鼠标移动到指定距离(273, 298, 1)
                    pyautogui.move(0, -55)
                    pyautogui.hotkey('alt', 's')
                    pyautogui.click()
                    time.sleep(0.3)
                    pyautogui.click()
                    pyautogui.hotkey('alt', 'q')
                    pyautogui.hotkey('alt', 'a')
                else:
                    pyautogui.hotkey('alt', 'q')

            随机小数小
            if 战斗类型 == '场景挂机':
                pyautogui.hotkey('alt', 'd')
            else:
                pyautogui.hotkey('alt', 'a')
    elif 这个号的门派 == '凌波城':
        门派场景名称 = '凌波城'
        门派内名称 = '凌波城'
        门派路口坐标XY = (69, 120)
        门派路口地图坐标 = (396, 285)
        门派内师傅坐标X = 72
        def 前往师傅附近():
            while 终止按键:
                场景窗口文本识别()
                if abs(场景点X坐标 - 门派内师傅坐标X) > 3:
                    if 目标没移动:
                        打开或关闭地图()
                        鼠标移动到指定距离(门派路口地图坐标[0], 门派路口地图坐标[1], 1)
                        打开或关闭地图()
                else:
                    if 目标没移动:
                        break
                time.sleep(0.3)
        def 点击师傅位置():
            师门任务坐标 = False
            for i in range(3):
                if abs(场景点X坐标 - 门派内师傅坐标X) < 10:
                    鼠标移动到指定距离(406 - (场景点X坐标 - 72) * 20, 310 + (场景点Y坐标 - 124) * 20, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if 战斗类型 == '乾坤袋':
                pyautogui.hotkey('alt', 'a')
                随机小数小
                pyautogui.hotkey('alt', 'a')
            else:
                if 战斗回合数 <= 0:
                    if not 快捷施法:
                        pyautogui.hotkey('alt', 'w')
                        for i in range(5):
                            技能位置 = 单个模板匹配(250, 160, 500, 550, 'LBCJN.png', 返回坐标=True)
                            if 技能位置:
                                鼠标移动到指定距离(技能位置[0] + 250, 技能位置[1] + 160, 3)
                                pyautogui.hotkey('alt', 'q')
                                快捷施法 = True
                                break
                            else:
                                time.sleep(0.4)
                    else:
                        if 战斗类型 == '示威':
                            鼠标移动到指定距离(273, 298, 1)
                            pyautogui.move(0, -55)
                            pyautogui.hotkey('alt', 's')
                            pyautogui.click()
                            time.sleep(0.3)
                            pyautogui.click()
                            pyautogui.hotkey('alt', 'q')
                            pyautogui.hotkey('alt', 'a')
                        else:
                            pyautogui.hotkey('alt', 'q')
                            pyautogui.hotkey('alt', 'a')
                elif 战斗回合数 > 0:
                    if 战斗类型 == '示威':
                        鼠标移动到指定距离(273, 298, 1)
                        pyautogui.move(0, -55)
                        pyautogui.click()
                        time.sleep(0.3)
                        pyautogui.click()
                        pyautogui.hotkey('alt', 'a')
                        pyautogui.hotkey('alt', 'a')
                    else:
                        pyautogui.hotkey('alt', 'a')
                        pyautogui.hotkey('alt', 'a')
                随机小数小
                if 战斗类型 == '场景挂机':
                    pyautogui.hotkey('alt', 'd')
                else:
                    pyautogui.hotkey('alt', 'a')
    elif 这个号的门派 == '大唐官府':
        门派场景名称 = '大唐官府'
        门派内名称 = '门派里面'
        门派路口坐标XY = (77, 46)
        门派路口地图坐标 = (358, 392)
        门派内师傅坐标X = 20
        def 进入门派府内():
            鼠标移动到指定距离(360, 280, 1)
            鼠标移动到指定距离(280, 360, 4)
            场景切换判断('门派里面')
        def 前往师傅附近():
            if 场景点X坐标 >31:
                pyautogui.press('f9')
                鼠标移动到指定距离(280, 360, 1)
                time.sleep(2.5)
        def 点击师傅位置():
            师门任务坐标 = False
            for i in range(3):
                场景窗口文本识别()
                if 20 <= 场景点X坐标 < 31 and 8 <= 场景点Y坐标 <= 16 and 目标没移动:
                    鼠标移动到指定距离(406 - (场景点X坐标 - 20) * 20, 310 + (场景点Y坐标 - 17) * 20, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if 战斗类型 == '示威':
                鼠标移动到指定距离(273, 298, 1)
                pyautogui.move(0, -55)
                pyautogui.click()
                time.sleep(0.3)
                pyautogui.click()
                pyautogui.hotkey('alt', 'a')
                pyautogui.hotkey('alt', 'a')
            else:
                pyautogui.hotkey('alt', 'a')
                随机小数小
                if 战斗类型 == '场景挂机':
                    pyautogui.hotkey('alt', 'd')
                else:
                    pyautogui.hotkey('alt', 'a')
    elif 这个号的门派 == '普陀山':
        门派场景名称 = '普陀山'
        门派内名称 = '潮音洞'
        门派路口坐标XY = (9, 61)
        门派路口地图坐标 = (200, 250)
        def 进入门派府内():
            框关闭函数()
            鼠标移动到指定距离(140, 100, 1)
            鼠标移动到指定距离(135, 157, 4)
            场景切换判断('门派里面')
        def 前往师傅附近():
            while 终止按键:
                print('无线等待2')
                场景窗口文本识别()
                if 18 < 场景点X坐标:
                    if 目标没移动:
                        鼠标移动到指定距离(135, 157, 1)
                        time.sleep(4.5)
                        pyautogui.click()
                        框关闭函数()
                        time.sleep(2.8)
                else:
                    break
                time.sleep(0.3)
        def 点击师傅位置():
            师门任务坐标 = False
            for i in range(5):
                if 25 > 场景点X坐标:
                    鼠标移动到指定距离(260, 235, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if not 快捷施法:
                pyautogui.hotkey('alt', 'w')
                for i in range(5):
                    技能位置= 单个模板匹配(250, 160, 500, 550,'PTJN.png', 返回坐标=True)
                    if 技能位置:
                        鼠标移动到指定距离(技能位置[0]+250, 技能位置[1]+160, 3)
                        pyautogui.hotkey('alt', 'q')
                        快捷施法 = True
                        break
                    else:
                        time.sleep(0.4)
            else:
                if 战斗类型 == '示威':
                    鼠标移动到指定距离(273, 298, 1)
                    pyautogui.move(0, -55)
                    pyautogui.hotkey('alt', 's')
                    pyautogui.click()
                    time.sleep(0.3)
                    pyautogui.click()
                    pyautogui.hotkey('alt', 'q')
                    pyautogui.hotkey('alt', 'a')
                else:
                    pyautogui.hotkey('alt', 'q')
            随机小数小
            if 战斗类型 == '场景挂机':
                pyautogui.hotkey('alt', 'd')
            else:
                pyautogui.hotkey('alt', 'a')
        def 回门派():
            pyautogui.press('f2')
            time.sleep(0.6)
            场景窗口文本识别()
            if 门派场景名称[0] in 场景文本 and 门派场景名称[1] in 场景文本:
                pass
            else:
                血量检测系统()
    elif 这个号的门派 == '五庄观':
        门派场景名称 = '五庄观'
        门派内名称 = '门派里面'
        门派路口坐标XY = (57, 37)
        门派路口地图坐标 = (405, 375)
        门派内师傅坐标X = 24
        飞行坐骑 = False
        def 进入门派府内():
            鼠标移动到指定距离(530, 260, 1)
            鼠标移动到指定距离(492, 358, 4)
            场景切换判断('门派里面')
        def 前往师傅附近():
            return True
        def 点击师傅位置():
            师门任务坐标 = False
            for i in range(3):
                if abs(场景点X坐标 - 门派内师傅坐标X) < 10:
                    鼠标移动到指定距离(500, 383, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if 战斗类型 == '乾坤袋':
                pyautogui.hotkey('alt', 'a')
                随机小数小
                pyautogui.hotkey('alt', 'a')
            else:
                随机小数小
                血量 = 血量检测系统(只检测血量=True)
                print('血量:', 血量)
                if 血量 > 0.73:
                    if not 快捷施法:
                        pyautogui.hotkey('alt', 'w')
                        for i in range(5):
                            技能位置 = 单个模板匹配(250, 160, 500, 550, 'WZJN.png', 返回坐标=True)
                            if 技能位置:
                                鼠标移动到指定距离(技能位置[0] + 250, 技能位置[1] + 160, 3)
                                pyautogui.hotkey('alt', 'q')
                                快捷施法 = True
                                break
                            else:
                                time.sleep(0.4)
                    else:
                        if 战斗类型 == '示威':
                            鼠标移动到指定距离(273, 298, 1)
                            pyautogui.move(0, -55)
                            pyautogui.hotkey('alt', 's')
                            pyautogui.click()
                            time.sleep(0.3)
                            pyautogui.click()
                            pyautogui.hotkey('alt', 'q')
                            pyautogui.hotkey('alt', 'a')
                        else:
                            pyautogui.hotkey('alt', 'q')
                else:
                    if 战斗类型 == '示威':
                        鼠标移动到指定距离(273, 298, 1)
                        pyautogui.move(0, -55)
                        pyautogui.click()
                        time.sleep(0.3)
                        pyautogui.click()
                        pyautogui.hotkey('alt', 'a')
                        pyautogui.hotkey('alt', 'a')
                    else:
                        pyautogui.hotkey('alt', 'a')
                随机小数小
                if 战斗类型 == '场景挂机':
                    pyautogui.hotkey('alt', 'd')
                else:
                    pyautogui.hotkey('alt', 'a')
    elif 这个号的门派 == '花果山':
        门派场景名称 = '幻境'
        门派内名称 = '幻境'
        门派路口坐标XY = (69, 120)
        门派路口地图坐标 = (428, 263)
        门派内师傅坐标X = 91
        def 前往师傅附近():
            while 终止按键:
                场景窗口文本识别()
                if abs(场景点X坐标 - 门派内师傅坐标X) > 3:
                    if 目标没移动:
                        打开或关闭地图()
                        鼠标移动到指定距离(门派路口地图坐标[0], 门派路口地图坐标[1], 1)
                        打开或关闭地图()
                else:
                    if 目标没移动:
                        break
                time.sleep(0.3)
        def 点击师傅位置():
            师门任务坐标 = False
            for i in range(3):
                if abs(场景点X坐标 - 门派内师傅坐标X) < 10:
                    time.sleep(1)
                    鼠标移动到指定距离(406 - (场景点X坐标 - 90) * 19, 310 + (场景点Y坐标 - 105) * 20, 1)
                    鼠标移动到指定距离(406 - (场景点X坐标 - 94) * 20, 310 + (场景点Y坐标 - 107) * 20, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if 战斗类型 == '乾坤袋':
                pyautogui.hotkey('alt', 'a')
                随机小数小
                pyautogui.hotkey('alt', 'a')
            else:
                if 战斗类型 == '示威':
                    鼠标移动到指定距离(273, 298, 1)
                    pyautogui.move(0, -55)
                    pyautogui.click()
                    time.sleep(0.3)
                    pyautogui.click()
                    pyautogui.hotkey('alt', 'a')
                    pyautogui.hotkey('alt', 'a')
                else:
                    pyautogui.hotkey('alt', 'a')
                    随机小数小
                    if 战斗类型 == '场景挂机':
                        pyautogui.hotkey('alt', 'd')
                    else:
                        pyautogui.hotkey('alt', 'a')
    elif 这个号的门派 == '盘丝洞':
        门派场景名称 = '盘丝岭'
        门派内名称 = '门派里面'
        门派路口坐标XY = (189, 127)
        门派路口地图坐标 = (531, 280)
        门派内师傅坐标X = 33
        def 进入门派府内():
            鼠标移动到指定距离(634, 226, 1)
            鼠标移动到指定距离(400, 100, 4)
            场景切换判断('门派里面')
        def 前往师傅附近():
            while 终止按键:
                场景窗口文本识别()
                if abs(场景点X坐标 - 门派内师傅坐标X) > 10:
                    隐藏人物()
                    鼠标移动到指定距离(400, 100, 1)
                    time.sleep(3)
                    隐藏人物()
                    鼠标移动到指定距离(570, 135, 1)
                    time.sleep(2)
                else:
                    if 目标没移动:
                        time.sleep(0.3)
                        break
                time.sleep(0.3)
        def 点击师傅位置():
            师门任务坐标 = False
            for i in range(3):
                if abs(场景点X坐标 - 门派内师傅坐标X) < 5:
                    鼠标移动到指定距离(406 - (场景点X坐标 - 33) * 20, 310 + (场景点Y坐标 - 42) * 20, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if not 快捷施法:
                pyautogui.hotkey('alt', 'w')
                for i in range(5):
                    技能位置 = 单个模板匹配(250, 160, 500, 550, 'PSJN.png', 返回坐标=True)
                    if 技能位置:
                        鼠标移动到指定距离(技能位置[0] + 250, 技能位置[1] + 160, 3)
                        pyautogui.hotkey('alt', 'q')
                        快捷施法 = True
                        break
                    else:
                        time.sleep(0.4)
            else:
                if 战斗类型 == '示威':
                    鼠标移动到指定距离(273, 298, 1)
                    pyautogui.move(0, -55)
                    pyautogui.hotkey('alt', 's')
                    pyautogui.click()
                    time.sleep(0.3)
                    pyautogui.click()
                    pyautogui.hotkey('alt', 'q')
                    pyautogui.hotkey('alt', 'a')
                else:
                    pyautogui.hotkey('alt', 'q')
            随机小数小
            if 战斗类型 == '场景挂机':
                pyautogui.hotkey('alt', 'd')
            else:
                pyautogui.hotkey('alt', 'a')
    elif 这个号的门派 == '阴曹地府':
        门派场景名称 = '地府'
        门派内名称 = '门派里面'
        门派路口坐标XY = (27, 68)
        门派路口地图坐标 = (258, 362)
        门派内师傅坐标X = 35
        def 进入门派府内():
            鼠标移动到指定距离(340, 270, 1)
            鼠标移动到指定距离(311, 120, 4)
            场景切换判断('门派里面')
        def 前往师傅附近():
            while 终止按键:
                场景窗口文本识别()
                if 场景点Y坐标>=12 and 目标没移动:
                    隐藏人物()
                    鼠标移动到指定距离(311, 120, 1)
                    time.sleep(2.2)
                    隐藏人物()
                    鼠标移动到指定距离(176, 168, 1)
                    time.sleep(1)
                else:
                    if 目标没移动:
                        break
                time.sleep(0.3)
        def 点击师傅位置():
            师门任务坐标=False
            for i in range(3):
                if 场景点Y坐标<12:
                    鼠标移动到指定距离(406 - (场景点X坐标 - 27) * 20, 310 + (场景点Y坐标 - 11) * 20, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if 战斗类型 == '示威':
                鼠标移动到指定距离(273, 298, 1)
                pyautogui.move(0, -55)
                pyautogui.click()
                time.sleep(0.3)
                pyautogui.click()
                pyautogui.hotkey('alt', 'a')
                pyautogui.hotkey('alt', 'a')
            else:
                pyautogui.hotkey('alt', 'a')
                if 战斗类型 == '场景挂机':
                    pyautogui.hotkey('alt', 'd')
                else:
                    pyautogui.hotkey('alt', 'a')
    elif 这个号的门派 == '狮驼岭':
        门派场景名称 = '狮驼岭'
        门派内名称 = '门派里面'
        门派路口坐标XY = (116, 26)
        门派路口地图坐标 = (515, 435)
        门派内师傅坐标X = 29
        def 进入门派府内():
            鼠标移动到指定距离(600, 250, 1)
            鼠标移动到指定距离(500, 300, 4)
            场景切换判断('门派里面')
        def 前往师傅附近():
            while 终止按键:
                场景窗口文本识别()
                if 场景点X坐标<=20 and 目标没移动:
                    隐藏人物()
                    鼠标移动到指定距离(500, 300, 1)
                    time.sleep(1)
                else:
                    if 目标没移动:
                        break
                time.sleep(0.3)

        def 点击师傅位置():
            师门任务坐标 = False
            for i in range(3):
                if abs(场景点X坐标 - 门派内师傅坐标X) < 10:
                    鼠标移动到指定距离(406 - (场景点X坐标 - 29) * 20, 310 + (场景点Y坐标 - 20) * 20, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if 战斗类型 == '示威':
                鼠标移动到指定距离(273, 298, 1)
                pyautogui.move(0, -55)
                pyautogui.click()
                time.sleep(0.3)
                pyautogui.click()
                pyautogui.hotkey('alt', 'a')
                pyautogui.hotkey('alt', 'a')
            else:
                pyautogui.hotkey('alt', 'a')
                if 战斗类型 == '场景挂机':
                    pyautogui.hotkey('alt', 'd')
                else:
                    pyautogui.hotkey('alt', 'a')
    elif 这个号的门派 == '龙宫':
        门派场景名称 = '龙宫'
        门派内名称 = '门派里面'
        门派路口坐标XY = (115, 63)
        门派路口地图坐标 = (390, 364)
        门派内师傅坐标X = 29
        def 进入门派府内():
            鼠标移动到指定距离(404, 284, 1)
            鼠标移动到指定距离(710, 350, 4)
            场景切换判断('门派里面')
        def 前往师傅附近():
            while 终止按键:
                场景窗口文本识别()
                if 场景点X坐标<=21 and 目标没移动:
                    隐藏人物()
                    鼠标移动到指定距离(672, 318, 1)
                    time.sleep(2.7)
                else:
                    if 目标没移动:
                        break
                time.sleep(0.3)

        def 点击师傅位置():
            师门任务坐标 = False
            for i in range(3):
                if abs(场景点X坐标 - 门派内师傅坐标X) < 10:
                    鼠标移动到指定距离(406 - (场景点X坐标 - 38) * 20, 310 + (场景点Y坐标 -19 ) * 20, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if not 快捷施法:
                pyautogui.hotkey('alt', 'w')
                for i in range(5):
                    技能位置 = 单个模板匹配(250, 160, 500, 550, 'LGJN.png', 返回坐标=True)
                    if 技能位置:
                        鼠标移动到指定距离(技能位置[0] + 250, 技能位置[1] + 160, 3)
                        pyautogui.hotkey('alt', 'q')
                        快捷施法 = True
                        break
                    else:
                        time.sleep(0.4)
            else:
                if 战斗类型 == '示威':
                    鼠标移动到指定距离(273, 298, 1)
                    pyautogui.move(0, -55)
                    pyautogui.hotkey('alt', 's')
                    pyautogui.click()
                    time.sleep(0.3)
                    pyautogui.click()
                    pyautogui.hotkey('alt', 'q')
                    pyautogui.hotkey('alt', 'a')
                else:
                    pyautogui.hotkey('alt', 'q')
            随机小数小
            if 战斗类型 == '场景挂机':
                pyautogui.hotkey('alt', 'd')
            else:
                pyautogui.hotkey('alt', 'a')
    elif 这个号的门派 == '女儿村':
        门派场景名称 = '女儿村'
        门派内名称 = '门派里面'
        门派路口坐标XY = (13, 124)
        门派路口地图坐标 = (240, 252)
        门派内师傅坐标X = 35
        def 进入门派府内():
            鼠标移动到指定距离(267, 281, 1)
            鼠标移动到指定距离(228, 250, 4)
            场景切换判断('门派里面')
        def 前往师傅附近():
            return True
        def 点击师傅位置():
            师门任务坐标 = False
            for i in range(3):
                if abs(场景点X坐标 - 门派内师傅坐标X) < 10:
                    鼠标移动到指定距离(228, 250, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if not 快捷施法:
                pyautogui.hotkey('alt', 'w')
                for i in range(5):
                    技能位置 = 单个模板匹配(250, 160, 500, 550, 'NVERJN.png', 返回坐标=True)
                    if 技能位置:
                        鼠标移动到指定距离(技能位置[0] + 250, 技能位置[1] + 160, 3)
                        pyautogui.hotkey('alt', 'q')
                        快捷施法 = True
                        break
                    else:
                        time.sleep(0.4)
            else:
                if 战斗类型 == '示威':
                    鼠标移动到指定距离(273, 298, 1)
                    pyautogui.move(0, -55)
                    pyautogui.hotkey('alt', 's')
                    pyautogui.click()
                    time.sleep(0.3)
                    pyautogui.click()
                    pyautogui.hotkey('alt', 'q')
                    pyautogui.hotkey('alt', 'a')
                else:
                    pyautogui.hotkey('alt', 'q')
            随机小数小
            if 战斗类型 == '场景挂机':
                pyautogui.hotkey('alt', 'd')
            else:
                pyautogui.hotkey('alt', 'a')
    elif 这个号的门派 == '无底洞':
        门派场景名称 = '无底洞'
        门派内名称 = '门派里面'
        门派路口坐标XY = (59, 49)
        门派路口地图坐标 = (383, 441)
        门派内师傅坐标X = 47
        def 进入门派府内():
            鼠标移动到指定距离(400, 255, 1)
            鼠标移动到指定距离(483, 125, 4)
            场景切换判断('门派里面')
        def 前往师傅附近():
            while 终止按键:
                场景窗口文本识别()
                if 场景点X坐标 < 38 and 目标没移动:
                    隐藏人物()
                    鼠标移动到指定距离(552, 111, 1)
                    time.sleep(2.5)
                    鼠标移动到指定距离(715, 369, 1)
                    time.sleep(2.5)
                else:
                    if 目标没移动:
                        break
                time.sleep(0.3)
        def 点击师傅位置():
            师门任务坐标 = False
            for i in range(3):
                if abs(场景点X坐标 - 门派内师傅坐标X) < 10:
                    鼠标移动到指定距离(406 - (场景点X坐标 - 47) * 20, 310 + (场景点Y坐标 -29 ) * 20, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if not 快捷施法:
                pyautogui.hotkey('alt', 'w')
                for i in range(5):
                    技能位置 = 单个模板匹配(250, 160, 500, 550, 'WDDJN.png', 返回坐标=True)
                    if 技能位置:
                        鼠标移动到指定距离(技能位置[0] + 250, 技能位置[1] + 160, 3)
                        pyautogui.hotkey('alt', 'q')
                        快捷施法 = True
                        break
                    else:
                        time.sleep(0.4)
            else:
                if 战斗类型 == '示威':
                    鼠标移动到指定距离(273, 298, 1)
                    pyautogui.move(0, -55)
                    pyautogui.hotkey('alt', 's')
                    pyautogui.click()
                    time.sleep(0.3)
                    pyautogui.click()
                    pyautogui.hotkey('alt', 'q')
                    pyautogui.hotkey('alt', 'a')
                else:
                    pyautogui.hotkey('alt', 'q')
            随机小数小
            if 战斗类型 == '场景挂机':
                pyautogui.hotkey('alt', 'd')
            else:
                pyautogui.hotkey('alt', 'a')
    elif 这个号的门派 == '化生寺':
        门派场景名称 = '化生寺'
        门派内名称 = '门派里面'
        门派路口坐标XY = (90, 53)
        门派路口地图坐标 = (446, 357)
        门派内师傅坐标X = 10
        def 进入门派府内():
            鼠标移动到指定距离(464, 274, 1)
            场景切换判断('门派里面')
        def 前往师傅附近():
            return True
        def 点击师傅位置():
            师门任务坐标 = False
            for i in range(3):
                if abs(场景点X坐标 - 门派内师傅坐标X) < 10:
                    鼠标移动到指定距离(331, 296, 1)
                    for i in range(7):
                        time.sleep(0.1)
                        师门任务坐标 = 单个模板匹配(360, 370, 500, 450, 'shimenrenwu.png', 0.8, 返回坐标=True)
                        if 师门任务坐标 or 这个账号已完成任务:
                            break
                    else:
                        战神山特别任务取消()
                    if 师门任务坐标 or 这个账号已完成任务:
                        break
            else:
                回门派()
            return 师门任务坐标
        def 战斗攻击():
            global 快捷施法
            if not 快捷施法:
                pyautogui.hotkey('alt', 'w')
                for i in range(5):
                    技能位置 = 单个模板匹配(250, 160, 500, 550, 'HSJN.png', 返回坐标=True)
                    if 技能位置:
                        鼠标移动到指定距离(技能位置[0] + 250, 技能位置[1] + 160, 3)
                        pyautogui.hotkey('alt', 'q')
                        快捷施法 = True
                        break
                    else:
                        time.sleep(0.4)
            else:
                if 战斗类型 == '示威':
                    鼠标移动到指定距离(273, 298, 1)
                    pyautogui.move(0, -55)
                    pyautogui.hotkey('alt', 's')
                    pyautogui.click()
                    time.sleep(0.3)
                    pyautogui.click()
                    pyautogui.hotkey('alt', 'q')
                    pyautogui.hotkey('alt', 'a')
                else:
                    pyautogui.hotkey('alt', 'q')
            随机小数小
            if 战斗类型 == '场景挂机':
                pyautogui.hotkey('alt', 'd')
            else:
                pyautogui.hotkey('alt', 'a')
    # 任务类型 = '场景挂机'
    if 新登号登入:
        随机数载入()
        窗口1的时间管理()
        for i in range(8):
            回门派()
            场景窗口文本识别()
            if 门派场景名称 in 场景文本:
                break
        # 行囊回来()
        for i in range(2):
            框关闭函数(首次=True)
            time.sleep(0.5)
        体活检查()
        判断今天是否节日并领取()
        召唤兽忠诚识别()
        if 是否自动喊话:
            自动喊话()
        if 是否自动回复:
            for i in range(5):
                窗口截屏 = ImageGrab.grab(bbox=(0, 0, 1900, 1050))
                窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
                模板 = cv2.imread("muban/shurufa.png")
                结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
                坐标 = np.where(结果 >= 0.8)
                if len(坐标[0]) > 0:
                    break
                else:
                    pyautogui.hotkey('ctrl', 'shift')
                    time.sleep(0.5)
            pyautogui.hotkey('alt', 's')
            鼠标移动到指定距离(340, 430, 1)
            time.sleep(0.5)
            for i in 自动回复:
                pyautogui.press(i)
                time.sleep(0.2)
            pyautogui.press('space')
            time.sleep(0.2)
            鼠标移动到指定距离(360, 460, 1)
            pyautogui.hotkey('alt', 's')
    需要找列表 = ['力量武超群', '体质强体壮', '法力高深', '敏捷身手', '耐力刀枪不入']
    # 22222
    #打图次数=6
    是否重新载入仓库宝图窗口1 = True
    # while 终止按键:
    #     随机数载入()
    #     框关闭函数()
    #     打开长寿村飞行旗()
    #     鼠标移动到指定距离(477, 356, 1, 红点=True)
    #     time.sleep(1)
    #     time.sleep(1)
    # 任务文本 = '狼牙刀'

    场景窗口文本识别()
    框关闭函数(首次=True)
    while not 这个账号已完成任务:
        print(', 这个账号已完成任务首', 这个账号已完成任务)
        随机数载入()
        战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
        if 战斗中:
            首次前往 = True
            print('战斗类型', 战斗类型)
            点击自动 = 单个模板匹配(650, 180, 776, 555, 'zidongPC.png')
            if 战斗类型 == '乾坤袋':
                if 5 > 战斗回合数 > 0 and 点击自动:
                    打开或关闭背包()
                    time.sleep(0.3)
                    乾坤袋坐标 = 单个模板匹配(272, 228, 550, 500, 'qiankundai.png', 0.88, 返回坐标=True)
                    if 乾坤袋坐标:
                        鼠标移动到指定距离(int(乾坤袋坐标[0]) + 272, int(乾坤袋坐标[1]) + 228, 1, 0)
                        pyautogui.move(-int(乾坤袋坐标[0] + 5), -int(乾坤袋坐标[1] - 6), 0.1)
                        pyautogui.click()
                        time.sleep(0.4)
                        点击自动2 = 单个模板匹配(650, 180, 777, 555, 'zidongPC2.png')
                        if not 点击自动2:
                            for A in (10, 10, 10, 10, 10, 10):
                                pyautogui.move(A, 0)
                                pyautogui.click()
                                time.sleep(0.4)
                                点击自动2 = 单个模板匹配(650, 180, 777, 555, 'zidongPC2.png')
                                if 点击自动2 or not 终止按键:
                                    if 战斗回合数 >= 3:
                                        pyautogui.hotkey('alt', 'a')
                                    else:
                                        pyautogui.hotkey('alt', 'd')
                                    战斗回合数 += 1
                                    break
                            else:
                                pyautogui.rightClick()
                                战斗回合数 += 5
                        else:
                            if 战斗回合数 >= 3:
                                pyautogui.hotkey('alt', 'a')
                            else:
                                pyautogui.hotkey('alt', 'd')
                            战斗回合数 += 1
                    else:
                        pyautogui.move(300,0)
                    time.sleep(2)
                elif 战斗回合数 > 4 and 点击自动:
                    战斗攻击()
                    time.sleep(3)
            elif (战斗类型 == '苦战' or 战斗类型 == '示威' or 战斗类型 == '打图' or 战斗类型 == '押镖') and 点击自动:
                战斗攻击()
                time.sleep(2)
                战斗回合数 += 1
                框关闭函数()
            elif 战斗类型 == '贼王':
                if 点击自动:
                    强盗 = 单个模板匹配(0, 0, 630, 450, 'qiangdaowang.png', 0.88, 返回坐标=True)
                    if 强盗:
                        鼠标移动到指定距离(强盗[0], 强盗[1] - 45, 4)
                        pyautogui.move(0, 56)
                        pyautogui.hotkey('alt', 's')
                        pyautogui.click()
                        随机小数小
                        pyautogui.click()
                    else:
                        战斗攻击()
                    战斗回合数 += 1
                    time.sleep(2)
            else:
                if 点击自动:
                    if 战斗类型 == '场景挂机':
                        if 队长模式:
                            战斗攻击()
                        else:
                            自动开 = 单个模板匹配(0, 0, 812, 663, 'zidongkai.png')
                            if not 自动开:
                                鼠标移动到指定距离(700, 440, 1)
                    time.sleep(2)
                    战斗回合数 += 1
            if 战斗类型 != '押镖':
                if 战斗类型 != '乾坤袋':
                    任务文本 = '没有列表追踪'
                elif 战斗类型 == '乾坤袋':
                    任务文本 = []
            if not 点击自动:
                四小人 = 单个模板匹配(222, 100, 500, 333, 'sixiaoren.png', 返回坐标=True)
                if 四小人:
                    print("四小人验证")
                    找到四小人 = 四小人模板匹配()
        elif not 战斗中:
            四小人未检测 = True
            场景窗口文本识别()
            print('坐标差X,坐标差Y',坐标差X,坐标差Y)
            time.sleep(0.3)
            窗口1的时间管理()
            if 目标没移动 or 任务类型 == "押镖" or '没有列表追踪'in 任务文本 or 任务文本==[] or 任务已完成:
                战斗回合数 = 0
                if 任务文本 == [] and 任务类型 != "挖图" and 任务类型 != "场景挂机":
                    print("正在识别任务文本")
                    任务窗口文本识别()
                    首次前往 = True
                    目标没移动 = True
                    # 任务文本 = '梅花酒 '
                    # 任务点X坐标=65
                    # 任务点Y坐标 = 65
                    print("任务文本已重新识别", 任务文本)
                elif 任务文本 != []:
                    首次前往 = False
                    print("任务文本:", 任务文本)
                if 任务类型 == '师门':
                    if not 任务已完成:
                        物品 = 师门任务文本识别判断()
                        print(物品, 物品, 物品)
                    if 任务已完成 or '没有' in 任务文本 or '列表' in 任务文本 or '追踪' in 任务文本:
                        if not '门派里面' in 场景文本 :
                            if not 门派场景名称 in 场景文本:
                                回门派()
                            print('这里切换场景,门派场景名称:',门派场景名称,场景文本)
                            while 门派场景名称 in 场景文本 and not 门派内名称 in 场景文本 and not '门派里面' in 场景文本 and 终止按键:
                                场景窗口文本识别()
                                if abs(场景点X坐标 - 门派路口坐标XY[0]) <= 7 and abs(
                                        场景点Y坐标 - 门派路口坐标XY[1]) <= 3:
                                    进入门派府内()
                                    break
                                else:
                                    if 目标没移动:
                                        打开或关闭地图()
                                        鼠标移动到指定距离(门派路口地图坐标[0], 门派路口地图坐标[1], 1)
                                        打开或关闭地图()
                                time.sleep(0.3)
                                框关闭函数()
                                血量检测系统()
                            print('这里切换场景,门派内名称:',门派内名称,场景文本)
                        if 门派内名称 in 场景文本 or '门派里面' in 场景文本 and 终止按键:
                            print('已到达门派内')
                            前往师傅附近()
                            if 任务已完成:
                                if 物品属类 == 3:
                                    点到师傅=点击师傅位置()
                                    if 点到师傅:
                                        师门任务领取(点到师傅)
                                        点到师傅 = 点击师傅位置()
                                        师门任务领取(点到师傅)
                                        任务已完成 = False
                                        任务文本 = []
                                        time.sleep(0.3)
                                else:
                                    点到师傅 = 点击师傅位置()
                                    if 点到师傅:
                                        师门给予坐标 = 单个模板匹配(136, 390, 500, 480, 'shimengeiyu.png', 0.85,返回坐标=True)
                                        if 师门给予坐标:
                                            鼠标移动到指定距离(师门给予坐标[0] + 136, 师门给予坐标[1] + 390, 1)
                                            鼠标移动到指定距离(240, 470, 4)
                                            if 物品属类 == 7:
                                                模板路径 = '40huan/' + str(index + 1) + '.png'
                                                坐标 = 单个模板匹配(380, 240, 640, 460, 模板路径, 返回坐标=True,
                                                                    路径='其他')
                                                if 坐标:
                                                    鼠标移动到指定距离(坐标[0] + 380, 坐标[1] + 240, 1)
                                                    鼠标移动到指定距离(240, 470, 4)
                                                else:
                                                    continue
                                            pyautogui.click()
                                            for i in range(12):
                                                对话框 = 单个模板匹配(600, 300, 700, 440, 'duihuakuang.png', 0.91,返回坐标=True)
                                                if 对话框:
                                                    pyautogui.click()
                                                    任务已完成 = False
                                                    点到师傅 = 点击师傅位置()
                                                    师门任务领取(点到师傅)
                                                    任务文本 = []
                                                    time.sleep(0.3)
                                                    break
                                                else:
                                                    time.sleep(0.2)
                                            else:
                                                任务已完成 = False
                                                点到师傅 = 点击师傅位置()
                                                师门任务领取(点到师傅)
                                                任务文本 = []
                                                time.sleep(0.3)
                            elif not 任务已完成:
                                print('领取师门任务')
                                点到师傅 = 点击师傅位置()
                                师门任务领取(点到师傅)
                                任务文本 = []
                                time.sleep(0.3)
                            if 任务文本 == [] and not 任务已完成:
                                print("正在识别任务文本222")
                                任务窗口文本识别()
                                首次前往 = True
                                目标没移动 = True
                                print("任务文本已重新识别222", 任务文本)
                            if not 任务已完成:
                                物品 = 师门任务文本识别判断()
                                print(物品, 物品, 物品)
                    if not 任务已完成 and not 这个账号已完成任务:
                        if ('苦战' in 任务文本 or '同门' in 任务文本):
                            战斗类型 = '苦战'
                            if not 首次前往:
                                time.sleep(0.4)
                            目标前往命令()
                            if abs(坐标差X) < 11 and abs(坐标差Y) < 11 and 目标没移动:
                                鼠标移动到指定距离(200, 393, 4)
                                苦战 = 单个模板匹配(350, 350, 550, 450, 'kuzhan.png', 0.75)
                                if 苦战:
                                    pyautogui.click()
                                    for i in range(7):
                                        time.sleep(0.1)
                                        战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
                                        if 战斗中 or not 终止按键:
                                            战斗攻击()
                                            break
                                else:
                                    找到重叠了=重叠判断('苦战', '同门')
                                    鼠标移动到指定距离(200, 393, 4)
                                    苦战 = 单个模板匹配(350, 350, 550, 450, 'kuzhan.png', 0.75)
                                    if 苦战:
                                        pyautogui.click()
                                        time.sleep(0.7)
                                    elif not 找到重叠了:
                                        print('请添加人物遮挡移动的代码')
                        elif '带上' in 任务文本 and '袋' in 任务文本 or '乾坤袋' in 任务文本:
                            print('乾坤袋个数', 乾坤袋个数)
                            战斗类型 = '乾坤袋'
                            if '给' in 任务文本 and '师傅' in 任务文本:
                                任务已完成 = True
                                物品属类 = 2
                                乾坤袋个数-=1
                            else:
                                if not 首次前往:
                                    time.sleep(0.4)
                                目标前往命令()
                                print('乾坤袋个数',乾坤袋个数)
                                if 首次前往:
                                    目标没移动 = False
                                    鼠标移开()
                                    打开或关闭背包()
                                    pyautogui.moveTo(顶点坐标X + 300, 顶点坐标Y + 100)
                                    time.sleep(0.3)
                                    乾坤袋个数 = 单个模板匹配(380, 250, 650, 450, 'qiankundai.png', 0.91, 返回坐标=True,坐标列表=True)
                                    乾坤袋个数=len(乾坤袋个数)
                                    print('乾坤袋个数', 乾坤袋个数)
                                    背包空格数量, _ = 格子检测函数(390, 250, '空', 0)
                                    if 乾坤袋个数<=0:
                                        time.sleep(0.5)
                                        for i in range(3):
                                            pyautogui.press('f8')
                                            time.sleep(0.5)
                                            乾坤袋= 单个模板匹配(432, 382, 534, 450, 'qiankundai.png', 0.91)
                                            if 乾坤袋:
                                                鼠标移动到指定距离(510, 410, 1)
                                                time.sleep(0.2)
                                                pyautogui.click()
                                                time.sleep(0.2)
                                                pyautogui.click()
                                                鼠标移动到指定距离(486, 496, 1)
                                                框关闭函数()
                                                time.sleep(0.7)
                                                乾坤袋个数 = 单个模板匹配(380, 250, 650, 450, 'qiankundai.png', 0.91,返回坐标=True, 坐标列表=True)
                                                乾坤袋个数 = len(乾坤袋个数)
                                                if 乾坤袋个数>0:
                                                    打开或关闭背包()
                                                    if 背包空格数量 >= 3:
                                                        乾坤袋个数 = 3
                                                    else:
                                                        乾坤袋个数 = 背包空格数量
                                                    break
                                        else:
                                            框关闭函数()
                                            打开长安飞行旗()
                                            鼠标移动到指定距离(406, 450, 1, 红点=True)
                                            打开或关闭背包()
                                            time.sleep(0.8)
                                            打开或关闭地图()
                                            鼠标移动到指定距离(384, 462, 1)
                                            打开或关闭地图()
                                            框关闭函数()
                                            time.sleep(5)
                                            pyautogui.hotkey('alt', 'h')
                                            场景窗口文本识别()
                                            pyautogui.press('f9')
                                            鼠标移动到指定距离(406 - (场景点X坐标 - 257) * 20,
                                                               310 + (场景点Y坐标 - 40) * 20, 1)
                                            time.sleep(0.4)
                                            鼠标移动到指定距离(180, 394, 1)
                                            time.sleep(1)
                                            乾坤袋 = 单个模板匹配(400, 100, 650, 300, 'qiankundai.png')
                                            if 乾坤袋:
                                                鼠标移动到指定距离(511, 214, 1)
                                                for i in range(4):
                                                    time.sleep(0.2)
                                                    pyautogui.click()
                                                鼠标移动到指定距离(404, 531, 1)
                                                time.sleep(0.2)
                                                pyautogui.move(100, -20)
                                                pyautogui.click()
                                                time.sleep(0.3)
                                                pyautogui.rightClick()
                                                乾坤袋已拥有 = True
                                                if 背包空格数量 >= 5:
                                                    乾坤袋个数 = 5
                                                else:
                                                    乾坤袋个数 = 背包空格数量
                                    else:
                                        打开或关闭背包()
                            if abs(坐标差X) < 11 and abs(坐标差Y) < 11 and 目标没移动 and not 任务已完成:
                                攻击()
                                for i in range(7):
                                    time.sleep(0.1)
                                    战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
                                    if 战斗中:
                                        战斗攻击()
                                        战斗回合数 += 1
                                        pyautogui.moveTo(200 + 顶点坐标X, 420 + 顶点坐标Y)
                                        pyautogui.click()
                                        break
                                else:
                                    找到重叠了=重叠判断('怪', '妖', 点击方式=4, 类型='攻击')
                                    if 找到重叠了:
                                        攻击()
                                        for i in range(7):
                                            time.sleep(0.1)
                                            战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
                                            if 战斗中:
                                                战斗攻击()
                                                战斗回合数 += 1
                                                pyautogui.moveTo(200 + 顶点坐标X, 420 + 顶点坐标Y)
                                                pyautogui.click()
                                                break
                                        else:
                                            if not 找到重叠了:
                                                print('请添加人物遮挡移动的代码')
                                if 战斗中:
                                    continue
                        elif ('示' in 任务文本 or '威' in 任务文本):
                            战斗类型 = '示威'
                            示威前往()
                            # 三级药
                        elif 物品属类 == 1 :
                            print("物品属类:三级药，前往买三级药...", "需要购买的师门物品:", 物品)
                            if not 三药位置[:2] in 场景文本 or not 三药位置[-2:] in 场景文本:
                                if 三药位置 == '长安城':
                                    打开或关闭背包()
                                    打开长安飞行旗()
                                    time.sleep(0.3)
                                    点击江南野外路口()
                                    打开或关闭背包()
                                elif 三药位置 == '傲来国':
                                    使用快捷键打开飞行符()
                                    点击傲来国飞行点()
                                elif 三药位置 == '长寿村':
                                    使用快捷键打开飞行符()
                                    点击长寿村飞行点()
                                    time.sleep(1)
                                    打开或关闭地图()
                                    鼠标移动到指定距离(444, 433, 1)
                                    打开或关闭地图()
                                    time.sleep(4)
                                elif 三药位置 == '商会':
                                    商会购买商品( '三药', 商会三药价格,0)
                                    continue
                                time.sleep(0.7)
                                场景窗口文本识别()
                            if 三药位置[:2] in 场景文本 or 三药位置[-2:] in 场景文本:
                                隐藏人物()
                                while not 任务已完成 and 终止按键:
                                    找到物品 = False
                                    摊位开 = 单个模板匹配(240, 100, 376, 190, 'tanweikai.png', 0.91)
                                    if not 摊位开:
                                        摊位中心点列表=摊位识别()
                                        for 摊位 in 摊位中心点列表:
                                            摊位开 = 单个模板匹配(240, 100, 376, 190, 'tanweikai.png', 0.91)
                                            if not 摊位开:
                                                鼠标移动到指定距离(摊位[0], 摊位[1], 3)
                                                鼠标移动到指定距离(288, 188, 4, 0)
                                                物品识别并购买(物品, 三药价格)
                                                if 任务已完成 or not 终止按键:
                                                    回门派()
                                                    break
                                                pyautogui.rightClick()
                                            else:
                                                鼠标移动到指定距离(540, 160, 3)
                                            if not 终止按键:
                                                break
                                        else:
                                            商会购买商品( '三药',商会三药价格,0)
                                    elif 摊位开:
                                        鼠标移动到指定距离(540, 160, 3)
                                    if 任务已完成:
                                        break
                            # 烹饪
                        elif 物品属类 == 2 or '金创药' in 任务文本 or '虎骨' in 任务文本 or '儿红' in 任务文本:
                            print("物品属类:烹饪，前往买烹饪...", "需要购买的师门物品:", 物品)
                            for index, aa in enumerate(物品转化数字列表):
                                if 物品 == aa:
                                    break
                            if 12 <= index + 1 <= 19 or index + 1>=63:
                                鼠标移开()
                                打开或关闭背包()
                                背包空格数量, _ = 格子检测函数(390, 250, '空', 0)
                                if 背包空格数量 >= 3:
                                    print('背包空格数量:', 背包空格数量)
                                    for i in range(2):
                                        pyautogui.press('f7')
                                        time.sleep(0.3)
                                print('图片张数', index + 1)
                                time.sleep(4)
                                窗口截屏 = ImageGrab.grab(
                                    bbox=(顶点坐标X + 380, 顶点坐标Y + 236, 顶点坐标X + 666, 顶点坐标Y + 466))
                                窗口截屏图片 = cv2.cvtColor(np.array(窗口截屏), cv2.COLOR_RGB2BGR)
                                模板路径 = 'shangpin/' + str(index + 1) + '.png'
                                模板 = cv2.imread(模板路径)
                                结果 = cv2.matchTemplate(窗口截屏图片, 模板, cv2.TM_CCOEFF_NORMED)
                                坐标 = np.where(结果 >= 0.91)
                                打开或关闭背包()
                            else:
                                坐标=[()]
                            if len(坐标[0]) > 0 or '金创药' in 任务文本 or '儿红' in 任务文本 or '虎骨' in 任务文本:
                                if ('金创药' in 任务文本 or '儿红' in 任务文本 or '虎骨' in 任务文本) and len(坐标[0]) == 0:
                                    if '金创药' in 任务文本:
                                        pyautogui.press('f8')
                                        time.sleep(0.2)
                                        鼠标移动到指定距离(461, 358, 1)
                                        time.sleep(0.2)
                                        pyautogui.click()
                                        time.sleep(0.2)
                                        pyautogui.click()
                                        鼠标移动到指定距离(486, 496, 1)
                                        pyautogui.move(0, -35)
                                        pyautogui.rightClick()
                                        任务已完成 = True
                                    elif '儿红' in 任务文本:
                                        打开或关闭背包()
                                        打开傲来国飞行旗()
                                        点击东海湾路口()
                                        打开或关闭背包()
                                        time.sleep(0.3)
                                        打开或关闭地图()
                                        time.sleep(0.3)
                                        鼠标移动到指定距离(490, 466, 1)
                                        打开或关闭地图()
                                        time.sleep(4 + 随机小数0)
                                        傲来二门口 = 单个模板匹配(0, 0, 600, 400, 'aolai2.png', 返回坐标=True)
                                        if 傲来二门口:
                                            鼠标移动到指定距离(傲来二门口[0], 傲来二门口[1], 1)
                                            time.sleep(0.9)
                                            鼠标移动到指定距离(175, 330, 1)
                                            time.sleep(5)
                                            隐藏人物()
                                            场景窗口文本识别()
                                            鼠标移动到指定距离(406 - (场景点X坐标 - 22) * 20,310 + (场景点Y坐标 - 15) * 20, 1)
                                            time.sleep(0.7)
                                            购买 = 单个模板匹配(140, 350, 250, 450, 'goumai.png', 返回坐标=True)
                                            if 购买:
                                                鼠标移动到指定距离(购买[0]+140, 购买[1]+350, 1)
                                                time.sleep(0.3)
                                                鼠标移动到指定距离(300, 200, 1)
                                                time.sleep(0.3)
                                                鼠标移动到指定距离(360, 537, 1)
                                                任务已完成 = True
                                    elif '虎骨' in 任务文本:
                                        while 终止按键:
                                            场景窗口文本识别()
                                            if not "寿村" in 场景文本:
                                                打开或关闭背包()
                                                打开长寿村飞行旗()
                                                鼠标移动到指定距离(477, 356, 1, 红点=True)
                                                打开或关闭背包()
                                                time.sleep(0.7)
                                                打开或关闭地图()
                                                鼠标移动到指定距离(421, 305, 1)
                                                打开或关闭地图()
                                            elif "寿村" in 场景文本:
                                                if 115 > 场景点X坐标 > 110 and 150 > 场景点Y坐标 > 145:
                                                    鼠标移动到指定距离(340, 300, 1)
                                                    time.sleep(1)
                                                    鼠标移动到指定距离(251, 380, 1)
                                                    隐藏人物()
                                                    time.sleep(0.7)
                                                    购买 = 单个模板匹配(140, 350, 250, 500, 'goumai.png', 返回坐标=True)
                                                    if 购买:
                                                        鼠标移动到指定距离(购买[0] + 140, 购买[1] + 350, 1)
                                                        time.sleep(0.3)
                                                        鼠标移动到指定距离(300, 200, 1)
                                                        time.sleep(0.3)
                                                        鼠标移动到指定距离(360, 537, 1)
                                                        任务已完成 = True
                                                        break
                                                else:
                                                    if 目标没移动:
                                                        打开或关闭地图()
                                                        鼠标移动到指定距离(421, 305, 1)
                                                        打开或关闭地图()
                                            time.sleep(0.4)
                                else:
                                    点到师傅 = 点击师傅位置()
                                    time.sleep(0.5)
                                    师门给予坐标 = 单个模板匹配(136, 390, 500, 450, 'shimengeiyu.png', 0.85, 返回坐标=True)
                                    print(师门给予坐标)
                                    if 师门给予坐标:
                                        鼠标移动到指定距离(师门给予坐标[0] + 136, 师门给予坐标[1] + 390, 1)
                                        time.sleep(0.5)
                                        鼠标移动到指定距离(240, 470, 1)
                                        time.sleep(0.5)
                                        pyautogui.click()
                                        任务文本 = []
                                        continue
                                    else:
                                        任务已完成=True
                            elif not '长安' in 场景文本 or not '安城' in 场景文本:
                                打开或关闭背包()
                                if 烹饪位置 == "王夫人":
                                    打开长安飞行旗()
                                    鼠标移动到指定距离(467, 488, 1, 红点=True)
                                    打开或关闭背包()
                                    进入 = 场景切换判断('长安城')
                                    if 进入:
                                        打开或关闭地图()
                                        鼠标移动到指定距离(520, 454, 1)
                                        打开或关闭地图()
                                        time.sleep(12)
                                elif 烹饪位置 == "野外路口":
                                    打开长安飞行旗()
                                    点击江南野外路口()
                                    打开或关闭背包()
                                    time.sleep(0.7)
                                elif 烹饪位置 == "街道":
                                    前往长安烹饪()
                                elif 烹饪位置 == "天台":
                                    打开或关闭背包()
                                    使用快捷键打开飞行符()
                                    鼠标移动到指定距离(520, 358, 1)
                                    time.sleep(0.7)
                                elif 烹饪位置 == '商会':
                                    商会购买商品('烹饪',烹饪价格,0)
                                    continue
                                场景窗口文本识别()
                            if '长安' in 场景文本 or '安城' in 场景文本:
                                隐藏人物()
                                while not 任务已完成 and 终止按键:
                                    摊位开 = 单个模板匹配(240, 100, 376, 190, 'tanweikai.png', 0.91)
                                    if not 摊位开:
                                        摊位中心点列表=摊位识别()
                                        for 摊位 in 摊位中心点列表:
                                            摊位开 = 单个模板匹配(240, 100, 376, 190, 'tanweikai.png', 0.91)
                                            if not 摊位开:
                                                鼠标移动到指定距离(摊位[0], 摊位[1], 3)
                                                鼠标移动到指定距离(288, 188, 4, 0)
                                                物品识别并购买(物品, 烹饪价格)
                                                if 任务已完成 or not 终止按键:
                                                    回门派()
                                                    break
                                                pyautogui.rightClick()
                                            else:
                                                鼠标移动到指定距离(540, 160, 3, 0, 30)
                                            if not 终止按键:
                                                break
                                        else:
                                            商会购买商品('烹饪',烹饪价格,0)
                                    elif 摊位开:
                                        鼠标移动到指定距离(540, 160, 3, 0, 30)
                                    if 任务已完成:
                                        break
                            # 召唤兽3333
                        elif 物品属类 == 3 :
                            if 物品 in 前2页:
                                翻页列表 = [1,2,3,4]
                            elif 物品 in 中3到7页顺:
                                翻页列表 = [2,3, 4, 5, 6, 7]
                            elif 物品 in 中3到7页倒:
                                翻页列表 = [8,7, 6, 5, 4, 3]
                            elif 物品 in 后5页:
                                翻页列表 = [10, 9, 8]
                            for 任务宠 in 需要找列表:
                                出现次数 = 0
                                for 字 in 任务宠:
                                    if 字 in 任务文本:
                                        出现次数 += 1
                                    if 出现次数 >= 3:
                                        需要找任务宠 = 任务宠
                                        print('需要找任务宠:', 需要找任务宠)
                                        break
                                if 出现次数 >= 3:
                                    break
                            else:
                                任务文本 = []
                                continue
                            print("物品属类:召唤兽，前往商会...", "需要购买的师门物品:", 物品)
                            if not '长安' in 场景文本 or not '安城' in 场景文本 or 场景点Y坐标 > 25:
                                打开或关闭背包()
                                打开长安飞行旗()
                                time.sleep(0.3)
                                if 商会X == None and 商会Y == None or 随机整数100 > 70:
                                    商会X, 商会Y = 鼠标移动到指定距离(467, 488, 1, 红点=True)
                                else:
                                    鼠标移动到指定距离(商会X, 商会Y, 1)
                                打开或关闭背包()
                                time.sleep(0.4)
                                pyautogui.hotkey('alt', 'h')
                                隐藏人物()
                                场景窗口文本识别()
                            if ('长安' in 场景文本 or '安城' in 场景文本) and 场景点Y坐标 < 25 and 320<场景点X坐标 < 335:
                                if 场景点Y坐标 <= 14:
                                    鼠标移动到指定距离(406 - (场景点X坐标 - 326) * 20, 260, 1)
                                else:
                                    鼠标移动到指定距离(406 - (场景点X坐标 - 326) * 20, 300 + (场景点Y坐标 - 17) * 20, 1)
                                time.sleep(0.6)
                                鼠标移动到指定距离(207, 410, 1)
                                time.sleep(0.4)
                                # for a in range(15):
                                #     if a > 0:
                                #         pyautogui.moveTo(顶点坐标X + 420, 顶点坐标Y + 300)
                                #         翻页(1, 1, 挖图翻页=False)
                                #         pyautogui.moveTo(顶点坐标X + 420, 顶点坐标Y)
                                #     time.sleep(0.3)
                                #     if 物品 in 低级宠:
                                #         模板列表 = 召唤兽店铺列表[:3]
                                #     elif 物品 in 中级宠:
                                #         模板列表 = 召唤兽店铺列表[4:7]
                                #     elif 物品 in 高级宠:
                                #         模板列表 = 召唤兽店铺列表[8:]
                                #     召唤兽店铺 = 召唤兽店铺识别(模板列表)
                                #     for 坐标 in 召唤兽店铺:
                                #         鼠标移动到指定距离(坐标[0] + 200, 坐标[1] + 190, 1)
                                #         time.sleep(0.3)
                                #         指定窗口文本 = 指定窗口文本识别(196, 411, 469, 482)
                                #         指定窗口文本 = 召唤兽文本替换(指定窗口文本)
                                #         index_of_8 = 指定窗口文本.find('8')
                                #         # 检查8后面是否已经是数字，如果不是则在8后面跳过两个单位加上9
                                #         if index_of_8 != -1 and index_of_8 + 1 < len(指定窗口文本) and not 指定窗口文本[
                                #             index_of_8 + 1].isdigit():
                                #             if index_of_8 + 3 < len(指定窗口文本) and not 指定窗口文本[
                                #                 index_of_8 + 3].isdigit():
                                #                 指定窗口文本 = 指定窗口文本[:index_of_8 + 3] + '9' + 指定窗口文本[
                                #                                                                      index_of_8 + 3:]
                                #         numbers = [int(x) for x in re.findall(r'\d+', 指定窗口文本)]  # 转换为整数列表
                                #         for number in numbers:
                                #             if number > 10000:
                                #                 指定窗口文本 = 指定窗口文本.replace(str(number), '1')
                                #         # 指定窗口文本= 指定窗口文本[指定窗口文本.find("ID"):]
                                #         print('店铺名称：', 指定窗口文本)
                                #         页数 = 召唤兽所在页面识别(物品)
                                #         print(' 页数：', 页数)
                                #         if 页数 != None:
                                #             页数 = str(页数).replace('O', '0')
                                #             页数 = int(页数)
                                #             if 页数 == 0:
                                #                 页数 = 10
                                #             time.sleep(0.2)
                                #             pyautogui.rightClick()
                                #             # time.sleep(0.3)
                                #             pyautogui.move(-66, 0)
                                #             if 页数 != 1:
                                #                 鼠标移动到指定距离(260 + 页数 * 22, 466, 1, )
                                #             time.sleep(0.5)
                                #             召唤兽列表坐标 = 召唤兽识别()
                                #             if 页数 == 9 and 召唤兽列表坐标 == []:
                                #                 鼠标移动到指定距离(480, 465, 1)
                                #                 time.sleep(0.5)
                                #                 召唤兽列表坐标 = 召唤兽识别()
                                #             价格合适 = False
                                #             计数器 = 0
                                for a in range(15):
                                    打开店铺 = 单个模板匹配(200, 400, 400, 550, 'dakaidianpu.png')
                                    if 打开店铺:
                                        if a > 0:
                                            pyautogui.moveTo(顶点坐标X + 420, 顶点坐标Y + 300)
                                            翻页(1, 1, 挖图翻页=False)
                                            pyautogui.moveTo(顶点坐标X + 420, 顶点坐标Y)
                                        time.sleep(0.4)
                                        if 物品 in 低级宠:
                                            模板列表 = 召唤兽店铺列表[:3]
                                        elif 物品 in 中级宠:
                                            模板列表 = 召唤兽店铺列表[4:7]
                                        elif 物品 in 高级宠:
                                            模板列表 = 召唤兽店铺列表[8:]
                                        召唤兽店铺 = 召唤兽店铺识别(模板列表)
                                        # 以下是更新的地方
                                        for 坐标 in 召唤兽店铺:
                                            鼠标移动到指定距离(坐标[0] + 200, 坐标[1] + 190, 1)
                                            time.sleep(0.2)
                                            pyautogui.rightClick()
                                            for 页数 in 翻页列表:
                                                time.sleep(0.1)
                                                if 页数 > 1:
                                                    鼠标移动到指定距离(260 + 页数 * 22, 466, 1)
                                                time.sleep(0.4)
                                                召唤兽列表坐标 = 召唤兽识别()
                                                if len(召唤兽列表坐标)>0:
                                                    已经查看=True
                                                else:
                                                    已经查看 = False
                                                价格合适 = False
                                                计数器 = 0
                                                print('召唤兽列表坐标', 召唤兽列表坐标)
                                                for 坐标 in 召唤兽列表坐标:
                                                    鼠标移动到指定距离(坐标[0] + 270, 坐标[1] + 230, 1)
                                                    if not 价格合适:
                                                        time.sleep(0.2)
                                                        召唤兽价格 = 指定窗口文本识别(365, 480, 450, 510)
                                                        print('召唤兽价格：', 召唤兽价格)
                                                        if 召唤兽价格:
                                                            if int(召唤兽价格) > 14000 and 终止按键:
                                                                计数器 += 1
                                                                if 计数器 > 1:
                                                                    break
                                                                continue
                                                            else:
                                                                价格合适 = True
                                                        else:
                                                            continue
                                                    pyautogui.rightClick()
                                                    鼠标移动到指定距离(300, 300, 4)
                                                    指定窗口文本 = 召唤兽属性文本输出()
                                                    print('召唤兽属性列表：', 指定窗口文本)
                                                    print('召唤兽价格：', 召唤兽价格)
                                                    这只召唤是我要找的 = 召唤兽属性识别(任务文本)
                                                    pyautogui.rightClick()
                                                    print('已点击右键关闭召唤查看界面')
                                                    if 这只召唤是我要找的 and 终止按键:
                                                        鼠标移动到指定距离(485, 550, 4)
                                                        购买键 = 单个模板匹配(266, 484, 643, 600, 'goumaijian.png')
                                                        if 购买键:
                                                            pyautogui.click()
                                                            回门派()
                                                            任务已完成 = True
                                                            break
                                                        else:
                                                            pyautogui.rightClick()
                                                            鼠标移动到指定距离(485, 550, 4)
                                                            购买键 = 单个模板匹配(266, 484, 643, 600, 'goumaijian.png')
                                                            if 购买键:
                                                                pyautogui.click()
                                                                回门派()
                                                                任务已完成 = True
                                                                break
                                                    elif not 这只召唤是我要找的:
                                                        购买键 = 单个模板匹配(266, 484, 643, 600, 'goumaijian.png')
                                                        if not 购买键:
                                                            pyautogui.rightClick()
                                                    print('这里结束循环 上面必须有点击右键')
                                                    if not 终止按键:
                                                        break
                                                购买键 = 单个模板匹配(266, 484, 643, 600, 'goumaijian.png')
                                                if 任务已完成 or not 终止按键 or 计数器 > 1 or 已经查看 or not 购买键:
                                                    break
                                            if 购买键:
                                                鼠标移动到指定距离(465, 177, 3)
                                            if 任务已完成 or not 终止按键:
                                                break
                                        if 任务已完成 or not 终止按键:
                                            break
                                    else:
                                        break
                                else:
                                    continue
                            else:
                                打开或关闭地图()
                                time.sleep(0.2)
                                鼠标移动到指定距离(455, 487, 1)
                                打开或关闭地图()
                                time.sleep(5)
                            # 一级家具
                        elif 物品属类 == 4 :
                            print("物品属类:一级家具，前往家具厂...", "需要购买的师门物品:", 物品)
                            if not '长安' in 场景文本 or not '安城' in 场景文本 or not '长寿' in 场景文本:
                                打开或关闭背包()
                                if 家具位置 == '商会':
                                    打开长安飞行旗()
                                    if 商会X == None and 商会Y == None or 随机整数100 > 70:
                                        商会X, 商会Y = 鼠标移动到指定距离(460, 480, 1, 红点=True)
                                    else:
                                        鼠标移动到指定距离(商会X, 商会Y, 1)
                                elif 家具位置 == '家':
                                    打开长安飞行旗()
                                    if 家具X == None and 家具Y == None or 随机整数100 > 70:
                                        家具X, 家具Y = 鼠标移动到指定距离(655, 370, 1, 红点=True)
                                    else:
                                        鼠标移动到指定距离(家具X, 家具Y, 1)
                                elif 家具位置 == '长寿巫医':
                                    打开长寿村飞行旗()
                                    鼠标移动到指定距离(482, 348, 1, 红点=True)
                                elif 家具位置 == '镖局':
                                    打开长安飞行旗()
                                    A,B=鼠标移动到指定距离(655, 370, 1, 红点=True)
                                    if  A:
                                        打开或关闭地图()
                                        鼠标移动到指定距离(640, 355, 1)
                                        打开或关闭地图()
                                        time.sleep(7.5)
                                    else:
                                        鼠标移动到指定距离(596, 329, 1, 红点=True)
                                        time.sleep(1)
                                        打开或关闭地图()
                                        鼠标移动到指定距离(653, 349, 1)
                                        打开或关闭地图()
                                        time.sleep(14)
                                elif 家具位置 == '商会':
                                    商会购买商品( '家具', 一家价格,0)
                                    continue
                                打开或关闭背包()
                                time.sleep(0.3)
                                场景窗口文本识别()
                            if '长安' in 场景文本 or '安城' in 场景文本 or '长寿村' in 场景文本:
                                隐藏人物()
                                time.sleep(0.3)
                                while not 任务已完成 and 终止按键:
                                    找到物品 = False
                                    摊位开 = 单个模板匹配(240, 100, 376, 190, 'tanweikai.png', 0.91)
                                    if not 摊位开:
                                        摊位中心点列表 = 摊位识别并点击('1', '1j', '一', ' 1 ')
                                        for 摊位 in 摊位中心点列表:
                                            摊位开 = 单个模板匹配(240, 100, 376, 190, 'tanweikai.png', 0.91)
                                            if not 摊位开:
                                                鼠标移动到指定距离(摊位[0], 摊位[1], 3)
                                                鼠标移动到指定距离(288, 188, 4, 0)
                                                物品识别并购买(物品, 一家价格)
                                                if 任务已完成 or not 终止按键:
                                                    回门派()
                                                    break
                                                pyautogui.rightClick()
                                            else:
                                                鼠标移动到指定距离(540, 160, 3)
                                            if not 终止按键:
                                                break
                                        else:
                                            商会购买商品( '家具',一家价格,0)
                                    elif 摊位开:
                                        鼠标移动到指定距离(540, 160, 3)
                                    if 任务已完成:
                                        break
                            # 二级家具
                        elif 物品属类 == 5 :
                            print("物品属类:二级家具，前往家具厂...", "需要购买的师门物品:", 物品)
                            if not '长安' in 场景文本 and not '长寿' in 场景文本:
                                打开或关闭背包()
                                if 家具位置 == '商会':
                                    打开长安飞行旗()
                                    if 商会X == None and 商会Y == None or 随机整数100 > 70:
                                        商会X, 商会Y = 鼠标移动到指定距离(460, 480, 1, 红点=True)
                                    else:
                                        鼠标移动到指定距离(商会X, 商会Y, 1)
                                elif 家具位置 == '家':
                                    打开长安飞行旗()
                                    if 家具X == None and 家具Y == None or 随机整数100 > 70:
                                        家具X, 家具Y = 鼠标移动到指定距离(655, 370, 1, 红点=True)
                                    else:
                                        鼠标移动到指定距离(家具X, 家具Y, 1)
                                elif 家具位置 == '长寿巫医':
                                    打开长寿村飞行旗()
                                    鼠标移动到指定距离(482, 348, 1, 红点=True)
                                elif 家具位置 == '镖局':
                                    打开长安飞行旗()
                                    A,B=鼠标移动到指定距离(655, 370, 1, 红点=True)
                                    if  A:
                                        打开或关闭地图()
                                        鼠标移动到指定距离(640, 355, 1)
                                        打开或关闭地图()
                                        time.sleep(7.5)
                                    else:
                                        鼠标移动到指定距离(596, 329, 1, 红点=True)
                                        time.sleep(1)
                                        打开或关闭地图()
                                        鼠标移动到指定距离(653, 349, 1)
                                        打开或关闭地图()
                                        time.sleep(14)
                                elif 家具位置 == '商会':
                                    商会购买商品( '家具', 二家价格,0)
                                    continue
                                打开或关闭背包()
                                time.sleep(0.3)
                                场景窗口文本识别()
                            if '长安' in 场景文本 or '安城' in 场景文本 or '长寿村' in 场景文本:
                                隐藏人物()
                                time.sleep(0.3)
                                while not 任务已完成 and 终止按键:
                                    找到物品 = False
                                    摊位开 = 单个模板匹配(240, 100, 376, 190, 'tanweikai.png', 0.91)
                                    if not 摊位开:
                                        摊位中心点列表 = 摊位识别并点击('2', '2J', '二', '2 ')
                                        for 摊位 in 摊位中心点列表:
                                            摊位开 = 单个模板匹配(240, 100, 376, 190, 'tanweikai.png', 0.91)
                                            if not 摊位开:
                                                鼠标移动到指定距离(摊位[0], 摊位[1], 3)
                                                鼠标移动到指定距离(288, 188, 4, 0)
                                                物品识别并购买(物品, 二家价格)
                                                if 任务已完成 or not 终止按键:
                                                    回门派()
                                                    break
                                                pyautogui.rightClick()
                                                print("任务已完成:", 任务已完成)
                                            else:
                                                鼠标移动到指定距离(540, 160, 3, )
                                            if not 终止按键:
                                                break
                                        else:
                                            商会购买商品( '家具',二家价格,0)
                                    elif 摊位开:
                                        鼠标移动到指定距离(540, 160, 3, )
                                    if 任务已完成:
                                        break
                            # 环列表
                        elif 物品属类 == 6:
                            print("物品属类:环列表，前买环...", "需要购买的师门物品:", 物品)
                            任务类型 = '临时打图'
                            战斗类型 = '打图'
                            临时打图次数 = 0
                            鼠标移动到指定距离(689, 181, 1)
                            鼠标移动到指定距离(653, 202, 1)
                            任务文本=[]
                        elif 物品属类 == 7:
                            #4040
                            for index, aa in enumerate(环40级):
                                if 物品 == aa:
                                    break
                            if (index + 1) <= 27:
                                买地点='长寿村'
                            elif 27<=(index + 1) <= 54:
                                买地点 ='傲来国'
                            elif 55<=(index + 1) <= 59:
                                买地点 ='长安布店'
                            elif 60<=(index + 1) <= 61:
                                买地点 ='长安饰品'
                            elif 62<=(index + 1) <= 79:
                                买地点 = '长安武器店'
                            print("40级以下环", "需要购买的师门物品:", 物品,index + 1)
                            if 买地点=='长寿村':
                                if not '长寿村' in 场景文本 and not '门派里面' in 场景文本 or 首次前往:
                                    使用快捷键打开飞行符()
                                    点击长寿村飞行点()
                                    time.sleep(0.5)
                                    打开或关闭地图()
                                    if (index + 1) <= 9:
                                        鼠标移动到指定距离(375, 436, 1)
                                    else:
                                        鼠标移动到指定距离(358, 374, 1)
                                    打开或关闭地图()
                                    场景窗口文本识别()
                                elif '长寿村' in 场景文本 and not '门派里面' in 场景文本:
                                    if (index + 1) <= 9:
                                        if 83<场景点X坐标<86 and 69<场景点Y坐标<73:
                                            pyautogui.hotkey('alt', 'h')
                                            鼠标移动到指定距离(430, 200, 1)
                                            time.sleep(1.3)
                                            for i in range(5):
                                                隐藏人物()
                                                鼠标移动到指定距离(471, 478, 1)
                                                time.sleep(0.5)
                                                购买 = 单个模板匹配(140, 350, 250, 450, 'goumai.png', 返回坐标=True)
                                                if 购买:
                                                    鼠标移动到指定距离(购买[0]+140, 购买[1]+350, 1)
                                                    break
                                            for i in range(12):
                                                对话框2 = 单个模板匹配(500, 140, 560, 200, 'XX.png', 0.91, 返回坐标=True)
                                                if 对话框2:
                                                    break
                                                else:
                                                    time.sleep(0.2)

                                            print('图片张数', index)
                                            模板路径 = '40huan/' + str(index + 1) + '.png'
                                            坐标 = 单个模板匹配(260,170,540, 440, 模板路径, 返回坐标=True, 路径='其他')
                                            if 坐标:
                                                鼠标移动到指定距离(坐标[0] + 260, 坐标[1] + 170, 1)
                                                鼠标移动到指定距离(407, 532, 1)
                                                pyautogui.move(0,-40)
                                                pyautogui.click()
                                                任务已完成 = True
                                                for i in range(8):
                                                    回门派()
                                                    场景窗口文本识别()
                                                    if 门派场景名称 in 场景文本:
                                                        break
                                        else:
                                            打开或关闭地图()
                                            鼠标移动到指定距离(375, 435, 1)
                                            打开或关闭地图()
                                    else:
                                        if 72 < 场景点X坐标 < 77 and 103 < 场景点Y坐标 < 108:
                                            鼠标移动到指定距离(380, 305, 1)
                                            time.sleep(1)
                                            鼠标移动到指定距离(130, 410, 1)
                                            time.sleep(2)
                                            for i in range(5):
                                                隐藏人物()
                                                鼠标移动到指定距离(315, 395, 1)
                                                time.sleep(0.5)
                                                购买 = 单个模板匹配(140, 350, 250, 450, 'goumai.png', 返回坐标=True)
                                                if 购买:
                                                    鼠标移动到指定距离(购买[0]+140, 购买[1]+350, 1)
                                                    break
                                            for i in range(12):
                                                对话框2 = 单个模板匹配(500, 140, 560, 200, 'XX.png', 0.91, 返回坐标=True)
                                                if 对话框2:
                                                    break
                                                else:
                                                    time.sleep(0.2)
                                            print('图片张数', index)
                                            模板路径 = '40huan/' + str(index + 1) + '.png'
                                            坐标 = 单个模板匹配(260,170,540, 440, 模板路径, 返回坐标=True, 路径='其他')
                                            if 坐标:
                                                鼠标移动到指定距离(坐标[0] + 260, 坐标[1] + 170, 1)
                                                鼠标移动到指定距离(407, 532, 1)
                                                pyautogui.move(0,-40)
                                                pyautogui.click()
                                                任务已完成 = True
                                                for i in range(8):
                                                    回门派()
                                                    场景窗口文本识别()
                                                    if 门派场景名称 in 场景文本:
                                                        break
                                        else:
                                            打开或关闭地图()
                                            鼠标移动到指定距离(358, 374, 1)
                                            打开或关闭地图()
                                elif '门派里面 ' in 场景文本:
                                    print(0,index)
                                    if (index + 1) <= 9:
                                        print(1)
                                        鼠标移动到指定距离(473, 476, 1)
                                        鼠标移动到指定距离(180, 411, 1)
                                    else:
                                        print(2)
                            elif 买地点=='傲来国':
                                if not '傲来国' in 场景文本 and not '门派里面' in 场景文本 or 首次前往 :
                                    打开或关闭背包()
                                    打开傲来国飞行旗()
                                    time.sleep(0.3)
                                    if 28<=(index + 1) <=45:
                                        A, B = 鼠标移动到指定距离(397, 393, 1, 红点=True)
                                        打开或关闭背包()
                                        time.sleep(0.4)
                                        if not A:
                                            pyautogui.rightClick()
                                            使用快捷键打开飞行符()
                                            点击傲来国飞行点()
                                            time.sleep(0.5)
                                        打开或关闭地图()
                                        鼠标移动到指定距离(398, 435, 1)
                                        打开或关闭地图()
                                    else:
                                        鼠标移动到指定距离(250, 320, 1,红点=True)
                                        打开或关闭背包()
                                        time.sleep(0.4)
                                        打开或关闭地图()
                                        鼠标移动到指定距离(225, 384, 1)
                                        打开或关闭地图()
                                    场景窗口文本识别()
                                elif '傲来国' in 场景文本 and not '门派里面' in 场景文本:
                                    if 28<=(index + 1) <=45:
                                        if 127<场景点X坐标<133 and 41<场景点Y坐标<44:
                                            鼠标移动到指定距离(513, 327, 1)
                                            time.sleep(1)
                                            for i in range(5):
                                                隐藏人物()
                                                鼠标移动到指定距离(258, 370, 1)
                                                time.sleep(0.5)
                                                购买 = 单个模板匹配(140, 350, 250, 450, 'goumai.png', 返回坐标=True)
                                                if 购买:
                                                    鼠标移动到指定距离(购买[0]+140, 购买[1]+350, 1)
                                                    break
                                            for i in range(12):
                                                对话框2 = 单个模板匹配(500, 140, 560, 200, 'XX.png', 0.91, 返回坐标=True)
                                                if 对话框2:
                                                    break
                                                else:
                                                    time.sleep(0.2)
                                            print('图片张数', index)
                                            模板路径 = '40huan/' + str(index + 1) + '.png'
                                            坐标 = 单个模板匹配(260,170,540, 440, 模板路径, 返回坐标=True, 路径='其他')
                                            if 坐标:
                                                鼠标移动到指定距离(坐标[0] + 260, 坐标[1] + 170, 1)
                                                鼠标移动到指定距离(407, 532, 1)
                                                pyautogui.move(0,-40)
                                                pyautogui.click()
                                                任务已完成 = True
                                                for i in range(8):
                                                    回门派()
                                                    场景窗口文本识别()
                                                    if 门派场景名称 in 场景文本:
                                                        break
                                        else:
                                            打开或关闭地图()
                                            鼠标移动到指定距离(398, 435, 1)
                                            打开或关闭地图()
                                    else:
                                        if 30 < 场景点X坐标 < 35 and 70 < 场景点Y坐标 < 74:
                                            鼠标移动到指定距离(307, 261, 1)
                                            time.sleep(1)
                                            鼠标移动到指定距离(180, 350, 1)
                                            time.sleep(6)
                                            for i in range(5):
                                                场景窗口文本识别()
                                                隐藏人物()
                                                鼠标移动到指定距离(406 - (场景点X坐标 - 19) * 20, 310 + (场景点Y坐标 - 16) * 20, 1)
                                                time.sleep(0.5)
                                                购买 = 单个模板匹配(140, 350, 250, 450, 'goumai.png', 返回坐标=True)
                                                if 购买:
                                                    鼠标移动到指定距离(购买[0]+140, 购买[1]+350, 1)
                                                    break
                                                time.sleep(3)
                                            for i in range(12):
                                                对话框2 = 单个模板匹配(500, 140, 560, 200, 'XX.png', 0.91, 返回坐标=True)
                                                if 对话框2:
                                                    break
                                                else:
                                                    time.sleep(0.2)
                                            print('图片张数', index)
                                            模板路径 = '40huan/' + str(index + 1) + '.png'
                                            坐标 = 单个模板匹配(260,170,540, 440, 模板路径, 返回坐标=True, 路径='其他')
                                            if 坐标:
                                                鼠标移动到指定距离(坐标[0] + 260, 坐标[1] + 170, 1)
                                                鼠标移动到指定距离(407, 532, 1)
                                                pyautogui.move(0,-40)
                                                pyautogui.click()
                                                任务已完成 = True
                                                for i in range(8):
                                                    回门派()
                                                    场景窗口文本识别()
                                                    if 门派场景名称 in 场景文本:
                                                        break
                                        else:
                                            打开或关闭地图()
                                            鼠标移动到指定距离(225, 384, 1)
                                            打开或关闭地图()
                                elif '门派里面 ' in 场景文本:
                                    print(0,index)
                                    if (index + 1) <= 9:
                                        print(1)
                                        鼠标移动到指定距离(473, 476, 1)
                                        鼠标移动到指定距离(180, 411, 1)
                                    else:
                                        print(2)
                            elif '长安' in 买地点:
                                if not '长安城' in 场景文本 and not '门派里面' in 场景文本 or 首次前往:
                                    打开或关闭背包()
                                    打开长安飞行旗()
                                    time.sleep(0.3)
                                    if 买地点 == '长安武器店':
                                        鼠标移动到指定距离(467, 488, 1, 红点=True)
                                        打开或关闭背包()
                                        time.sleep(0.4)
                                        打开或关闭地图()
                                        鼠标移动到指定距离(598, 457, 1)
                                        打开或关闭地图()
                                    elif 买地点 == '长安饰品':
                                        鼠标移动到指定距离(467, 488, 1, 红点=True)
                                        打开或关闭背包()
                                        time.sleep(0.4)
                                        打开或关闭地图()
                                        鼠标移动到指定距离(511, 482, 1)
                                        打开或关闭地图()
                                    elif 买地点 =='长安布店':
                                        鼠标移动到指定距离(467, 488, 1, 红点=True)
                                        打开或关闭背包()
                                        time.sleep(0.4)
                                        打开或关闭地图()
                                        鼠标移动到指定距离(492, 459, 1)
                                        打开或关闭地图()
                                    time.sleep(0.6)
                                    场景窗口文本识别()

                                if '长安城' in 场景文本 and not '门派里面' in 场景文本:
                                    if 买地点 == '长安武器店':
                                        if 471<场景点X坐标<479 and 39<场景点Y坐标<44:
                                            鼠标移动到指定距离(472, 292, 1)
                                            time.sleep(1)
                                            for i in range(5):
                                                隐藏人物()
                                                鼠标移动到指定距离(440, 293, 1)
                                                time.sleep(0.5)
                                                购买 = 单个模板匹配(140, 350, 250, 450, 'goumai.png', 返回坐标=True)
                                                if 购买:
                                                    鼠标移动到指定距离(购买[0]+140, 购买[1]+350, 1)
                                                    break
                                            for i in range(12):
                                                对话框2 = 单个模板匹配(500, 140, 560, 200, 'XX.png', 0.91, 返回坐标=True)
                                                if 对话框2:
                                                    break
                                                else:
                                                    time.sleep(0.2)
                                            print('图片张数', index)
                                            模板路径 = '40huan/' + str(index + 1) + '.png'
                                            坐标 = 单个模板匹配(260,170,540, 440, 模板路径, 返回坐标=True, 路径='其他')
                                            if 坐标:
                                                鼠标移动到指定距离(坐标[0] + 260, 坐标[1] + 170, 1)
                                                鼠标移动到指定距离(407, 532, 1)
                                                pyautogui.move(0,-40)
                                                pyautogui.click()
                                                任务已完成 = True
                                                for i in range(8):
                                                    回门派()
                                                    场景窗口文本识别()
                                                    if 门派场景名称 in 场景文本:
                                                        break
                                        else:
                                            打开或关闭地图()
                                            鼠标移动到指定距离(598, 457, 1)
                                            打开或关闭地图()
                                    elif 买地点 == '长安饰品':
                                        if '长安' in 场景文本 and 384 < 场景点X坐标 < 393 and 12 < 场景点Y坐标 < 17:
                                            鼠标移动到指定距离(344, 304, 1)
                                            time.sleep(1)
                                            鼠标移动到指定距离(240, 280, 1)
                                            time.sleep(4.5)
                                            for i in range(5):
                                                场景窗口文本识别()
                                                隐藏人物()
                                                鼠标移动到指定距离(406 - (场景点X坐标 - 26) * 20, 310 + (场景点Y坐标 - 21) * 20,1)
                                                time.sleep(0.5)
                                                购买 = 单个模板匹配(140, 350, 250, 450, 'goumai.png', 返回坐标=True)
                                                if 购买:
                                                    鼠标移动到指定距离(购买[0]+140, 购买[1]+350, 1)
                                                    break
                                                time.sleep(3)
                                            for i in range(12):
                                                对话框2 = 单个模板匹配(500, 140, 560, 200, 'XX.png', 0.91, 返回坐标=True)
                                                if 对话框2:
                                                    break
                                                else:
                                                    time.sleep(0.2)
                                            print('图片张数', index)
                                            模板路径 = '40huan/' + str(index + 1) + '.png'
                                            坐标 = 单个模板匹配(260, 170, 540, 440, 模板路径, 返回坐标=True, 路径='其他')
                                            if 坐标:
                                                鼠标移动到指定距离(坐标[0] + 260, 坐标[1] + 170, 1)
                                                鼠标移动到指定距离(407, 532, 1)
                                                pyautogui.move(0, -40)
                                                pyautogui.click()
                                                任务已完成 = True
                                                for i in range(8):
                                                    回门派()
                                                    场景窗口文本识别()
                                                    if 门派场景名称 in 场景文本:
                                                        break
                                        else:
                                            打开或关闭地图()
                                            鼠标移动到指定距离(511, 482, 1)
                                            打开或关闭地图()
                                    elif 买地点 == '长安布店':
                                        if 364 < 场景点X坐标 < 370 and 36 < 场景点Y坐标 < 42:
                                            pyautogui.hotkey('alt', 'h')
                                            鼠标移动到指定距离(362, 285, 1)
                                            time.sleep(1)
                                            for i in range(5):
                                                隐藏人物()
                                                鼠标移动到指定距离(557, 294, 1)
                                                time.sleep(0.5)
                                                购买 = 单个模板匹配(140, 350, 250, 450, 'goumai.png', 返回坐标=True)
                                                if 购买:
                                                    鼠标移动到指定距离(购买[0]+140, 购买[1]+350, 1)
                                                    break
                                            for i in range(12):
                                                对话框2 = 单个模板匹配(500, 140, 560, 200, 'XX.png', 0.91, 返回坐标=True)
                                                if 对话框2:
                                                    break
                                                else:
                                                    time.sleep(0.2)
                                            print('图片张数', index)
                                            模板路径 = '40huan/' + str(index + 1) + '.png'
                                            坐标 = 单个模板匹配(260,170,540, 440, 模板路径, 返回坐标=True, 路径='其他')
                                            if 坐标:
                                                鼠标移动到指定距离(坐标[0] + 260, 坐标[1] + 170, 1)
                                                鼠标移动到指定距离(407, 532, 1)
                                                pyautogui.move(0,-40)
                                                pyautogui.click()
                                                任务已完成 = True
                                                for i in range(8):
                                                    回门派()
                                                    场景窗口文本识别()
                                                    if 门派场景名称 in 场景文本:
                                                        break
                                        else:
                                            打开或关闭地图()
                                            鼠标移动到指定距离(492, 459, 1)
                                            打开或关闭地图()
                        elif len(任务文本) < 10 or '签到'in 任务文本:
                            # 任务开= 单个模板匹配(776, 300, 817, 450, 'renwukai.png',返回坐标=True)
                            任务隐藏 = 指定窗口文本识别(163, 167, 813, 200)
                            if not '务' in 任务隐藏 or not '追' in 任务隐藏 or not '踪' in 任务隐藏  or '签到'in 任务文本:
                                顶点坐标X, 顶点坐标Y, 左下角坐标X, 左下角坐标Y, 找到窗口 = 窗口句柄函数('梦幻西游 ',812, 663, 50,50)
                                if not 找到窗口:
                                    这个账号已完成任务=True
                                    continue
                                鼠标移动到指定距离(765, 180, 4, 0.2)
                                pyautogui.move(24, 0, 0.5)
                                pyautogui.click()
                                任务文本=[]
                        elif "战神山特别"in 任务文本:
                            任务已完成= True
                        else:
                            if not '没有' in 任务文本:
                                print("识别错误")
                                任务文本 = []
                                点击人物中心(随机整数50*2, abs(随机整数50)*2)
                # bbbbb
                elif 任务类型 == '押镖' or 任务类型 == '临时押镖':
                    if len(任务文本) < 10:
                        # 任务开= 单个模板匹配(776, 300, 817, 450, 'renwukai.png',返回坐标=True)
                        任务隐藏 = 指定窗口文本识别(163, 167, 813, 200)
                        if not '务' in 任务隐藏 or not '追' in 任务隐藏 or not '踪' in 任务隐藏:
                            鼠标移动到指定距离(765, 180, 4, 0.2)
                            pyautogui.move(24, 0, 0.5)
                            pyautogui.click()
                            任务文本 = []
                    elif 押镖数 == 押镖次数:
                        刷新账号的任务状态('押镖:未完成', '押镖:已完成', 1)
                        任务类型, 第几个账号, 账号, 密码 = 任务类型输出函数(我想要完成的任务及顺序, 第几个账号)
                        pyautogui.press('f2')
                        师门已完成 = False
                        continue
                    elif 任务类型 == '临时押镖' and 押镖数 == 1:
                        任务类型 = '师门'
                        continue
                    战斗类型 = '押镖'
                    print('前往押镖')
                    # 777777
                    if not '运' in 任务文本:
                        if not '长安' in 场景文本 and not '长风镖局' in 场景文本:
                            打开或关闭背包()
                            打开长安飞行旗()
                            time.sleep(0.2)
                            if 这个号的区 == '功成名就':
                                鼠标移动到指定距离(590, 330, 1, 红点=True)
                            else:
                                if 家具X == None and 家具Y == None or 随机整数100 > 70:
                                    家具X, 家具Y = 鼠标移动到指定距离(655, 370, 1, 红点=True)
                                else:
                                    鼠标移动到指定距离(家具X, 家具Y, 1)
                            time.sleep(0.2)
                            打开或关闭背包()
                            打开或关闭地图()
                            time.sleep(0.2)
                            鼠标移动到指定距离(653, 349, 1)
                            打开或关闭地图()
                        elif '长安' in 场景文本:
                            if 场景点Y坐标 > 149 and 场景点X坐标 > 510:
                                鼠标移动到指定距离(452, 290, 1)
                                time.sleep(1.2)
                                场景窗口文本识别()
                                if '长风镖局' in 场景文本:
                                    鼠标移动到指定距离(750, 367, 1)
                                    time.sleep(4)
                                else:
                                    鼠标移动到指定距离(452, 290, 1)
                                    time.sleep(1.2)
                                    鼠标移动到指定距离(750, 367, 1)
                                    time.sleep(4)
                            else:
                                if 目标没移动:
                                    打开或关闭地图()
                                    鼠标移动到指定距离(653, 349, 1)
                                    打开或关闭地图()
                        if '长风镖局' in 场景文本:
                            隐藏人物()
                            while 终止按键:
                                场景窗口文本识别()
                                镖头 = 单个模板匹配(0, 0, 812, 600, 'ZBT.png', 返回坐标=True)
                                if 35 < 场景点X坐标 < 40:
                                    if 镖头:
                                        鼠标移动到指定距离(镖头[0], 镖头[1], 1)
                                        time.sleep(0.3)
                                        四级镖 = 单个模板匹配(140, 450, 500, 530, '4JB.png', 返回坐标=True)
                                        if 四级镖:
                                            鼠标移动到指定距离(四级镖[0] + 140, 四级镖[1] + 450, 1)
                                            time.sleep(0.3)
                                            鼠标移动到指定距离(280, 394, 1)
                                            time.sleep(0.3)
                                            是否压满 = 单个模板匹配(100, 300, 455, 455, 'YB2.png')
                                            if 是否压满:
                                                刷新账号的任务状态('押镖:未完成', '押镖:已完成', 1)
                                                任务类型, 第几个账号, 账号, 密码 = 任务类型输出函数(
                                                    我想要完成的任务及顺序, 第几个账号)
                                            pyautogui.click()
                                            鼠标移动到指定距离(300, 575, 1)
                                            任务窗口文本识别()
                                            time.sleep(1)
                                            pyautogui.click()
                                            time.sleep(1.3)
                                            鼠标移动到指定距离(180, 557, 1)
                                            break
                                        else:
                                            if 场景点X坐标 == -50 and 场景点Y坐标 == -50:
                                                验证函数()
                                    else:
                                        隐藏人物()
                                        pyautogui.move(100, 0)
                                else:
                                    隐藏人物()
                                    镖头2 = 单个模板匹配(0, 0, 812, 600, 'ZBT2.png', 返回坐标=True)
                                    if 镖头2:
                                        鼠标移动到指定距离(镖头2[0], 镖头2[1] + 90, 1)
                                        time.sleep(3)
                                    else:
                                        鼠标移动到指定距离(750, 367, 1)
                                        time.sleep(3)
                                if not "长风" in 场景文本:
                                    break
                        if ('没有' in 任务文本 or '列表' in 任务文本 or '追踪' in 任务文本) and 目标没移动:
                            任务文本 = []
                    elif '运' in 任务文本 and '镖' in 任务文本:
                        战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
                        if not 战斗中:
                            判断是否移动中()
                            押镖前往命令()
                # dddd
                elif 任务类型 == '打图' or 任务类型 == '临时打图':
                    print('前往打图')
                    战斗类型 = '打图'
                    if 今日领取次数 > 打图次数 and not '挖宝' in 任务文本 and 任务类型 != '临时打图':
                        print('今日领取次数>20今日领取次数>20今日领取次数>20')
                        刷新账号的任务状态('打图:未完成', '打图:已完成', 1)
                        任务类型, 第几个账号, 账号, 密码 = 任务类型输出函数(我想要完成的任务及顺序, 第几个账号)
                        continue
                    elif 临时打图次数 > 6 and 任务类型 == '临时打图' and ('没有' in 任务文本 or '列表' in 任务文本):
                        任务类型 = '师门'
                        重新领取 = True
                        任务已完成 = True
                        物品属类 = 3
                        continue
                    if ('没有' in 任务文本 or '列表' in 任务文本) and not '安酒' in 场景文本:
                        print("正在前往酒店")
                        打开或关闭背包()
                        打开长安飞行旗()
                        点击酒店飞行坐标()
                        打开或关闭背包()
                        进入 = 场景切换判断('长安城')
                        if 进入:
                            pyautogui.hotkey('alt', 'h')
                            鼠标移动到指定距离(466, 255, 1)
                            已进入 = 场景切换判断('长安酒店')
                            if 已进入:
                                pyautogui.move(60, 130)
                                pyautogui.click()
                                场景窗口文本识别()
                    if ('没有' in 任务文本 or '列表' in 任务文本 or '追踪' in 任务文本) and '安酒' in 场景文本 :
                        首次 = True
                        while 终止按键:
                            隐藏人物()
                            随机数载入()
                            图像 = ImageGrab.grab(
                                bbox=(顶点坐标X + 25, 顶点坐标Y + 100, 顶点坐标X + 812, 顶点坐标Y + 630))
                            图像数组 = np.array(图像)
                            目标颜色 = np.array([135, 135, 3])
                            距离 = np.linalg.norm(图像数组.astype(int) - 目标颜色, axis=-1)
                            掩模 = 距离 <= 7  # 阈值
                            改变后的像素坐标 = np.argwhere(掩模)
                            print("改变后的像素个数：", len(改变后的像素坐标))
                            像素分组 = defaultdict(list)
                            for i, 像素1 in enumerate(改变后的像素坐标):
                                for j, 像素2 in enumerate(改变后的像素坐标):
                                    if i != j and abs(像素1[0] - 像素2[0]) < 20 and abs(像素1[1] - 像素2[1]) < 20:
                                        像素分组[i].append(j)
                            if len(像素分组) > 0:
                                最大相似点数 = max(像素分组, key=lambda x: len(像素分组[x]))
                                print('像素分组:', 像素分组)
                                print("最密集的区域中心像素点：", 改变后的像素坐标[最大相似点数])
                                最密集中心点坐标 = 改变后的像素坐标[最大相似点数]
                                if 最密集中心点坐标[0] < 140:  # 这个是Y坐标
                                    最密集中心点坐标[0] = 最密集中心点坐标[0] + 100
                                elif 480 > 最密集中心点坐标[0] > 300:
                                    最密集中心点坐标[0] = 最密集中心点坐标[0] - 20
                                elif 480 <= 最密集中心点坐标[0]:
                                    最密集中心点坐标[0] = 最密集中心点坐标[0] - 100
                                if 最密集中心点坐标[1] > 520:  # 这个是X坐标
                                    最密集中心点坐标[1] = 最密集中心点坐标[1] - 90
                                elif 最密集中心点坐标[1] < 200:
                                    最密集中心点坐标[1] = 最密集中心点坐标[1] + 70
                                pyautogui.click(顶点坐标X + 最密集中心点坐标[1] + 10 + 40,
                                                顶点坐标Y + 最密集中心点坐标[0] + 100 - 15, 1)
                                pyautogui.move(-20 + 随机整数5, 随机整数5, 随机小数小)
                                pyautogui.click()
                                pyautogui.move(-20 + 随机整数6, 随机整数6, 随机小数小)
                                pyautogui.click()
                                pyautogui.move(-20 + 随机整数3, 随机整数3, 随机小数小)
                                pyautogui.click()
                            else:
                                if len(改变后的像素坐标) > 0:
                                    最密集中心点坐标 = 改变后的像素坐标[0]
                                    pyautogui.click(顶点坐标X + 最密集中心点坐标[1] + 25 - 10 + 40,
                                                    顶点坐标Y + 最密集中心点坐标[0] + 100 - 25, 1)
                                    pyautogui.move(-20 + 随机整数5, 随机整数5)
                                    pyautogui.click()
                                    pyautogui.move(-20 + 随机整数6, 随机整数6)
                                    pyautogui.click()
                                    pyautogui.move(-20 + 随机整数3, 随机整数3)
                                    pyautogui.click()
                                else:
                                    pyautogui.move(50 + 随机整数3, 随机整数3)
                                    print('没有识别到店小二')
                                    场景窗口文本识别()
                                    if 0<场景点X坐标 < 20:
                                        if 随机整数100 > 60:
                                            鼠标移动到指定距离(550, 350, 1)
                                    elif 60 > 场景点X坐标 > 35:
                                        if 随机整数100 > 60:
                                            鼠标移动到指定距离(200, 350, 1)
                                    elif 场景点Y坐标 > 25:
                                        if 随机整数100 > 60:
                                            鼠标移动到指定距离(450, 550, 1)
                                    elif 场景点X坐标 > 355 or 场景点X坐标 > 35 and 场景点Y坐标 > 20:
                                        break
                                        #这里是走出酒店了
                            任务取1 = 单个模板匹配(130, 400, 220, 460, 'renwuqu.jpg')
                            任务取2 = 单个模板匹配(170, 300, 266, 350, 'renwuqu2.jpg')
                            任务取99 = 单个模板匹配(150, 410, 222, 444, '99.png')
                            任务取3 = 单个模板匹配(640, 200, 688, 240, 'watuyou.png')
                            if 任务取1 or 任务取2 or 任务取3:
                                鼠标移动到指定距离(200, 413, 1)
                                pyautogui.hotkey('alt', 'q')
                                鼠标移动到指定距离(166, 448, 4)
                                首次前往 = True
                                临时打图次数 += 1
                                break
                            elif 任务取99:
                                鼠标移动到指定距离(202, 453, 1)
                        任务窗口文本识别(识别类型='任务栏')
                        pyautogui.click()
                    if '挖宝' in 任务文本 or '强' in 任务文本 or '盗' in 任务文本:
                        室内 = False
                        if ("王" in 任务文本 or "土" in 任务文本) and "贼" in 任务文本:
                            print('发现贼王任务，正在前往...')
                            室内 = 贼王店铺前往命令()
                            战斗类型 = '贼王'
                        print('是否在室内', 室内, '是否目标没移动', 目标没移动)
                        if not 室内:
                            time.sleep(0.4)
                            目标前往命令()
                            print('去正在前往')
                        if abs(坐标差X) < 11 and abs(坐标差Y) < 11 and 目标没移动:
                            if "王" in 任务文本 and "贼" in 任务文本:
                                time.sleep(2)
                                贼王模板匹配()
                                战斗类型 = '贼王'
                            else:
                                鼠标移动到指定距离(244, 393, 4)
                                强盗 = 单个模板匹配(130, 350, 424, 448, 'daqiangdao.png')
                                if 强盗:
                                    pyautogui.click()
                                    for i in range(10):
                                        time.sleep(0.1)
                                        战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
                                        if 战斗中:
                                            战斗攻击()
                                            break
                                else:
                                    找到重叠了=重叠判断('强', '盗')
                                    鼠标移动到指定距离(244, 393, 4)
                                    强盗 = 单个模板匹配(130, 350, 424, 448, 'daqiangdao.png')
                                    if 强盗:
                                        pyautogui.click()
                                        for i in range(10):
                                            time.sleep(0.1)
                                            战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
                                            if 战斗中:
                                                战斗攻击()
                                                break
                                    elif not 找到重叠了:
                                        print('请添加人物遮挡移动的代码')
                    elif len(任务文本) < 10 and 场景点X坐标 != 50 and 场景点Y坐标 != 50:
                        # 任务开= 单个模板匹配(776, 300, 817, 450, 'renwukai.png',返回坐标=True)
                        任务隐藏 = 指定窗口文本识别(163, 167, 813, 200)
                        if not '务' in 任务隐藏 or not '追' in 任务隐藏 or not '踪' in 任务隐藏:
                            鼠标移动到指定距离(765, 180, 4, 0.2)
                            pyautogui.move(24, 0, 0.5)
                            pyautogui.click()
                        任务文本 = []
                    else:
                        任务文本 = []
                        print('3')
                        pyautogui.press('f9')
                # tttt
                elif 任务类型 == '挖图':
                    if 是否重新载入仓库宝图窗口1:
                        打开或关闭背包()
                        绿7 = 单个模板匹配(380, 230, 650, 450, 'lv7.png', 0.92)
                        打开或关闭背包()
                        if 绿7:
                            整理到行囊(5, 1)
                    if 单次挖图坐标 == []:
                        背包开 = 单个模板匹配(600, 200, 765, 300, 'beibaokai.png')
                        if not 背包开:
                            print('背包没有打开,已打开背包')
                            打开或关闭背包()
                        中心点列表1 = 背包宝图模板匹配()
                        if len(中心点列表1) > 0:
                            读取并定制挖宝路线('X', '无')
                            打开或关闭背包()
                        elif len(中心点列表1) == 0:
                            打开或关闭背包()
                            场景窗口文本识别()
                            print('场景文本:', 场景文本)
                            if not '宝象国' in 场景文本 :
                                使用快捷键打开飞行符()
                                点击宝象国飞行点()
                                鼠标移动到指定距离(306, 253, 1)
                                time.sleep(0.3 + 随机小数0)
                                鼠标移动到指定距离(210, 430, 1)
                                鼠标移动到指定距离(210 + 随机整数3, 200 + 随机整数3, 4)
                                场景窗口文本识别()
                            if '宝' in 场景文本 and not '凌' in 场景文本:
                                回宝象国存放战利品(已到宝象=True)
                                if 是否重新载入仓库宝图窗口1:
                                    with open("仓库宝图数据1.txt", "w") as file:
                                        file.truncate(0)  # 使用 truncate(0) 方法清空文件内容
                                    载入仓库宝图坐标及位置(挖图仓库数量)
                                    是否重新载入仓库宝图窗口1 = False
                                with open('仓库宝图数据1.txt', 'r', encoding='utf-8') as 文件:
                                    数据 = 文件.readlines()
                                第一个地点1 = None  # 初始化第一个地点
                                输出行 = []  # 用于存储需要保留的行
                                for i in range(0, len(数据), 3):
                                    地点 = 数据[i].split(': ')[1].strip()
                                    中心点 = 数据[i + 1].split(': ')[1].strip()
                                    仓库个数 = 数据[i + 2].split(': ')[1].strip()
                                    中心点 = ast.literal_eval(中心点)
                                    if 第一个地点1 is None:
                                        第一个地点1 = 地点
                                        print(f"宝图地点: {地点}, 模板坐标: {中心点}, 仓库页数: {仓库个数}")
                                        鼠标移动到指定距离(135 + int(仓库个数) * 21, 501, 1)
                                        time.sleep(0.6)
                                        鼠标移动到指定距离(中心点[0], 中心点[1], 3)
                                        continue
                                    if 地点 != 第一个地点1:
                                        输出行.append(数据[i])
                                        输出行.append(数据[i + 1])
                                        输出行.append(数据[i + 2])
                                    else:
                                        if int(仓库个数) == 页数1:
                                            print(f"宝图地点: {地点}, 模板坐标: {中心点}, 仓库页数: {仓库个数}")
                                            鼠标移动到指定距离(中心点[0], 中心点[1], 3)
                                        else:
                                            页数1 = int(仓库个数)
                                            鼠标移动到指定距离(135 + 页数1 * 21, 501, 1)
                                            time.sleep(0.6)
                                            鼠标移动到指定距离(中心点[0], 中心点[1], 3)
                                with open('仓库宝图数据1.txt', 'w', encoding='utf-8') as 文件:
                                    文件.writelines(输出行)
                                关闭仓库()
                                挖宝地点1 = 第一个地点1
                                场景窗口文本识别()
                                挖宝地点 = 挖宝地点1
                                print('挖宝地点：', 挖宝地点)
                                if 挖宝地点 is None:
                                    print('挖图已完成')
                                    任务类型 = '清仓库'
                                    continue
                                前往当地挖宝地点()
                    elif len(单次挖图坐标) > 0:
                        print('这里是开始点:')
                        中心坐标 = 中心点列表1[0]
                        任务点X坐标 = 单次挖图坐标[0][0]
                        任务点Y坐标 = 单次挖图坐标[0][1]
                        坐标差X = 场景点X坐标- 任务点X坐标
                        坐标差Y = 场景点Y坐标 - 任务点Y坐标
                        print('任务点X坐标, 任务点Y坐标:', 任务点X坐标, 任务点Y坐标)
                        挖宝地点 = 挖宝地点1
                        print('挖宝地点:', 挖宝地点)
                        挖宝目标前往命令()
                        print('单次挖图坐标:', 单次挖图坐标)
                        print('这里是结束点:')
                        # if 计数器 == 2:
                        #     print('数器 == 2数器 == 2数器 == 2')
                        #     鼠标移动到指定距离(中心点列表1[0][0], 中心点列表1[0][1], 1)
                        #     time.sleep(0.3)
                        #     鼠标移动到指定距离(518, 232, 1)0
                        #     time.sleep(0.3)
                        #     pyautogui.move(-80, 0)
                        #     pyautogui.click()
                        #     计数器 = 0
                elif 任务类型 == '清仓库':
                    打开或关闭背包()
                    绿7 = 单个模板匹配(380, 230, 650, 450, 'lv7.png', 0.92)
                    打开或关闭背包()
                    if 绿7:
                        整理到行囊(5, 1)
                    书铁已清空 = True
                    低级环已清空 = False
                    环已清空 = False
                    杂货已清空 = False
                    if not '长安' in 场景文本:
                        打开或关闭背包()
                        打开长安飞行旗()
                        鼠标移动到指定距离(330, 330, 1, 红点=True)
                        打开或关闭背包()
                        time.sleep(1)
                        打开或关闭地图()
                        鼠标移动到指定距离(355, 360, 1)
                        打开或关闭地图()
                    if '长安' in 场景文本:
                        if 144 > 场景点Y坐标 > 139 and 231 > 场景点X坐标 > 225 and 目标没移动:
                            鼠标移动到指定距离(406 - (场景点X坐标 - 224) * 20, 310 + (场景点Y坐标 - 141) * 20, 1)
                            time.sleep(0.7)
                            鼠标移动到指定距离(211, 430, 1)
                            time.sleep(0.7)

                            仓库开 = 单个模板匹配(340, 170, 730, 360, 'cangkukai.png')
                            print(仓库开)
                            if 仓库开:
                                if not 书铁已清空:
                                    清空背包或行囊(1, 1)
                                    仓库物品取出('书铁', 20)
                                    关闭仓库()
                                    摆摊卖货('长安城', '书铁', 222, 144, 30, 40)
                                    书铁已清空 = True
                                elif not 低级环已清空:
                                    print('仓库开')
                                    清空背包或行囊(1, 1)
                                    仓库物品取出('40级以下环', 15)
                                    关闭仓库()
                                    卖低级环()
                                    低级环已清空 = True
                                elif not 环已清空:
                                    pass
                                elif not 杂货已清空:
                                    pass
                            elif not 仓库开:
                                鼠标移动到指定距离(406 - (场景点X坐标 - 110) * 20, 310 + (场景点Y坐标 - 74) * 20, 1)
                                鼠标移动到指定距离(215, 428, 1)
                        else:
                            if 目标没移动:
                                打开或关闭地图()
                                鼠标移动到指定距离(355, 360, 1)
                                打开或关闭地图()
                elif 任务类型 == '买图':
                    鼠标移开()
                    打开或关闭背包()
                    中心点列表 = 背包宝图模板匹配()
                    绿7 = 单个模板匹配(380, 230, 650, 450, 'lv7.png', 0.92)
                    打开或关闭背包()
                    if 绿7:
                        整理到行囊(5, 1)
                    print('len(中心点列表)', len(中心点列表))
                    if len(中心点列表) < 15 and not '长' in 场景文本:
                        打开或关闭背包()
                        打开长安飞行旗()
                        time.sleep(0.3)
                        点击酒店飞行坐标()
                        time.sleep(0.5)
                        打开或关闭背包()
                        if 买图地点 == '酒店':
                            pyautogui.press('f9')
                            pass
                        elif 买图地点 == '宝石':
                            打开或关闭地图()
                            鼠标移动到指定距离(624, 356, 1)
                            打开或关闭地图()
                            场景窗口文本识别()
                            time.sleep(7)
                            pyautogui.press('f9')
                    elif '长' in 场景文本 and len(中心点列表) < 15:

                        背包满了 = False
                        if 宝石商人已清空:
                            while not 背包满了 and 终止按键:
                                # 场景窗口文本识别()
                                摊位中心点列表 = 摊位识别并点击('TT', '图', '19', '19')
                                for 摊位 in 摊位中心点列表:
                                    time.sleep(0.4)
                                    摊位开 = 单个模板匹配(240, 100, 376, 190, 'tanweikai.png', 0.91)
                                    if not 摊位开:
                                        鼠标移动到指定距离(摊位[0], 摊位[1], 3)
                                    if 摊位开:
                                        宝图有 = 单个模板匹配(100, 170, 630, 500, 'BT.png')
                                        if 宝图有:
                                            背包满了 = 宝图价格识别并点击()
                                            if 背包满了 or not 终止按键:
                                                break
                                        elif not 宝图有:
                                            鼠标移动到指定距离(680, 180, 3)
                                            time.sleep(0.8)
                        elif not 宝石商人已清空:
                            if 500 > 场景点X坐标 > 493 and 150 > 场景点Y坐标 > 140 and 目标没移动:
                                鼠标移动到指定距离(406 - (场景点X坐标 - 499) * 20, 310 + (场景点Y坐标 - 141) * 20, 1)
                                time.sleep(0.6 + 随机小数0)
                                鼠标移动到指定距离(243, 416, 1)
                                鼠标移动到指定距离(193, 413, 1)
                                for i in range(16 - len(中心点列表)):
                                    pyautogui.click()
                                    time.sleep(0.5)
                                宝石商人已清空 = True
                            else:
                                if 目标没移动:
                                    打开或关闭地图()
                                    鼠标移动到指定距离(624, 357, 1)
                                    打开或关闭地图()

                        if 背包满了:
                            鼠标移动到指定距离(680, 180, 3)
                            使用快捷键打开飞行符()
                            time.sleep(随机小数0)
                            点击宝象国飞行点()
                            time.sleep(0.6 + 随机小数0)
                            开图()
                            点击仓库管理员()
                            time.sleep(0.4 + 随机小数0)
                            鼠标移动到指定距离(210, 430, 1)
                            time.sleep(1)
                    elif '长' in 场景文本 and (
                            510 < 场景点X坐标 or 160 < 场景点Y坐标 or 场景点X坐标 < 480 or 场景点Y坐标 < 130) and len(
                        中心点列表) < 15:
                        打开或关闭地图()
                        鼠标移动到指定距离(625, 354, 1)
                        打开或关闭地图()
                        time.sleep(1)
                    elif '长' in 场景文本 and len(中心点列表) > 15:
                        使用快捷键打开飞行符()
                        time.sleep(随机小数0)
                        点击宝象国飞行点()
                        time.sleep(0.6 + 随机小数0)
                        开图()
                        点击仓库管理员()
                        time.sleep(0.4 + 随机小数0)
                        鼠标移动到指定距离(210, 430, 1)
                        time.sleep(1)
                    if '宝' in 场景文本 or '象' in 场景文本:
                        time.sleep(0.6)
                        仓库开 = 单个模板匹配(300, 150, 800, 280, 'cangkukai.png', 0.75)
                        print(仓库开)
                        清空背包或行囊(5, 1, 行囊不清空=True)
                        关闭仓库()
                    elif '宝' in 场景文本 or '象' in 场景文本 and len(中心点列表) > 15:
                        使用快捷键打开飞行符()
                        time.sleep(随机小数0)
                        点击宝象国飞行点()
                        time.sleep(0.6 + 随机小数0)
                        开图()
                        点击仓库管理员()
                        time.sleep(0.4 + 随机小数0)
                        鼠标移动到指定距离(210, 430, 1)
                        time.sleep(1)
                elif 任务类型=='场景挂机':
                    战斗类型 = '场景挂机'
                    if 挂机场景地点=='花果山':
                        任务文本='花果山 55,55 '
                        任务点X坐标=65
                        任务点Y坐标 = 65
                        print(任务文本,任务文本)
                    if not 挂机场景地点 in 场景文本 and 队长模式:
                        目标前往命令()
                    if 挂机场景地点 in 场景文本 and 队长模式:
                        随机1 = random.randint(235, 500)  # 随机整数
                        随机2 = random.randint(235, 500)  # 随机整数
                        if 目标没移动:
                            战斗中 = 单个模板匹配(776, 300, 817, 450, 'PK.png')
                            if not 战斗中:
                                打开或关闭地图()
                                time.sleep(0.4)
                                鼠标移动到指定距离(随机1, 随机2, 1)
                                打开或关闭地图()
                        血量检测系统()
                    elif not 队长模式:
                        任务取99 = 单个模板匹配(150, 410, 222, 444, '99.png', 返回坐标=True)
                        巫医3 = 单个模板匹配(130, 380, 500, 520, '51222.png', 返回坐标=True)
                        if 巫医3:
                            鼠标移动到指定距离(巫医3[0] + 130, 巫医3[1] + 380, 1)
                        elif 任务取99:
                            鼠标移动到指定距离(任务取99[0] + 150, 任务取99[1] + 410, 1)
                        血量检测系统()
                print('任务类型:', 任务类型)
                if not 任务已完成:
                    框关闭函数()
        if not 终止按键:
            while True:
                time.sleep(0.5)
                if 终止按键 or 这个账号已完成任务:
                    框关闭函数()
                    time.sleep(0.2)
                    框关闭函数()
                    任务文本=[]
                    break
        if 这个账号已完成任务:
            break
        print('这个账号已完成任务末尾',这个账号已完成任务)